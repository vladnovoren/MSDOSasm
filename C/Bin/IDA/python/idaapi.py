# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.37
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IDA Pro Plugin SDK API wrapper
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        try:
            fp, pathname, description = imp.find_module('_idaapi', [dirname(__file__)])
            _mod = imp.load_module('_idaapi', fp, pathname, description)
        finally:
            if fp is not None: fp.close()
        return _mod
    _idaapi = swig_import_helper()
    del swig_import_helper
else:
    import _idaapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


BADADDR = _idaapi.BADADDR
BADSEL = _idaapi.BADSEL
BADNODE = _idaapi.BADNODE
IDA_SDK_VERSION = _idaapi.IDA_SDK_VERSION
MAXSTR = _idaapi.MAXSTR
__MF__ = _idaapi.__MF__
FMT_64 = _idaapi.FMT_64
FMT_EA = _idaapi.FMT_EA

def qexit(*args):
  """qexit(int code)"""
  return _idaapi.qexit(*args)
class __qthread_t(object):
    """Proxy of C++ __qthread_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> __qthread_t"""
        this = _idaapi.new___qthread_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete___qthread_t
    __del__ = lambda self : None;
__qthread_t_swigregister = _idaapi.__qthread_t_swigregister
__qthread_t_swigregister(__qthread_t)

def can_place32(*args):
  """
    can_place32(uint64 a) -> bool
    can_place32(int64 a) -> bool
    """
  return _idaapi.can_place32(*args)
cvar = _idaapi.cvar


def qthread_create(*args):
  """qthread_create(qthread_cb_t thread_cb, void ud) -> qthread_t"""
  return _idaapi.qthread_create(*args)

def qthread_free(*args):
  """qthread_free(qthread_t q)"""
  return _idaapi.qthread_free(*args)

def qthread_join(*args):
  """qthread_join(qthread_t q) -> bool"""
  return _idaapi.qthread_join(*args)

def qthread_kill(*args):
  """qthread_kill(qthread_t q) -> bool"""
  return _idaapi.qthread_kill(*args)

def qthread_self(*args):
  """qthread_self() -> qthread_t"""
  return _idaapi.qthread_self(*args)
class __qsemaphore_t(object):
    """Proxy of C++ __qsemaphore_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> __qsemaphore_t"""
        this = _idaapi.new___qsemaphore_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete___qsemaphore_t
    __del__ = lambda self : None;
__qsemaphore_t_swigregister = _idaapi.__qsemaphore_t_swigregister
__qsemaphore_t_swigregister(__qsemaphore_t)


def qsem_create(*args):
  """qsem_create(char name, int init_count) -> qsemaphore_t"""
  return _idaapi.qsem_create(*args)

def qsem_free(*args):
  """qsem_free(qsemaphore_t sem) -> bool"""
  return _idaapi.qsem_free(*args)

def qsem_post(*args):
  """qsem_post(qsemaphore_t sem) -> bool"""
  return _idaapi.qsem_post(*args)

def qsem_wait(*args):
  """qsem_wait(qsemaphore_t sem, int timeout_ms) -> bool"""
  return _idaapi.qsem_wait(*args)
class __qmutex_t(object):
    """Proxy of C++ __qmutex_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> __qmutex_t"""
        this = _idaapi.new___qmutex_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete___qmutex_t
    __del__ = lambda self : None;
__qmutex_t_swigregister = _idaapi.__qmutex_t_swigregister
__qmutex_t_swigregister(__qmutex_t)


def qmutex_free(*args):
  """qmutex_free(qmutex_t m) -> bool"""
  return _idaapi.qmutex_free(*args)

def qmutex_create(*args):
  """qmutex_create() -> qmutex_t"""
  return _idaapi.qmutex_create(*args)

def qmutex_lock(*args):
  """qmutex_lock(qmutex_t m) -> bool"""
  return _idaapi.qmutex_lock(*args)

def qmutex_unlock(*args):
  """qmutex_unlock(qmutex_t m) -> bool"""
  return _idaapi.qmutex_unlock(*args)

def qsplitpath(*args):
  """qsplitpath(char path, char dir, char file) -> char"""
  return _idaapi.qsplitpath(*args)
class uchar_array(object):
    """Proxy of C++ uchar_array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, size_t nelements) -> uchar_array"""
        this = _idaapi.new_uchar_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_uchar_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, size_t index) -> uchar"""
        return _idaapi.uchar_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, size_t index, uchar value)"""
        return _idaapi.uchar_array___setitem__(self, *args)

    def cast(self, *args):
        """cast(self) -> uchar"""
        return _idaapi.uchar_array_cast(self, *args)

    def frompointer(self, *args):
        """frompointer(uchar t) -> uchar_array"""
        return _idaapi.uchar_array_frompointer(self, *args)

    frompointer = staticmethod(frompointer)
uchar_array_swigregister = _idaapi.uchar_array_swigregister
uchar_array_swigregister(uchar_array)

def uchar_array_frompointer(*args):
  """uchar_array_frompointer(uchar t) -> uchar_array"""
  return _idaapi.uchar_array_frompointer(*args)

class tid_array(object):
    """Proxy of C++ tid_array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, size_t nelements) -> tid_array"""
        this = _idaapi.new_tid_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_tid_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, size_t index) -> tid_t"""
        return _idaapi.tid_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, size_t index, tid_t value)"""
        return _idaapi.tid_array___setitem__(self, *args)

    def cast(self, *args):
        """cast(self) -> tid_t"""
        return _idaapi.tid_array_cast(self, *args)

    def frompointer(self, *args):
        """frompointer(tid_t t) -> tid_array"""
        return _idaapi.tid_array_frompointer(self, *args)

    frompointer = staticmethod(frompointer)
tid_array_swigregister = _idaapi.tid_array_swigregister
tid_array_swigregister(tid_array)

def tid_array_frompointer(*args):
  """tid_array_frompointer(tid_t t) -> tid_array"""
  return _idaapi.tid_array_frompointer(*args)

class ea_array(object):
    """Proxy of C++ ea_array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, size_t nelements) -> ea_array"""
        this = _idaapi.new_ea_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_ea_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, size_t index) -> ea_t"""
        return _idaapi.ea_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, size_t index, ea_t value)"""
        return _idaapi.ea_array___setitem__(self, *args)

    def cast(self, *args):
        """cast(self) -> ea_t"""
        return _idaapi.ea_array_cast(self, *args)

    def frompointer(self, *args):
        """frompointer(ea_t t) -> ea_array"""
        return _idaapi.ea_array_frompointer(self, *args)

    frompointer = staticmethod(frompointer)
ea_array_swigregister = _idaapi.ea_array_swigregister
ea_array_swigregister(ea_array)

def ea_array_frompointer(*args):
  """ea_array_frompointer(ea_t t) -> ea_array"""
  return _idaapi.ea_array_frompointer(*args)

class sel_array(object):
    """Proxy of C++ sel_array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, size_t nelements) -> sel_array"""
        this = _idaapi.new_sel_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_sel_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, size_t index) -> sel_t"""
        return _idaapi.sel_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, size_t index, sel_t value)"""
        return _idaapi.sel_array___setitem__(self, *args)

    def cast(self, *args):
        """cast(self) -> sel_t"""
        return _idaapi.sel_array_cast(self, *args)

    def frompointer(self, *args):
        """frompointer(sel_t t) -> sel_array"""
        return _idaapi.sel_array_frompointer(self, *args)

    frompointer = staticmethod(frompointer)
sel_array_swigregister = _idaapi.sel_array_swigregister
sel_array_swigregister(sel_array)

def sel_array_frompointer(*args):
  """sel_array_frompointer(sel_t t) -> sel_array"""
  return _idaapi.sel_array_frompointer(*args)

class uval_array(object):
    """Proxy of C++ uval_array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, size_t nelements) -> uval_array"""
        this = _idaapi.new_uval_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_uval_array
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """__getitem__(self, size_t index) -> uval_t"""
        return _idaapi.uval_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, size_t index, uval_t value)"""
        return _idaapi.uval_array___setitem__(self, *args)

    def cast(self, *args):
        """cast(self) -> uval_t"""
        return _idaapi.uval_array_cast(self, *args)

    def frompointer(self, *args):
        """frompointer(uval_t t) -> uval_array"""
        return _idaapi.uval_array_frompointer(self, *args)

    frompointer = staticmethod(frompointer)
uval_array_swigregister = _idaapi.uval_array_swigregister
uval_array_swigregister(uval_array)

def uval_array_frompointer(*args):
  """uval_array_frompointer(uval_t t) -> uval_array"""
  return _idaapi.uval_array_frompointer(*args)

class int_pointer(object):
    """Proxy of C++ int_pointer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> int_pointer"""
        this = _idaapi.new_int_pointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_int_pointer
    __del__ = lambda self : None;
    def assign(self, *args):
        """assign(self, int value)"""
        return _idaapi.int_pointer_assign(self, *args)

    def value(self, *args):
        """value(self) -> int"""
        return _idaapi.int_pointer_value(self, *args)

    def cast(self, *args):
        """cast(self) -> int"""
        return _idaapi.int_pointer_cast(self, *args)

    def frompointer(self, *args):
        """frompointer(int t) -> int_pointer"""
        return _idaapi.int_pointer_frompointer(self, *args)

    frompointer = staticmethod(frompointer)
int_pointer_swigregister = _idaapi.int_pointer_swigregister
int_pointer_swigregister(int_pointer)

def int_pointer_frompointer(*args):
  """int_pointer_frompointer(int t) -> int_pointer"""
  return _idaapi.int_pointer_frompointer(*args)

class ea_pointer(object):
    """Proxy of C++ ea_pointer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ea_pointer"""
        this = _idaapi.new_ea_pointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_ea_pointer
    __del__ = lambda self : None;
    def assign(self, *args):
        """assign(self, ea_t value)"""
        return _idaapi.ea_pointer_assign(self, *args)

    def value(self, *args):
        """value(self) -> ea_t"""
        return _idaapi.ea_pointer_value(self, *args)

    def cast(self, *args):
        """cast(self) -> ea_t"""
        return _idaapi.ea_pointer_cast(self, *args)

    def frompointer(self, *args):
        """frompointer(ea_t t) -> ea_pointer"""
        return _idaapi.ea_pointer_frompointer(self, *args)

    frompointer = staticmethod(frompointer)
ea_pointer_swigregister = _idaapi.ea_pointer_swigregister
ea_pointer_swigregister(ea_pointer)

def ea_pointer_frompointer(*args):
  """ea_pointer_frompointer(ea_t t) -> ea_pointer"""
  return _idaapi.ea_pointer_frompointer(*args)

class sval_pointer(object):
    """Proxy of C++ sval_pointer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> sval_pointer"""
        this = _idaapi.new_sval_pointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_sval_pointer
    __del__ = lambda self : None;
    def assign(self, *args):
        """assign(self, sval_t value)"""
        return _idaapi.sval_pointer_assign(self, *args)

    def value(self, *args):
        """value(self) -> sval_t"""
        return _idaapi.sval_pointer_value(self, *args)

    def cast(self, *args):
        """cast(self) -> sval_t"""
        return _idaapi.sval_pointer_cast(self, *args)

    def frompointer(self, *args):
        """frompointer(sval_t t) -> sval_pointer"""
        return _idaapi.sval_pointer_frompointer(self, *args)

    frompointer = staticmethod(frompointer)
sval_pointer_swigregister = _idaapi.sval_pointer_swigregister
sval_pointer_swigregister(sval_pointer)

def sval_pointer_frompointer(*args):
  """sval_pointer_frompointer(sval_t t) -> sval_pointer"""
  return _idaapi.sval_pointer_frompointer(*args)

class sel_pointer(object):
    """Proxy of C++ sel_pointer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> sel_pointer"""
        this = _idaapi.new_sel_pointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_sel_pointer
    __del__ = lambda self : None;
    def assign(self, *args):
        """assign(self, sel_t value)"""
        return _idaapi.sel_pointer_assign(self, *args)

    def value(self, *args):
        """value(self) -> sel_t"""
        return _idaapi.sel_pointer_value(self, *args)

    def cast(self, *args):
        """cast(self) -> sel_t"""
        return _idaapi.sel_pointer_cast(self, *args)

    def frompointer(self, *args):
        """frompointer(sel_t t) -> sel_pointer"""
        return _idaapi.sel_pointer_frompointer(self, *args)

    frompointer = staticmethod(frompointer)
sel_pointer_swigregister = _idaapi.sel_pointer_swigregister
sel_pointer_swigregister(sel_pointer)

def sel_pointer_frompointer(*args):
  """sel_pointer_frompointer(sel_t t) -> sel_pointer"""
  return _idaapi.sel_pointer_frompointer(*args)

f_EXE_old = _idaapi.f_EXE_old
f_COM_old = _idaapi.f_COM_old
f_BIN = _idaapi.f_BIN
f_DRV = _idaapi.f_DRV
f_WIN = _idaapi.f_WIN
f_HEX = _idaapi.f_HEX
f_MEX = _idaapi.f_MEX
f_LX = _idaapi.f_LX
f_LE = _idaapi.f_LE
f_NLM = _idaapi.f_NLM
f_COFF = _idaapi.f_COFF
f_PE = _idaapi.f_PE
f_OMF = _idaapi.f_OMF
f_SREC = _idaapi.f_SREC
f_ZIP = _idaapi.f_ZIP
f_OMFLIB = _idaapi.f_OMFLIB
f_AR = _idaapi.f_AR
f_LOADER = _idaapi.f_LOADER
f_ELF = _idaapi.f_ELF
f_W32RUN = _idaapi.f_W32RUN
f_AOUT = _idaapi.f_AOUT
f_PRC = _idaapi.f_PRC
f_EXE = _idaapi.f_EXE
f_COM = _idaapi.f_COM
f_AIXAR = _idaapi.f_AIXAR
f_MACHO = _idaapi.f_MACHO
class compiler_info_t(object):
    """Proxy of C++ compiler_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_idaapi.compiler_info_t_id_get, _idaapi.compiler_info_t_id_set)
    cm = _swig_property(_idaapi.compiler_info_t_cm_get, _idaapi.compiler_info_t_cm_set)
    size_i = _swig_property(_idaapi.compiler_info_t_size_i_get, _idaapi.compiler_info_t_size_i_set)
    size_b = _swig_property(_idaapi.compiler_info_t_size_b_get, _idaapi.compiler_info_t_size_b_set)
    size_e = _swig_property(_idaapi.compiler_info_t_size_e_get, _idaapi.compiler_info_t_size_e_set)
    defalign = _swig_property(_idaapi.compiler_info_t_defalign_get, _idaapi.compiler_info_t_defalign_set)
    size_s = _swig_property(_idaapi.compiler_info_t_size_s_get, _idaapi.compiler_info_t_size_s_set)
    size_l = _swig_property(_idaapi.compiler_info_t_size_l_get, _idaapi.compiler_info_t_size_l_set)
    size_ll = _swig_property(_idaapi.compiler_info_t_size_ll_get, _idaapi.compiler_info_t_size_ll_set)
    def __init__(self, *args): 
        """__init__(self) -> compiler_info_t"""
        this = _idaapi.new_compiler_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_compiler_info_t
    __del__ = lambda self : None;
compiler_info_t_swigregister = _idaapi.compiler_info_t_swigregister
compiler_info_t_swigregister(compiler_info_t)

STT_CUR = _idaapi.STT_CUR
STT_VA = _idaapi.STT_VA
STT_MM = _idaapi.STT_MM
STT_DBG = _idaapi.STT_DBG
class idainfo(object):
    """Proxy of C++ idainfo class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tag = _swig_property(_idaapi.idainfo_tag_get, _idaapi.idainfo_tag_set)
    version = _swig_property(_idaapi.idainfo_version_get, _idaapi.idainfo_version_set)
    procName = _swig_property(_idaapi.idainfo_procName_get, _idaapi.idainfo_procName_set)
    def get_proc_name(self, *args):
        """get_proc_name(self) -> char"""
        return _idaapi.idainfo_get_proc_name(self, *args)

    lflags = _swig_property(_idaapi.idainfo_lflags_get, _idaapi.idainfo_lflags_set)
    def is_32bit(self, *args):
        """is_32bit(self) -> bool"""
        return _idaapi.idainfo_is_32bit(self, *args)

    def is_64bit(self, *args):
        """is_64bit(self) -> bool"""
        return _idaapi.idainfo_is_64bit(self, *args)

    def is_snapshot(self, *args):
        """is_snapshot(self) -> bool"""
        return _idaapi.idainfo_is_snapshot(self, *args)

    demnames = _swig_property(_idaapi.idainfo_demnames_get, _idaapi.idainfo_demnames_set)
    def get_demname_form(self, *args):
        """get_demname_form(self) -> uchar"""
        return _idaapi.idainfo_get_demname_form(self, *args)

    filetype = _swig_property(_idaapi.idainfo_filetype_get, _idaapi.idainfo_filetype_set)
    def like_binary(self, *args):
        """like_binary(self) -> bool"""
        return _idaapi.idainfo_like_binary(self, *args)

    fcoresiz = _swig_property(_idaapi.idainfo_fcoresiz_get, _idaapi.idainfo_fcoresiz_set)
    corestart = _swig_property(_idaapi.idainfo_corestart_get, _idaapi.idainfo_corestart_set)
    ostype = _swig_property(_idaapi.idainfo_ostype_get, _idaapi.idainfo_ostype_set)
    apptype = _swig_property(_idaapi.idainfo_apptype_get, _idaapi.idainfo_apptype_set)
    startSP = _swig_property(_idaapi.idainfo_startSP_get, _idaapi.idainfo_startSP_set)
    af = _swig_property(_idaapi.idainfo_af_get, _idaapi.idainfo_af_set)
    startIP = _swig_property(_idaapi.idainfo_startIP_get, _idaapi.idainfo_startIP_set)
    beginEA = _swig_property(_idaapi.idainfo_beginEA_get, _idaapi.idainfo_beginEA_set)
    minEA = _swig_property(_idaapi.idainfo_minEA_get, _idaapi.idainfo_minEA_set)
    maxEA = _swig_property(_idaapi.idainfo_maxEA_get, _idaapi.idainfo_maxEA_set)
    ominEA = _swig_property(_idaapi.idainfo_ominEA_get, _idaapi.idainfo_ominEA_set)
    omaxEA = _swig_property(_idaapi.idainfo_omaxEA_get, _idaapi.idainfo_omaxEA_set)
    lowoff = _swig_property(_idaapi.idainfo_lowoff_get, _idaapi.idainfo_lowoff_set)
    highoff = _swig_property(_idaapi.idainfo_highoff_get, _idaapi.idainfo_highoff_set)
    maxref = _swig_property(_idaapi.idainfo_maxref_get, _idaapi.idainfo_maxref_set)
    ASCIIbreak = _swig_property(_idaapi.idainfo_ASCIIbreak_get, _idaapi.idainfo_ASCIIbreak_set)
    wide_high_byte_first = _swig_property(_idaapi.idainfo_wide_high_byte_first_get, _idaapi.idainfo_wide_high_byte_first_set)
    indent = _swig_property(_idaapi.idainfo_indent_get, _idaapi.idainfo_indent_set)
    comment = _swig_property(_idaapi.idainfo_comment_get, _idaapi.idainfo_comment_set)
    xrefnum = _swig_property(_idaapi.idainfo_xrefnum_get, _idaapi.idainfo_xrefnum_set)
    s_entab = _swig_property(_idaapi.idainfo_s_entab_get, _idaapi.idainfo_s_entab_set)
    specsegs = _swig_property(_idaapi.idainfo_specsegs_get, _idaapi.idainfo_specsegs_set)
    s_void = _swig_property(_idaapi.idainfo_s_void_get, _idaapi.idainfo_s_void_set)
    s_reserved2 = _swig_property(_idaapi.idainfo_s_reserved2_get, _idaapi.idainfo_s_reserved2_set)
    s_showauto = _swig_property(_idaapi.idainfo_s_showauto_get, _idaapi.idainfo_s_showauto_set)
    s_auto = _swig_property(_idaapi.idainfo_s_auto_get, _idaapi.idainfo_s_auto_set)
    s_limiter = _swig_property(_idaapi.idainfo_s_limiter_get, _idaapi.idainfo_s_limiter_set)
    s_null = _swig_property(_idaapi.idainfo_s_null_get, _idaapi.idainfo_s_null_set)
    s_genflags = _swig_property(_idaapi.idainfo_s_genflags_get, _idaapi.idainfo_s_genflags_set)
    def use_allasm(self, *args):
        """use_allasm(self) -> bool"""
        return _idaapi.idainfo_use_allasm(self, *args)

    def loading_idc(self, *args):
        """loading_idc(self) -> bool"""
        return _idaapi.idainfo_loading_idc(self, *args)

    s_showpref = _swig_property(_idaapi.idainfo_s_showpref_get, _idaapi.idainfo_s_showpref_set)
    s_prefseg = _swig_property(_idaapi.idainfo_s_prefseg_get, _idaapi.idainfo_s_prefseg_set)
    asmtype = _swig_property(_idaapi.idainfo_asmtype_get, _idaapi.idainfo_asmtype_set)
    baseaddr = _swig_property(_idaapi.idainfo_baseaddr_get, _idaapi.idainfo_baseaddr_set)
    s_xrefflag = _swig_property(_idaapi.idainfo_s_xrefflag_get, _idaapi.idainfo_s_xrefflag_set)
    binSize = _swig_property(_idaapi.idainfo_binSize_get, _idaapi.idainfo_binSize_set)
    s_cmtflg = _swig_property(_idaapi.idainfo_s_cmtflg_get, _idaapi.idainfo_s_cmtflg_set)
    nametype = _swig_property(_idaapi.idainfo_nametype_get, _idaapi.idainfo_nametype_set)
    s_showbads = _swig_property(_idaapi.idainfo_s_showbads_get, _idaapi.idainfo_s_showbads_set)
    s_prefflag = _swig_property(_idaapi.idainfo_s_prefflag_get, _idaapi.idainfo_s_prefflag_set)
    s_packbase = _swig_property(_idaapi.idainfo_s_packbase_get, _idaapi.idainfo_s_packbase_set)
    asciiflags = _swig_property(_idaapi.idainfo_asciiflags_get, _idaapi.idainfo_asciiflags_set)
    listnames = _swig_property(_idaapi.idainfo_listnames_get, _idaapi.idainfo_listnames_set)
    ASCIIpref = _swig_property(_idaapi.idainfo_ASCIIpref_get, _idaapi.idainfo_ASCIIpref_set)
    ASCIIsernum = _swig_property(_idaapi.idainfo_ASCIIsernum_get, _idaapi.idainfo_ASCIIsernum_set)
    ASCIIzeroes = _swig_property(_idaapi.idainfo_ASCIIzeroes_get, _idaapi.idainfo_ASCIIzeroes_set)
    graph_view = _swig_property(_idaapi.idainfo_graph_view_get, _idaapi.idainfo_graph_view_set)
    s_reserved5 = _swig_property(_idaapi.idainfo_s_reserved5_get, _idaapi.idainfo_s_reserved5_set)
    tribyte_order = _swig_property(_idaapi.idainfo_tribyte_order_get, _idaapi.idainfo_tribyte_order_set)
    mf = _swig_property(_idaapi.idainfo_mf_get, _idaapi.idainfo_mf_set)
    s_org = _swig_property(_idaapi.idainfo_s_org_get, _idaapi.idainfo_s_org_set)
    s_assume = _swig_property(_idaapi.idainfo_s_assume_get, _idaapi.idainfo_s_assume_set)
    s_checkarg = _swig_property(_idaapi.idainfo_s_checkarg_get, _idaapi.idainfo_s_checkarg_set)
    start_ss = _swig_property(_idaapi.idainfo_start_ss_get, _idaapi.idainfo_start_ss_set)
    start_cs = _swig_property(_idaapi.idainfo_start_cs_get, _idaapi.idainfo_start_cs_set)
    main = _swig_property(_idaapi.idainfo_main_get, _idaapi.idainfo_main_set)
    short_demnames = _swig_property(_idaapi.idainfo_short_demnames_get, _idaapi.idainfo_short_demnames_set)
    long_demnames = _swig_property(_idaapi.idainfo_long_demnames_get, _idaapi.idainfo_long_demnames_set)
    datatypes = _swig_property(_idaapi.idainfo_datatypes_get, _idaapi.idainfo_datatypes_set)
    strtype = _swig_property(_idaapi.idainfo_strtype_get, _idaapi.idainfo_strtype_set)
    af2 = _swig_property(_idaapi.idainfo_af2_get, _idaapi.idainfo_af2_set)
    namelen = _swig_property(_idaapi.idainfo_namelen_get, _idaapi.idainfo_namelen_set)
    margin = _swig_property(_idaapi.idainfo_margin_get, _idaapi.idainfo_margin_set)
    lenxref = _swig_property(_idaapi.idainfo_lenxref_get, _idaapi.idainfo_lenxref_set)
    lprefix = _swig_property(_idaapi.idainfo_lprefix_get, _idaapi.idainfo_lprefix_set)
    lprefixlen = _swig_property(_idaapi.idainfo_lprefixlen_get, _idaapi.idainfo_lprefixlen_set)
    cc = _swig_property(_idaapi.idainfo_cc_get, _idaapi.idainfo_cc_set)
    database_change_count = _swig_property(_idaapi.idainfo_database_change_count_get, _idaapi.idainfo_database_change_count_set)
    size_ldbl = _swig_property(_idaapi.idainfo_size_ldbl_get, _idaapi.idainfo_size_ldbl_set)
    def __init__(self, *args): 
        """__init__(self) -> idainfo"""
        this = _idaapi.new_idainfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_idainfo
    __del__ = lambda self : None;
idainfo_swigregister = _idaapi.idainfo_swigregister
idainfo_swigregister(idainfo)
LFLG_PC_FPP = _idaapi.LFLG_PC_FPP
LFLG_PC_FLAT = _idaapi.LFLG_PC_FLAT
LFLG_64BIT = _idaapi.LFLG_64BIT
LFLG_DBG_NOPATH = _idaapi.LFLG_DBG_NOPATH
LFLG_SNAPSHOT = _idaapi.LFLG_SNAPSHOT
DEMNAM_MASK = _idaapi.DEMNAM_MASK
DEMNAM_CMNT = _idaapi.DEMNAM_CMNT
DEMNAM_NAME = _idaapi.DEMNAM_NAME
DEMNAM_NONE = _idaapi.DEMNAM_NONE
DEMNAM_GCC3 = _idaapi.DEMNAM_GCC3
AF_FIXUP = _idaapi.AF_FIXUP
AF_MARKCODE = _idaapi.AF_MARKCODE
AF_UNK = _idaapi.AF_UNK
AF_CODE = _idaapi.AF_CODE
AF_PROC = _idaapi.AF_PROC
AF_USED = _idaapi.AF_USED
AF_FLIRT = _idaapi.AF_FLIRT
AF_PROCPTR = _idaapi.AF_PROCPTR
AF_JFUNC = _idaapi.AF_JFUNC
AF_NULLSUB = _idaapi.AF_NULLSUB
AF_LVAR = _idaapi.AF_LVAR
AF_TRACE = _idaapi.AF_TRACE
AF_ASCII = _idaapi.AF_ASCII
AF_IMMOFF = _idaapi.AF_IMMOFF
AF_DREFOFF = _idaapi.AF_DREFOFF
AF_FINAL = _idaapi.AF_FINAL
LMT_THIN = _idaapi.LMT_THIN
LMT_THICK = _idaapi.LMT_THICK
LMT_EMPTY = _idaapi.LMT_EMPTY
INFFL_LZERO = _idaapi.INFFL_LZERO
INFFL_ALLASM = _idaapi.INFFL_ALLASM
INFFL_LOADIDC = _idaapi.INFFL_LOADIDC
SW_SEGXRF = _idaapi.SW_SEGXRF
SW_XRFMRK = _idaapi.SW_XRFMRK
SW_XRFFNC = _idaapi.SW_XRFFNC
SW_XRFVAL = _idaapi.SW_XRFVAL
SW_RPTCMT = _idaapi.SW_RPTCMT
SW_ALLCMT = _idaapi.SW_ALLCMT
SW_NOCMT = _idaapi.SW_NOCMT
SW_LINNUM = _idaapi.SW_LINNUM
SW_TESTMODE = _idaapi.SW_TESTMODE
SW_SHHID_ITEM = _idaapi.SW_SHHID_ITEM
SW_SHHID_FUNC = _idaapi.SW_SHHID_FUNC
SW_SHHID_SEGM = _idaapi.SW_SHHID_SEGM
NM_REL_OFF = _idaapi.NM_REL_OFF
NM_PTR_OFF = _idaapi.NM_PTR_OFF
NM_NAM_OFF = _idaapi.NM_NAM_OFF
NM_REL_EA = _idaapi.NM_REL_EA
NM_PTR_EA = _idaapi.NM_PTR_EA
NM_NAM_EA = _idaapi.NM_NAM_EA
NM_EA = _idaapi.NM_EA
NM_EA4 = _idaapi.NM_EA4
NM_EA8 = _idaapi.NM_EA8
NM_SHORT = _idaapi.NM_SHORT
NM_SERIAL = _idaapi.NM_SERIAL
PREF_SEGADR = _idaapi.PREF_SEGADR
PREF_FNCOFF = _idaapi.PREF_FNCOFF
PREF_STACK = _idaapi.PREF_STACK
PREF_VARMARK = _idaapi.PREF_VARMARK
ASCF_GEN = _idaapi.ASCF_GEN
ASCF_AUTO = _idaapi.ASCF_AUTO
ASCF_SERIAL = _idaapi.ASCF_SERIAL
ASCF_UNICODE = _idaapi.ASCF_UNICODE
ASCF_COMMENT = _idaapi.ASCF_COMMENT
ASCF_SAVECASE = _idaapi.ASCF_SAVECASE
LN_NORMAL = _idaapi.LN_NORMAL
LN_PUBLIC = _idaapi.LN_PUBLIC
LN_AUTO = _idaapi.LN_AUTO
LN_WEAK = _idaapi.LN_WEAK
AF2_JUMPTBL = _idaapi.AF2_JUMPTBL
AF2_DODATA = _idaapi.AF2_DODATA
AF2_HFLIRT = _idaapi.AF2_HFLIRT
AF2_STKARG = _idaapi.AF2_STKARG
AF2_REGARG = _idaapi.AF2_REGARG
AF2_CHKUNI = _idaapi.AF2_CHKUNI
AF2_SIGCMT = _idaapi.AF2_SIGCMT
AF2_SIGMLT = _idaapi.AF2_SIGMLT
AF2_FTAIL = _idaapi.AF2_FTAIL
AF2_DATOFF = _idaapi.AF2_DATOFF
AF2_ANORET = _idaapi.AF2_ANORET
AF2_VERSP = _idaapi.AF2_VERSP
AF2_DOCODE = _idaapi.AF2_DOCODE
AF2_TRFUNC = _idaapi.AF2_TRFUNC
AF2_PURDAT = _idaapi.AF2_PURDAT

class text_options_t(object):
    """Proxy of C++ text_options_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    text = _swig_property(_idaapi.text_options_t_text_get, _idaapi.text_options_t_text_set)
    graph = _swig_property(_idaapi.text_options_t_graph_get, _idaapi.text_options_t_graph_set)
    def __init__(self, *args): 
        """__init__(self) -> text_options_t"""
        this = _idaapi.new_text_options_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy_to_inf(self, *args):
        """copy_to_inf(self, bool gv, idainfo inf)"""
        return _idaapi.text_options_t_copy_to_inf(self, *args)

    def copy_from_inf(self, *args):
        """copy_from_inf(self, idainfo inf)"""
        return _idaapi.text_options_t_copy_from_inf(self, *args)

    __swig_destroy__ = _idaapi.delete_text_options_t
    __del__ = lambda self : None;
text_options_t_swigregister = _idaapi.text_options_t_swigregister
text_options_t_swigregister(text_options_t)


def showRepeatables(*args):
  """showRepeatables() -> bool"""
  return _idaapi.showRepeatables(*args)

def showAllComments(*args):
  """showAllComments() -> bool"""
  return _idaapi.showAllComments(*args)

def showComments(*args):
  """showComments() -> bool"""
  return _idaapi.showComments(*args)

def should_trace_sp(*args):
  """should_trace_sp() -> bool"""
  return _idaapi.should_trace_sp(*args)

def should_create_stkvars(*args):
  """should_create_stkvars() -> bool"""
  return _idaapi.should_create_stkvars(*args)
MAXADDR = _idaapi.MAXADDR

def toEA(*args):
  """toEA(sel_t reg_cs, ea_t reg_ip) -> ea_t"""
  return _idaapi.toEA(*args)

def idb2scr(*args):
  """idb2scr(char name) -> char"""
  return _idaapi.idb2scr(*args)

def scr2idb(*args):
  """scr2idb(char name) -> char"""
  return _idaapi.scr2idb(*args)

def ansi2idb(*args):
  """ansi2idb(char name) -> char"""
  return _idaapi.ansi2idb(*args)
IDB_EXT32 = _idaapi.IDB_EXT32
IDB_EXT64 = _idaapi.IDB_EXT64
IDB_EXT = _idaapi.IDB_EXT

def dto_copy_to_inf(*args):
  """dto_copy_to_inf( arg0, idainfo inf)"""
  return _idaapi.dto_copy_to_inf(*args)

def dto_copy_from_inf(*args):
  """dto_copy_from_inf( arg0, idainfo inf)"""
  return _idaapi.dto_copy_from_inf(*args)

def dto_init(*args):
  """dto_init( dt, bool for_graph)"""
  return _idaapi.dto_init(*args)
IDD_INTERFACE_VERSION = _idaapi.IDD_INTERFACE_VERSION
NO_PROCESS = _idaapi.NO_PROCESS
NO_THREAD = _idaapi.NO_THREAD
class process_info_t(object):
    """Proxy of C++ process_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pid = _swig_property(_idaapi.process_info_t_pid_get, _idaapi.process_info_t_pid_set)
    name = _swig_property(_idaapi.process_info_t_name_get, _idaapi.process_info_t_name_set)
    def __init__(self, *args): 
        """__init__(self) -> process_info_t"""
        this = _idaapi.new_process_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_process_info_t
    __del__ = lambda self : None;
process_info_t_swigregister = _idaapi.process_info_t_swigregister
process_info_t_swigregister(process_info_t)

class register_info_t(object):
    """Proxy of C++ register_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_idaapi.register_info_t_name_get, _idaapi.register_info_t_name_set)
    flags = _swig_property(_idaapi.register_info_t_flags_get, _idaapi.register_info_t_flags_set)
    register_class = _swig_property(_idaapi.register_info_t_register_class_get, _idaapi.register_info_t_register_class_set)
    dtyp = _swig_property(_idaapi.register_info_t_dtyp_get, _idaapi.register_info_t_dtyp_set)
    bit_strings = _swig_property(_idaapi.register_info_t_bit_strings_get, _idaapi.register_info_t_bit_strings_set)
    bit_strings_default = _swig_property(_idaapi.register_info_t_bit_strings_default_get, _idaapi.register_info_t_bit_strings_default_set)
    def __init__(self, *args): 
        """__init__(self) -> register_info_t"""
        this = _idaapi.new_register_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_register_info_t
    __del__ = lambda self : None;
register_info_t_swigregister = _idaapi.register_info_t_swigregister
register_info_t_swigregister(register_info_t)
REGISTER_READONLY = _idaapi.REGISTER_READONLY
REGISTER_IP = _idaapi.REGISTER_IP
REGISTER_SP = _idaapi.REGISTER_SP
REGISTER_FP = _idaapi.REGISTER_FP
REGISTER_ADDRESS = _idaapi.REGISTER_ADDRESS
REGISTER_CS = _idaapi.REGISTER_CS
REGISTER_SS = _idaapi.REGISTER_SS
REGISTER_NOLF = _idaapi.REGISTER_NOLF

class memory_info_t(object):
    """Proxy of C++ memory_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> memory_info_t"""
        this = _idaapi.new_memory_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    name = _swig_property(_idaapi.memory_info_t_name_get, _idaapi.memory_info_t_name_set)
    sclass = _swig_property(_idaapi.memory_info_t_sclass_get, _idaapi.memory_info_t_sclass_set)
    sbase = _swig_property(_idaapi.memory_info_t_sbase_get, _idaapi.memory_info_t_sbase_set)
    bitness = _swig_property(_idaapi.memory_info_t_bitness_get, _idaapi.memory_info_t_bitness_set)
    perm = _swig_property(_idaapi.memory_info_t_perm_get, _idaapi.memory_info_t_perm_set)
    def __eq__(self, *args):
        """__eq__(self, memory_info_t r) -> bool"""
        return _idaapi.memory_info_t___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, memory_info_t r) -> bool"""
        return _idaapi.memory_info_t___ne__(self, *args)

    __swig_destroy__ = _idaapi.delete_memory_info_t
    __del__ = lambda self : None;
memory_info_t_swigregister = _idaapi.memory_info_t_swigregister
memory_info_t_swigregister(memory_info_t)

NO_EVENT = _idaapi.NO_EVENT
PROCESS_START = _idaapi.PROCESS_START
PROCESS_EXIT = _idaapi.PROCESS_EXIT
THREAD_START = _idaapi.THREAD_START
THREAD_EXIT = _idaapi.THREAD_EXIT
BREAKPOINT = _idaapi.BREAKPOINT
STEP = _idaapi.STEP
EXCEPTION = _idaapi.EXCEPTION
LIBRARY_LOAD = _idaapi.LIBRARY_LOAD
LIBRARY_UNLOAD = _idaapi.LIBRARY_UNLOAD
INFORMATION = _idaapi.INFORMATION
SYSCALL = _idaapi.SYSCALL
WINMESSAGE = _idaapi.WINMESSAGE
PROCESS_ATTACH = _idaapi.PROCESS_ATTACH
PROCESS_DETACH = _idaapi.PROCESS_DETACH
PROCESS_SUSPEND = _idaapi.PROCESS_SUSPEND
class module_info_t(object):
    """Proxy of C++ module_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_idaapi.module_info_t_name_get, _idaapi.module_info_t_name_set)
    base = _swig_property(_idaapi.module_info_t_base_get, _idaapi.module_info_t_base_set)
    size = _swig_property(_idaapi.module_info_t_size_get, _idaapi.module_info_t_size_set)
    rebase_to = _swig_property(_idaapi.module_info_t_rebase_to_get, _idaapi.module_info_t_rebase_to_set)
    def __init__(self, *args): 
        """__init__(self) -> module_info_t"""
        this = _idaapi.new_module_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_module_info_t
    __del__ = lambda self : None;
module_info_t_swigregister = _idaapi.module_info_t_swigregister
module_info_t_swigregister(module_info_t)

class e_breakpoint_t(object):
    """Proxy of C++ e_breakpoint_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    hea = _swig_property(_idaapi.e_breakpoint_t_hea_get, _idaapi.e_breakpoint_t_hea_set)
    kea = _swig_property(_idaapi.e_breakpoint_t_kea_get, _idaapi.e_breakpoint_t_kea_set)
    def __init__(self, *args): 
        """__init__(self) -> e_breakpoint_t"""
        this = _idaapi.new_e_breakpoint_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_e_breakpoint_t
    __del__ = lambda self : None;
e_breakpoint_t_swigregister = _idaapi.e_breakpoint_t_swigregister
e_breakpoint_t_swigregister(e_breakpoint_t)

class e_exception_t(object):
    """Proxy of C++ e_exception_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = _swig_property(_idaapi.e_exception_t_code_get, _idaapi.e_exception_t_code_set)
    can_cont = _swig_property(_idaapi.e_exception_t_can_cont_get, _idaapi.e_exception_t_can_cont_set)
    ea = _swig_property(_idaapi.e_exception_t_ea_get, _idaapi.e_exception_t_ea_set)
    info = _swig_property(_idaapi.e_exception_t_info_get, _idaapi.e_exception_t_info_set)
    def __init__(self, *args): 
        """__init__(self) -> e_exception_t"""
        this = _idaapi.new_e_exception_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_e_exception_t
    __del__ = lambda self : None;
e_exception_t_swigregister = _idaapi.e_exception_t_swigregister
e_exception_t_swigregister(e_exception_t)

class debug_event_t(object):
    """Proxy of C++ debug_event_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> debug_event_t"""
        this = _idaapi.new_debug_event_t(*args)
        try: self.this.append(this)
        except: self.this = this
    eid = _swig_property(_idaapi.debug_event_t_eid_get, _idaapi.debug_event_t_eid_set)
    pid = _swig_property(_idaapi.debug_event_t_pid_get, _idaapi.debug_event_t_pid_set)
    tid = _swig_property(_idaapi.debug_event_t_tid_get, _idaapi.debug_event_t_tid_set)
    ea = _swig_property(_idaapi.debug_event_t_ea_get, _idaapi.debug_event_t_ea_set)
    handled = _swig_property(_idaapi.debug_event_t_handled_get, _idaapi.debug_event_t_handled_set)
    modinfo = _swig_property(_idaapi.debug_event_t_modinfo_get, _idaapi.debug_event_t_modinfo_set)
    exit_code = _swig_property(_idaapi.debug_event_t_exit_code_get, _idaapi.debug_event_t_exit_code_set)
    info = _swig_property(_idaapi.debug_event_t_info_get, _idaapi.debug_event_t_info_set)
    bpt = _swig_property(_idaapi.debug_event_t_bpt_get, _idaapi.debug_event_t_bpt_set)
    exc = _swig_property(_idaapi.debug_event_t_exc_get, _idaapi.debug_event_t_exc_set)
    def bpt_ea(self, *args):
        """bpt_ea(self) -> ea_t"""
        return _idaapi.debug_event_t_bpt_ea(self, *args)

    __swig_destroy__ = _idaapi.delete_debug_event_t
    __del__ = lambda self : None;
debug_event_t_swigregister = _idaapi.debug_event_t_swigregister
debug_event_t_swigregister(debug_event_t)

class exception_info_t(object):
    """Proxy of C++ exception_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = _swig_property(_idaapi.exception_info_t_code_get, _idaapi.exception_info_t_code_set)
    flags = _swig_property(_idaapi.exception_info_t_flags_get, _idaapi.exception_info_t_flags_set)
    def break_on(self, *args):
        """break_on(self) -> bool"""
        return _idaapi.exception_info_t_break_on(self, *args)

    def handle(self, *args):
        """handle(self) -> bool"""
        return _idaapi.exception_info_t_handle(self, *args)

    name = _swig_property(_idaapi.exception_info_t_name_get, _idaapi.exception_info_t_name_set)
    desc = _swig_property(_idaapi.exception_info_t_desc_get, _idaapi.exception_info_t_desc_set)
    def __init__(self, *args): 
        """
        __init__(self) -> exception_info_t
        __init__(self, uint _code, uint32 _flags, char _name, char _desc) -> exception_info_t
        """
        this = _idaapi.new_exception_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_exception_info_t
    __del__ = lambda self : None;
exception_info_t_swigregister = _idaapi.exception_info_t_swigregister
exception_info_t_swigregister(exception_info_t)
BPT_EXEC = cvar.BPT_EXEC
BPT_WRITE = cvar.BPT_WRITE
BPT_RDWR = cvar.BPT_RDWR
BPT_SOFT = cvar.BPT_SOFT
EXC_BREAK = _idaapi.EXC_BREAK
EXC_HANDLE = _idaapi.EXC_HANDLE

class idd_opinfo_t(object):
    """Proxy of C++ idd_opinfo_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    addr = _swig_property(_idaapi.idd_opinfo_t_addr_get, _idaapi.idd_opinfo_t_addr_set)
    value = _swig_property(_idaapi.idd_opinfo_t_value_get, _idaapi.idd_opinfo_t_value_set)
    modified = _swig_property(_idaapi.idd_opinfo_t_modified_get, _idaapi.idd_opinfo_t_modified_set)
    def __init__(self, *args): 
        """__init__(self) -> idd_opinfo_t"""
        this = _idaapi.new_idd_opinfo_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_idd_opinfo_t
    __del__ = lambda self : None;
idd_opinfo_t_swigregister = _idaapi.idd_opinfo_t_swigregister
idd_opinfo_t_swigregister(idd_opinfo_t)

class regval_t(object):
    """Proxy of C++ regval_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ival = _swig_property(_idaapi.regval_t_ival_get, _idaapi.regval_t_ival_set)
    fval = _swig_property(_idaapi.regval_t_fval_get, _idaapi.regval_t_fval_set)
    def __init__(self, *args): 
        """__init__(self) -> regval_t"""
        this = _idaapi.new_regval_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_regval_t
    __del__ = lambda self : None;
regval_t_swigregister = _idaapi.regval_t_swigregister
regval_t_swigregister(regval_t)

PROCESS_NO_THREAD = _idaapi.PROCESS_NO_THREAD

def get_event_module_name(*args):
  """get_event_module_name(debug_event_t ev) -> char"""
  return _idaapi.get_event_module_name(*args)

def get_event_module_base(*args):
  """get_event_module_base(debug_event_t ev) -> ea_t"""
  return _idaapi.get_event_module_base(*args)

def get_event_module_size(*args):
  """get_event_module_size(debug_event_t ev) -> asize_t"""
  return _idaapi.get_event_module_size(*args)

def get_event_exc_info(*args):
  """get_event_exc_info(debug_event_t ev) -> char"""
  return _idaapi.get_event_exc_info(*args)

def get_event_info(*args):
  """get_event_info(debug_event_t ev) -> char"""
  return _idaapi.get_event_info(*args)

def get_event_bpt_hea(*args):
  """get_event_bpt_hea(debug_event_t ev) -> ea_t"""
  return _idaapi.get_event_bpt_hea(*args)

def get_event_exc_code(*args):
  """get_event_exc_code(debug_event_t ev) -> uint"""
  return _idaapi.get_event_exc_code(*args)

def get_event_exc_ea(*args):
  """get_event_exc_ea(debug_event_t ev) -> ea_t"""
  return _idaapi.get_event_exc_ea(*args)

def can_exc_continue(*args):
  """can_exc_continue(debug_event_t ev) -> bool"""
  return _idaapi.can_exc_continue(*args)
IDP_INTERFACE_VERSION = _idaapi.IDP_INTERFACE_VERSION

def InstrIsSet(*args):
  """InstrIsSet(int icode, int bit) -> bool"""
  return _idaapi.InstrIsSet(*args)

def is_call_insn(*args):
  """is_call_insn(ea_t ea) -> bool"""
  return _idaapi.is_call_insn(*args)

def is_ret_insn(*args):
  """is_ret_insn(ea_t ea, bool strict = True) -> bool"""
  return _idaapi.is_ret_insn(*args)

def is_indirect_jump_insn(*args):
  """is_indirect_jump_insn(ea_t ea) -> bool"""
  return _idaapi.is_indirect_jump_insn(*args)

def is_basic_block_end(*args):
  """is_basic_block_end(bool call_insn_stops_block) -> bool"""
  return _idaapi.is_basic_block_end(*args)
class asm_t(object):
    """Proxy of C++ asm_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    flag = _swig_property(_idaapi.asm_t_flag_get, _idaapi.asm_t_flag_set)
    uflag = _swig_property(_idaapi.asm_t_uflag_get, _idaapi.asm_t_uflag_set)
    name = _swig_property(_idaapi.asm_t_name_get, _idaapi.asm_t_name_set)
    help = _swig_property(_idaapi.asm_t_help_get, _idaapi.asm_t_help_set)
    header = _swig_property(_idaapi.asm_t_header_get, _idaapi.asm_t_header_set)
    badworks = _swig_property(_idaapi.asm_t_badworks_get, _idaapi.asm_t_badworks_set)
    origin = _swig_property(_idaapi.asm_t_origin_get, _idaapi.asm_t_origin_set)
    end = _swig_property(_idaapi.asm_t_end_get, _idaapi.asm_t_end_set)
    cmnt = _swig_property(_idaapi.asm_t_cmnt_get, _idaapi.asm_t_cmnt_set)
    ascsep = _swig_property(_idaapi.asm_t_ascsep_get, _idaapi.asm_t_ascsep_set)
    accsep = _swig_property(_idaapi.asm_t_accsep_get, _idaapi.asm_t_accsep_set)
    esccodes = _swig_property(_idaapi.asm_t_esccodes_get, _idaapi.asm_t_esccodes_set)
    a_ascii = _swig_property(_idaapi.asm_t_a_ascii_get, _idaapi.asm_t_a_ascii_set)
    a_byte = _swig_property(_idaapi.asm_t_a_byte_get, _idaapi.asm_t_a_byte_set)
    a_word = _swig_property(_idaapi.asm_t_a_word_get, _idaapi.asm_t_a_word_set)
    a_dword = _swig_property(_idaapi.asm_t_a_dword_get, _idaapi.asm_t_a_dword_set)
    a_qword = _swig_property(_idaapi.asm_t_a_qword_get, _idaapi.asm_t_a_qword_set)
    a_oword = _swig_property(_idaapi.asm_t_a_oword_get, _idaapi.asm_t_a_oword_set)
    a_float = _swig_property(_idaapi.asm_t_a_float_get, _idaapi.asm_t_a_float_set)
    a_double = _swig_property(_idaapi.asm_t_a_double_get, _idaapi.asm_t_a_double_set)
    a_tbyte = _swig_property(_idaapi.asm_t_a_tbyte_get, _idaapi.asm_t_a_tbyte_set)
    a_packreal = _swig_property(_idaapi.asm_t_a_packreal_get, _idaapi.asm_t_a_packreal_set)
    a_dups = _swig_property(_idaapi.asm_t_a_dups_get, _idaapi.asm_t_a_dups_set)
    a_bss = _swig_property(_idaapi.asm_t_a_bss_get, _idaapi.asm_t_a_bss_set)
    a_equ = _swig_property(_idaapi.asm_t_a_equ_get, _idaapi.asm_t_a_equ_set)
    a_seg = _swig_property(_idaapi.asm_t_a_seg_get, _idaapi.asm_t_a_seg_set)
    _UNUSED1_was_atomprefix = _swig_property(_idaapi.asm_t__UNUSED1_was_atomprefix_get, _idaapi.asm_t__UNUSED1_was_atomprefix_set)
    _UNUSED2_was_checkarg_operations = _swig_property(_idaapi.asm_t__UNUSED2_was_checkarg_operations_get, _idaapi.asm_t__UNUSED2_was_checkarg_operations_set)
    XlatAsciiOutput = _swig_property(_idaapi.asm_t_XlatAsciiOutput_get, _idaapi.asm_t_XlatAsciiOutput_set)
    a_curip = _swig_property(_idaapi.asm_t_a_curip_get, _idaapi.asm_t_a_curip_set)
    a_public = _swig_property(_idaapi.asm_t_a_public_get, _idaapi.asm_t_a_public_set)
    a_weak = _swig_property(_idaapi.asm_t_a_weak_get, _idaapi.asm_t_a_weak_set)
    a_extrn = _swig_property(_idaapi.asm_t_a_extrn_get, _idaapi.asm_t_a_extrn_set)
    a_comdef = _swig_property(_idaapi.asm_t_a_comdef_get, _idaapi.asm_t_a_comdef_set)
    a_align = _swig_property(_idaapi.asm_t_a_align_get, _idaapi.asm_t_a_align_set)
    lbrace = _swig_property(_idaapi.asm_t_lbrace_get, _idaapi.asm_t_lbrace_set)
    rbrace = _swig_property(_idaapi.asm_t_rbrace_get, _idaapi.asm_t_rbrace_set)
    a_mod = _swig_property(_idaapi.asm_t_a_mod_get, _idaapi.asm_t_a_mod_set)
    a_band = _swig_property(_idaapi.asm_t_a_band_get, _idaapi.asm_t_a_band_set)
    a_bor = _swig_property(_idaapi.asm_t_a_bor_get, _idaapi.asm_t_a_bor_set)
    a_xor = _swig_property(_idaapi.asm_t_a_xor_get, _idaapi.asm_t_a_xor_set)
    a_bnot = _swig_property(_idaapi.asm_t_a_bnot_get, _idaapi.asm_t_a_bnot_set)
    a_shl = _swig_property(_idaapi.asm_t_a_shl_get, _idaapi.asm_t_a_shl_set)
    a_shr = _swig_property(_idaapi.asm_t_a_shr_get, _idaapi.asm_t_a_shr_set)
    a_sizeof_fmt = _swig_property(_idaapi.asm_t_a_sizeof_fmt_get, _idaapi.asm_t_a_sizeof_fmt_set)
    flag2 = _swig_property(_idaapi.asm_t_flag2_get, _idaapi.asm_t_flag2_set)
    cmnt2 = _swig_property(_idaapi.asm_t_cmnt2_get, _idaapi.asm_t_cmnt2_set)
    low8 = _swig_property(_idaapi.asm_t_low8_get, _idaapi.asm_t_low8_set)
    high8 = _swig_property(_idaapi.asm_t_high8_get, _idaapi.asm_t_high8_set)
    low16 = _swig_property(_idaapi.asm_t_low16_get, _idaapi.asm_t_low16_set)
    high16 = _swig_property(_idaapi.asm_t_high16_get, _idaapi.asm_t_high16_set)
    a_include_fmt = _swig_property(_idaapi.asm_t_a_include_fmt_get, _idaapi.asm_t_a_include_fmt_set)
    a_vstruc_fmt = _swig_property(_idaapi.asm_t_a_vstruc_fmt_get, _idaapi.asm_t_a_vstruc_fmt_set)
    a_3byte = _swig_property(_idaapi.asm_t_a_3byte_get, _idaapi.asm_t_a_3byte_set)
    a_rva = _swig_property(_idaapi.asm_t_a_rva_get, _idaapi.asm_t_a_rva_set)
    def __init__(self, *args): 
        """__init__(self) -> asm_t"""
        this = _idaapi.new_asm_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_asm_t
    __del__ = lambda self : None;
asm_t_swigregister = _idaapi.asm_t_swigregister
asm_t_swigregister(asm_t)
AS_OFFST = _idaapi.AS_OFFST
AS_COLON = _idaapi.AS_COLON
AS_UDATA = _idaapi.AS_UDATA
AS_2CHRE = _idaapi.AS_2CHRE
AS_NCHRE = _idaapi.AS_NCHRE
AS_N2CHR = _idaapi.AS_N2CHR
AS_1TEXT = _idaapi.AS_1TEXT
AS_NHIAS = _idaapi.AS_NHIAS
AS_NCMAS = _idaapi.AS_NCMAS
AS_HEXFM = _idaapi.AS_HEXFM
ASH_HEXF0 = _idaapi.ASH_HEXF0
ASH_HEXF1 = _idaapi.ASH_HEXF1
ASH_HEXF2 = _idaapi.ASH_HEXF2
ASH_HEXF3 = _idaapi.ASH_HEXF3
ASH_HEXF4 = _idaapi.ASH_HEXF4
ASH_HEXF5 = _idaapi.ASH_HEXF5
AS_DECFM = _idaapi.AS_DECFM
ASD_DECF0 = _idaapi.ASD_DECF0
ASD_DECF1 = _idaapi.ASD_DECF1
ASD_DECF2 = _idaapi.ASD_DECF2
ASD_DECF3 = _idaapi.ASD_DECF3
AS_OCTFM = _idaapi.AS_OCTFM
ASO_OCTF0 = _idaapi.ASO_OCTF0
ASO_OCTF1 = _idaapi.ASO_OCTF1
ASO_OCTF2 = _idaapi.ASO_OCTF2
ASO_OCTF3 = _idaapi.ASO_OCTF3
ASO_OCTF4 = _idaapi.ASO_OCTF4
ASO_OCTF5 = _idaapi.ASO_OCTF5
ASO_OCTF6 = _idaapi.ASO_OCTF6
AS_BINFM = _idaapi.AS_BINFM
ASB_BINF0 = _idaapi.ASB_BINF0
ASB_BINF1 = _idaapi.ASB_BINF1
ASB_BINF2 = _idaapi.ASB_BINF2
ASB_BINF3 = _idaapi.ASB_BINF3
ASB_BINF4 = _idaapi.ASB_BINF4
ASB_BINF5 = _idaapi.ASB_BINF5
AS_UNEQU = _idaapi.AS_UNEQU
AS_ONEDUP = _idaapi.AS_ONEDUP
AS_NOXRF = _idaapi.AS_NOXRF
AS_XTRNTYPE = _idaapi.AS_XTRNTYPE
AS_RELSUP = _idaapi.AS_RELSUP
AS_LALIGN = _idaapi.AS_LALIGN
AS_NOCODECLN = _idaapi.AS_NOCODECLN
AS_NOTAB = _idaapi.AS_NOTAB
AS_NOSPACE = _idaapi.AS_NOSPACE
AS_ALIGN2 = _idaapi.AS_ALIGN2
AS_ASCIIC = _idaapi.AS_ASCIIC
AS_ASCIIZ = _idaapi.AS_ASCIIZ
AS2_BRACE = _idaapi.AS2_BRACE
AS2_STRINV = _idaapi.AS2_STRINV
AS2_BYTE1CHAR = _idaapi.AS2_BYTE1CHAR
AS2_IDEALDSCR = _idaapi.AS2_IDEALDSCR
AS2_TERSESTR = _idaapi.AS2_TERSESTR
AS2_COLONSUF = _idaapi.AS2_COLONSUF

class processor_t(object):
    """Proxy of C++ processor_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    version = _swig_property(_idaapi.processor_t_version_get, _idaapi.processor_t_version_set)
    id = _swig_property(_idaapi.processor_t_id_get, _idaapi.processor_t_id_set)
    flag = _swig_property(_idaapi.processor_t_flag_get, _idaapi.processor_t_flag_set)
    def has_segregs(self, *args):
        """has_segregs(self) -> bool"""
        return _idaapi.processor_t_has_segregs(self, *args)

    def use32(self, *args):
        """use32(self) -> bool"""
        return _idaapi.processor_t_use32(self, *args)

    def use64(self, *args):
        """use64(self) -> bool"""
        return _idaapi.processor_t_use64(self, *args)

    def ti(self, *args):
        """ti(self) -> bool"""
        return _idaapi.processor_t_ti(self, *args)

    def stkup(self, *args):
        """stkup(self) -> bool"""
        return _idaapi.processor_t_stkup(self, *args)

    def use_tbyte(self, *args):
        """use_tbyte(self) -> bool"""
        return _idaapi.processor_t_use_tbyte(self, *args)

    def get_segm_bitness(self, *args):
        """get_segm_bitness(self) -> int"""
        return _idaapi.processor_t_get_segm_bitness(self, *args)

    cnbits = _swig_property(_idaapi.processor_t_cnbits_get, _idaapi.processor_t_cnbits_set)
    dnbits = _swig_property(_idaapi.processor_t_dnbits_get, _idaapi.processor_t_dnbits_set)
    def cbsize(self, *args):
        """cbsize(self) -> int"""
        return _idaapi.processor_t_cbsize(self, *args)

    def dbsize(self, *args):
        """dbsize(self) -> int"""
        return _idaapi.processor_t_dbsize(self, *args)

    psnames = _swig_property(_idaapi.processor_t_psnames_get, _idaapi.processor_t_psnames_set)
    plnames = _swig_property(_idaapi.processor_t_plnames_get, _idaapi.processor_t_plnames_set)
    assemblers = _swig_property(_idaapi.processor_t_assemblers_get, _idaapi.processor_t_assemblers_set)
    cf_base = _idaapi.processor_t_cf_base
    cf_size = _idaapi.processor_t_cf_size
    cf_desc = _idaapi.processor_t_cf_desc
    cf_apply = _idaapi.processor_t_cf_apply
    cf_move = _idaapi.processor_t_cf_move
    def get_stkvar_scale(self, *args):
        """get_stkvar_scale(self) -> int"""
        return _idaapi.processor_t_get_stkvar_scale(self, *args)

    regsNum = _swig_property(_idaapi.processor_t_regsNum_get, _idaapi.processor_t_regsNum_set)
    regNames = _swig_property(_idaapi.processor_t_regNames_get, _idaapi.processor_t_regNames_set)
    rFiles = _swig_property(_idaapi.processor_t_rFiles_get, _idaapi.processor_t_rFiles_set)
    rFnames = _swig_property(_idaapi.processor_t_rFnames_get, _idaapi.processor_t_rFnames_set)
    rFdescs = _swig_property(_idaapi.processor_t_rFdescs_get, _idaapi.processor_t_rFdescs_set)
    CPUregs = _swig_property(_idaapi.processor_t_CPUregs_get, _idaapi.processor_t_CPUregs_set)
    regFirstSreg = _swig_property(_idaapi.processor_t_regFirstSreg_get, _idaapi.processor_t_regFirstSreg_set)
    regLastSreg = _swig_property(_idaapi.processor_t_regLastSreg_get, _idaapi.processor_t_regLastSreg_set)
    segreg_size = _swig_property(_idaapi.processor_t_segreg_size_get, _idaapi.processor_t_segreg_size_set)
    regCodeSreg = _swig_property(_idaapi.processor_t_regCodeSreg_get, _idaapi.processor_t_regCodeSreg_set)
    regDataSreg = _swig_property(_idaapi.processor_t_regDataSreg_get, _idaapi.processor_t_regDataSreg_set)
    codestart = _swig_property(_idaapi.processor_t_codestart_get, _idaapi.processor_t_codestart_set)
    retcodes = _swig_property(_idaapi.processor_t_retcodes_get, _idaapi.processor_t_retcodes_set)
    instruc_start = _swig_property(_idaapi.processor_t_instruc_start_get, _idaapi.processor_t_instruc_start_set)
    instruc_end = _swig_property(_idaapi.processor_t_instruc_end_get, _idaapi.processor_t_instruc_end_set)
    def is_canon_insn(self, *args):
        """is_canon_insn(self, uint16 itype) -> bool"""
        return _idaapi.processor_t_is_canon_insn(self, *args)

    instruc = _swig_property(_idaapi.processor_t_instruc_get, _idaapi.processor_t_instruc_set)
    tbyte_size = _swig_property(_idaapi.processor_t_tbyte_size_get, _idaapi.processor_t_tbyte_size_set)
    real_width = _swig_property(_idaapi.processor_t_real_width_get, _idaapi.processor_t_real_width_set)
    icode_return = _swig_property(_idaapi.processor_t_icode_return_get, _idaapi.processor_t_icode_return_set)
    mvm = _swig_property(_idaapi.processor_t_mvm_get, _idaapi.processor_t_mvm_set)
    high_fixup_bits = _swig_property(_idaapi.processor_t_high_fixup_bits_get, _idaapi.processor_t_high_fixup_bits_set)
    def __init__(self, *args): 
        """__init__(self) -> processor_t"""
        this = _idaapi.new_processor_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_processor_t
    __del__ = lambda self : None;
processor_t_swigregister = _idaapi.processor_t_swigregister
processor_t_swigregister(processor_t)
PLFM_386 = _idaapi.PLFM_386
PLFM_Z80 = _idaapi.PLFM_Z80
PLFM_I860 = _idaapi.PLFM_I860
PLFM_8051 = _idaapi.PLFM_8051
PLFM_TMS = _idaapi.PLFM_TMS
PLFM_6502 = _idaapi.PLFM_6502
PLFM_PDP = _idaapi.PLFM_PDP
PLFM_68K = _idaapi.PLFM_68K
PLFM_JAVA = _idaapi.PLFM_JAVA
PLFM_6800 = _idaapi.PLFM_6800
PLFM_ST7 = _idaapi.PLFM_ST7
PLFM_MC6812 = _idaapi.PLFM_MC6812
PLFM_MIPS = _idaapi.PLFM_MIPS
PLFM_ARM = _idaapi.PLFM_ARM
PLFM_TMSC6 = _idaapi.PLFM_TMSC6
PLFM_PPC = _idaapi.PLFM_PPC
PLFM_80196 = _idaapi.PLFM_80196
PLFM_Z8 = _idaapi.PLFM_Z8
PLFM_SH = _idaapi.PLFM_SH
PLFM_NET = _idaapi.PLFM_NET
PLFM_AVR = _idaapi.PLFM_AVR
PLFM_H8 = _idaapi.PLFM_H8
PLFM_PIC = _idaapi.PLFM_PIC
PLFM_SPARC = _idaapi.PLFM_SPARC
PLFM_ALPHA = _idaapi.PLFM_ALPHA
PLFM_HPPA = _idaapi.PLFM_HPPA
PLFM_H8500 = _idaapi.PLFM_H8500
PLFM_TRICORE = _idaapi.PLFM_TRICORE
PLFM_DSP56K = _idaapi.PLFM_DSP56K
PLFM_C166 = _idaapi.PLFM_C166
PLFM_ST20 = _idaapi.PLFM_ST20
PLFM_IA64 = _idaapi.PLFM_IA64
PLFM_I960 = _idaapi.PLFM_I960
PLFM_F2MC = _idaapi.PLFM_F2MC
PLFM_TMS320C54 = _idaapi.PLFM_TMS320C54
PLFM_TMS320C55 = _idaapi.PLFM_TMS320C55
PLFM_TRIMEDIA = _idaapi.PLFM_TRIMEDIA
PLFM_M32R = _idaapi.PLFM_M32R
PLFM_NEC_78K0 = _idaapi.PLFM_NEC_78K0
PLFM_NEC_78K0S = _idaapi.PLFM_NEC_78K0S
PLFM_M740 = _idaapi.PLFM_M740
PLFM_M7700 = _idaapi.PLFM_M7700
PLFM_ST9 = _idaapi.PLFM_ST9
PLFM_FR = _idaapi.PLFM_FR
PLFM_MC6816 = _idaapi.PLFM_MC6816
PLFM_M7900 = _idaapi.PLFM_M7900
PLFM_TMS320C3 = _idaapi.PLFM_TMS320C3
PLFM_KR1878 = _idaapi.PLFM_KR1878
PLFM_AD218X = _idaapi.PLFM_AD218X
PLFM_OAKDSP = _idaapi.PLFM_OAKDSP
PLFM_TLCS900 = _idaapi.PLFM_TLCS900
PLFM_C39 = _idaapi.PLFM_C39
PLFM_CR16 = _idaapi.PLFM_CR16
PLFM_MN102L00 = _idaapi.PLFM_MN102L00
PLFM_TMS320C1X = _idaapi.PLFM_TMS320C1X
PLFM_NEC_V850X = _idaapi.PLFM_NEC_V850X
PR_SEGS = _idaapi.PR_SEGS
PR_USE32 = _idaapi.PR_USE32
PR_DEFSEG32 = _idaapi.PR_DEFSEG32
PR_RNAMESOK = _idaapi.PR_RNAMESOK
PR_ADJSEGS = _idaapi.PR_ADJSEGS
PR_DEFNUM = _idaapi.PR_DEFNUM
PRN_HEX = _idaapi.PRN_HEX
PRN_OCT = _idaapi.PRN_OCT
PRN_DEC = _idaapi.PRN_DEC
PRN_BIN = _idaapi.PRN_BIN
PR_WORD_INS = _idaapi.PR_WORD_INS
PR_NOCHANGE = _idaapi.PR_NOCHANGE
PR_ASSEMBLE = _idaapi.PR_ASSEMBLE
PR_ALIGN = _idaapi.PR_ALIGN
PR_TYPEINFO = _idaapi.PR_TYPEINFO
PR_USE64 = _idaapi.PR_USE64
PR_SGROTHER = _idaapi.PR_SGROTHER
PR_STACK_UP = _idaapi.PR_STACK_UP
PR_BINMEM = _idaapi.PR_BINMEM
PR_SEGTRANS = _idaapi.PR_SEGTRANS
PR_CHK_XREF = _idaapi.PR_CHK_XREF
PR_NO_SEGMOVE = _idaapi.PR_NO_SEGMOVE
PR_FULL_HIFXP = _idaapi.PR_FULL_HIFXP
PR_USE_ARG_TYPES = _idaapi.PR_USE_ARG_TYPES
PR_SCALE_STKVARS = _idaapi.PR_SCALE_STKVARS
PR_DELAYED = _idaapi.PR_DELAYED
PR_ALIGN_INSN = _idaapi.PR_ALIGN_INSN
PR_PURGING = _idaapi.PR_PURGING
PR_CNDINSNS = _idaapi.PR_CNDINSNS
PR_USE_TBYTE = _idaapi.PR_USE_TBYTE
PR_DEFSEG64 = _idaapi.PR_DEFSEG64
CUSTOM_CMD_ITYPE = _idaapi.CUSTOM_CMD_ITYPE
REG_SPOIL = _idaapi.REG_SPOIL
REAL_ERROR_FORMAT = _idaapi.REAL_ERROR_FORMAT
REAL_ERROR_RANGE = _idaapi.REAL_ERROR_RANGE
REAL_ERROR_BADDATA = _idaapi.REAL_ERROR_BADDATA
OP_FP_BASED = _idaapi.OP_FP_BASED
OP_SP_BASED = _idaapi.OP_SP_BASED
OP_SP_ADD = _idaapi.OP_SP_ADD
OP_SP_SUB = _idaapi.OP_SP_SUB


def str2regf(*args):
  """str2regf(char p) -> int"""
  return _idaapi.str2regf(*args)

def str2reg(*args):
  """str2reg(char p) -> int"""
  return _idaapi.str2reg(*args)

def get_reg_name(*args):
  """get_reg_name(int reg, size_t width, int reghi = -1) -> ssize_t"""
  return _idaapi.get_reg_name(*args)

def get_reg_info(*args):
  """get_reg_info(char regname, uint64 mask) -> char"""
  return _idaapi.get_reg_info(*args)
class reg_info_t(object):
    """Proxy of C++ reg_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    reg = _swig_property(_idaapi.reg_info_t_reg_get, _idaapi.reg_info_t_reg_set)
    size = _swig_property(_idaapi.reg_info_t_size_get, _idaapi.reg_info_t_size_set)
    def __eq__(self, *args):
        """__eq__(self, reg_info_t r) -> bool"""
        return _idaapi.reg_info_t___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, reg_info_t r) -> bool"""
        return _idaapi.reg_info_t___ne__(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> reg_info_t"""
        this = _idaapi.new_reg_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_reg_info_t
    __del__ = lambda self : None;
reg_info_t_swigregister = _idaapi.reg_info_t_swigregister
reg_info_t_swigregister(reg_info_t)


def parse_reg_name(*args):
  """parse_reg_name(char regname, reg_info_t ri) -> bool"""
  return _idaapi.parse_reg_name(*args)

def sizeof_ldbl(*args):
  """sizeof_ldbl() -> int"""
  return _idaapi.sizeof_ldbl(*args)

def intel_data(*args):
  """intel_data(ea_t ea)"""
  return _idaapi.intel_data(*args)

def gen_spcdef(*args):
  """gen_spcdef(ea_t ea, uchar segtype) -> bool"""
  return _idaapi.gen_spcdef(*args)

def gen_extern(*args):
  """gen_extern(ea_t ea, char name) -> bool"""
  return _idaapi.gen_extern(*args)

def gen_abssym(*args):
  """gen_abssym(ea_t ea, char name) -> bool"""
  return _idaapi.gen_abssym(*args)

def gen_comvar(*args):
  """gen_comvar(ea_t ea, char name) -> bool"""
  return _idaapi.gen_comvar(*args)
SETPROC_COMPAT = _idaapi.SETPROC_COMPAT
SETPROC_ALL = _idaapi.SETPROC_ALL
SETPROC_USER = _idaapi.SETPROC_USER
SETPROC_FATAL = _idaapi.SETPROC_FATAL

def set_processor_type(*args):
  """set_processor_type(char procname, int level) -> char"""
  return _idaapi.set_processor_type(*args)

def get_idp_name(*args):
  """get_idp_name() -> char"""
  return _idaapi.get_idp_name(*args)

def set_target_assembler(*args):
  """set_target_assembler(int asmnum)"""
  return _idaapi.set_target_assembler(*args)

def nbits(*args):
  """nbits(ea_t ea) -> int"""
  return _idaapi.nbits(*args)

def bytesize(*args):
  """bytesize(ea_t ea) -> int"""
  return _idaapi.bytesize(*args)
byte_patched = _idaapi.byte_patched
cmt_changed = _idaapi.cmt_changed
ti_changed = _idaapi.ti_changed
op_ti_changed = _idaapi.op_ti_changed
op_type_changed = _idaapi.op_type_changed
enum_created = _idaapi.enum_created
enum_deleted = _idaapi.enum_deleted
enum_bf_changed = _idaapi.enum_bf_changed
enum_renamed = _idaapi.enum_renamed
enum_cmt_changed = _idaapi.enum_cmt_changed
enum_const_created = _idaapi.enum_const_created
enum_const_deleted = _idaapi.enum_const_deleted
struc_created = _idaapi.struc_created
struc_deleted = _idaapi.struc_deleted
struc_renamed = _idaapi.struc_renamed
struc_expanded = _idaapi.struc_expanded
struc_cmt_changed = _idaapi.struc_cmt_changed
struc_member_created = _idaapi.struc_member_created
struc_member_deleted = _idaapi.struc_member_deleted
struc_member_renamed = _idaapi.struc_member_renamed
struc_member_changed = _idaapi.struc_member_changed
thunk_func_created = _idaapi.thunk_func_created
func_tail_appended = _idaapi.func_tail_appended
func_tail_removed = _idaapi.func_tail_removed
tail_owner_changed = _idaapi.tail_owner_changed
func_noret_changed = _idaapi.func_noret_changed
segm_added = _idaapi.segm_added
segm_deleted = _idaapi.segm_deleted
segm_start_changed = _idaapi.segm_start_changed
segm_end_changed = _idaapi.segm_end_changed
segm_moved = _idaapi.segm_moved
area_cmt_changed = _idaapi.area_cmt_changed
changing_cmt = _idaapi.changing_cmt
changing_ti = _idaapi.changing_ti
changing_op_ti = _idaapi.changing_op_ti
changing_op_type = _idaapi.changing_op_type
deleting_enum = _idaapi.deleting_enum
changing_enum_bf = _idaapi.changing_enum_bf
renaming_enum = _idaapi.renaming_enum
changing_enum_cmt = _idaapi.changing_enum_cmt
deleting_enum_const = _idaapi.deleting_enum_const
deleting_struc = _idaapi.deleting_struc
renaming_struc = _idaapi.renaming_struc
expanding_struc = _idaapi.expanding_struc
changing_struc_cmt = _idaapi.changing_struc_cmt
deleting_struc_member = _idaapi.deleting_struc_member
renaming_struc_member = _idaapi.renaming_struc_member
changing_struc_member = _idaapi.changing_struc_member
removing_func_tail = _idaapi.removing_func_tail
deleting_segm = _idaapi.deleting_segm
changing_segm_start = _idaapi.changing_segm_start
changing_segm_end = _idaapi.changing_segm_end
changing_area_cmt = _idaapi.changing_area_cmt

def IDB_Callback(*args):
  """IDB_Callback(void ud, int notification_code, va_list va) -> int"""
  return _idaapi.IDB_Callback(*args)
class IDB_Hooks(object):
    """Proxy of C++ IDB_Hooks class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _idaapi.delete_IDB_Hooks
    __del__ = lambda self : None;
    def hook(self, *args):
        """hook(self) -> bool"""
        return _idaapi.IDB_Hooks_hook(self, *args)

    def unhook(self, *args):
        """unhook(self) -> bool"""
        return _idaapi.IDB_Hooks_unhook(self, *args)

    def byte_patched(self, *args):
        """byte_patched(self, ea_t ea) -> int"""
        return _idaapi.IDB_Hooks_byte_patched(self, *args)

    def cmt_changed(self, *args):
        """cmt_changed(self, ea_t arg0, bool repeatable_cmt) -> int"""
        return _idaapi.IDB_Hooks_cmt_changed(self, *args)

    def ti_changed(self, *args):
        """ti_changed(self, ea_t ea, type_t type, p_list fnames) -> int"""
        return _idaapi.IDB_Hooks_ti_changed(self, *args)

    def op_ti_changed(self, *args):
        """op_ti_changed(self, ea_t ea, int n, type_t type, p_list fnames) -> int"""
        return _idaapi.IDB_Hooks_op_ti_changed(self, *args)

    def op_type_changed(self, *args):
        """op_type_changed(self, ea_t ea, int n) -> int"""
        return _idaapi.IDB_Hooks_op_type_changed(self, *args)

    def enum_created(self, *args):
        """enum_created(self, enum_t id) -> int"""
        return _idaapi.IDB_Hooks_enum_created(self, *args)

    def enum_deleted(self, *args):
        """enum_deleted(self, enum_t id) -> int"""
        return _idaapi.IDB_Hooks_enum_deleted(self, *args)

    def enum_bf_changed(self, *args):
        """enum_bf_changed(self, enum_t id) -> int"""
        return _idaapi.IDB_Hooks_enum_bf_changed(self, *args)

    def enum_renamed(self, *args):
        """enum_renamed(self, enum_t id) -> int"""
        return _idaapi.IDB_Hooks_enum_renamed(self, *args)

    def enum_cmt_changed(self, *args):
        """enum_cmt_changed(self, enum_t id) -> int"""
        return _idaapi.IDB_Hooks_enum_cmt_changed(self, *args)

    def enum_const_created(self, *args):
        """enum_const_created(self, enum_t id, const_t cid) -> int"""
        return _idaapi.IDB_Hooks_enum_const_created(self, *args)

    def enum_const_deleted(self, *args):
        """enum_const_deleted(self, enum_t id, const_t cid) -> int"""
        return _idaapi.IDB_Hooks_enum_const_deleted(self, *args)

    def struc_created(self, *args):
        """struc_created(self, tid_t struc_id) -> int"""
        return _idaapi.IDB_Hooks_struc_created(self, *args)

    def struc_deleted(self, *args):
        """struc_deleted(self, tid_t struc_id) -> int"""
        return _idaapi.IDB_Hooks_struc_deleted(self, *args)

    def struc_renamed(self, *args):
        """struc_renamed(self, struc_t sptr) -> int"""
        return _idaapi.IDB_Hooks_struc_renamed(self, *args)

    def struc_expanded(self, *args):
        """struc_expanded(self, struc_t sptr) -> int"""
        return _idaapi.IDB_Hooks_struc_expanded(self, *args)

    def struc_cmt_changed(self, *args):
        """struc_cmt_changed(self, tid_t struc_id) -> int"""
        return _idaapi.IDB_Hooks_struc_cmt_changed(self, *args)

    def struc_member_created(self, *args):
        """struc_member_created(self, struc_t sptr, member_t mptr) -> int"""
        return _idaapi.IDB_Hooks_struc_member_created(self, *args)

    def struc_member_deleted(self, *args):
        """struc_member_deleted(self, struc_t sptr, tid_t member_id) -> int"""
        return _idaapi.IDB_Hooks_struc_member_deleted(self, *args)

    def struc_member_renamed(self, *args):
        """struc_member_renamed(self, struc_t sptr, member_t mptr) -> int"""
        return _idaapi.IDB_Hooks_struc_member_renamed(self, *args)

    def struc_member_changed(self, *args):
        """struc_member_changed(self, struc_t sptr, member_t mptr) -> int"""
        return _idaapi.IDB_Hooks_struc_member_changed(self, *args)

    def thunk_func_created(self, *args):
        """thunk_func_created(self, func_t pfn) -> int"""
        return _idaapi.IDB_Hooks_thunk_func_created(self, *args)

    def func_tail_appended(self, *args):
        """func_tail_appended(self, func_t pfn, func_t tail) -> int"""
        return _idaapi.IDB_Hooks_func_tail_appended(self, *args)

    def func_tail_removed(self, *args):
        """func_tail_removed(self, func_t pfn, ea_t tail_ea) -> int"""
        return _idaapi.IDB_Hooks_func_tail_removed(self, *args)

    def tail_owner_changed(self, *args):
        """tail_owner_changed(self, func_t tail, ea_t owner_func) -> int"""
        return _idaapi.IDB_Hooks_tail_owner_changed(self, *args)

    def func_noret_changed(self, *args):
        """func_noret_changed(self, func_t pfn) -> int"""
        return _idaapi.IDB_Hooks_func_noret_changed(self, *args)

    def segm_added(self, *args):
        """segm_added(self, segment_t s) -> int"""
        return _idaapi.IDB_Hooks_segm_added(self, *args)

    def segm_deleted(self, *args):
        """segm_deleted(self, ea_t startEA) -> int"""
        return _idaapi.IDB_Hooks_segm_deleted(self, *args)

    def segm_start_changed(self, *args):
        """segm_start_changed(self, segment_t s) -> int"""
        return _idaapi.IDB_Hooks_segm_start_changed(self, *args)

    def segm_end_changed(self, *args):
        """segm_end_changed(self, segment_t s) -> int"""
        return _idaapi.IDB_Hooks_segm_end_changed(self, *args)

    def segm_moved(self, *args):
        """segm_moved(self, ea_t frm, ea_t to, asize_t size) -> int"""
        return _idaapi.IDB_Hooks_segm_moved(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> IDB_Hooks"""
        if self.__class__ == IDB_Hooks:
            _self = None
        else:
            _self = self
        this = _idaapi.new_IDB_Hooks(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _idaapi.disown_IDB_Hooks(self)
        return weakref_proxy(self)
IDB_Hooks_swigregister = _idaapi.IDB_Hooks_swigregister
IDB_Hooks_swigregister(IDB_Hooks)


def assemble(*args):
  """assemble(ea_t ea, ea_t cs, ea_t ip, bool use32, char line) -> int"""
  return _idaapi.assemble(*args)
class netnode(object):
    """Proxy of C++ netnode class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> netnode
        __init__(self, nodeidx_t num) -> netnode
        __init__(self, char name, size_t namlen = 0, bool do_create = False) -> netnode
        """
        this = _idaapi.new_netnode(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(self, *args):
        """
        create(self, char name, size_t namlen = 0) -> bool
        create(self) -> bool
        """
        return _idaapi.netnode_create(self, *args)

    def kill(self, *args):
        """kill(self)"""
        return _idaapi.netnode_kill(self, *args)

    def name(self, *args):
        """name(self) -> ssize_t"""
        return _idaapi.netnode_name(self, *args)

    def rename(self, *args):
        """rename(self, char newname, size_t namlen = 0) -> bool"""
        return _idaapi.netnode_rename(self, *args)

    def valobj(self, *args):
        """valobj(self) -> ssize_t"""
        return _idaapi.netnode_valobj(self, *args)

    def valstr(self, *args):
        """valstr(self) -> ssize_t"""
        return _idaapi.netnode_valstr(self, *args)

    def set(self, *args):
        """set(self, void value) -> bool"""
        return _idaapi.netnode_set(self, *args)

    def delvalue(self, *args):
        """delvalue(self) -> bool"""
        return _idaapi.netnode_delvalue(self, *args)

    def set_long(self, *args):
        """set_long(self, nodeidx_t x) -> bool"""
        return _idaapi.netnode_set_long(self, *args)

    def value_exists(self, *args):
        """value_exists(self) -> bool"""
        return _idaapi.netnode_value_exists(self, *args)

    def long_value(self, *args):
        """long_value(self) -> nodeidx_t"""
        return _idaapi.netnode_long_value(self, *args)

    def altval(self, *args):
        """altval(self, nodeidx_t alt, char tag = atag) -> nodeidx_t"""
        return _idaapi.netnode_altval(self, *args)

    def altset(self, *args):
        """altset(self, nodeidx_t alt, nodeidx_t value, char tag = atag) -> bool"""
        return _idaapi.netnode_altset(self, *args)

    def alt1st(self, *args):
        """alt1st(self, char tag = atag) -> nodeidx_t"""
        return _idaapi.netnode_alt1st(self, *args)

    def altnxt(self, *args):
        """altnxt(self, nodeidx_t cur, char tag = atag) -> nodeidx_t"""
        return _idaapi.netnode_altnxt(self, *args)

    def altlast(self, *args):
        """altlast(self, char tag = atag) -> nodeidx_t"""
        return _idaapi.netnode_altlast(self, *args)

    def altprev(self, *args):
        """altprev(self, nodeidx_t cur, char tag = atag) -> nodeidx_t"""
        return _idaapi.netnode_altprev(self, *args)

    def altshift(self, *args):
        """altshift(self, nodeidx_t frm, nodeidx_t to, nodeidx_t size, char tag = atag) -> size_t"""
        return _idaapi.netnode_altshift(self, *args)

    def charval(self, *args):
        """charval(self, nodeidx_t alt, char tag) -> uchar"""
        return _idaapi.netnode_charval(self, *args)

    def charset(self, *args):
        """charset(self, nodeidx_t alt, uchar val, char tag) -> bool"""
        return _idaapi.netnode_charset(self, *args)

    def chardel(self, *args):
        """chardel(self, nodeidx_t alt, char tag) -> bool"""
        return _idaapi.netnode_chardel(self, *args)

    def char1st(self, *args):
        """char1st(self, char tag) -> nodeidx_t"""
        return _idaapi.netnode_char1st(self, *args)

    def charnxt(self, *args):
        """charnxt(self, nodeidx_t cur, char tag) -> nodeidx_t"""
        return _idaapi.netnode_charnxt(self, *args)

    def charlast(self, *args):
        """charlast(self, char tag) -> nodeidx_t"""
        return _idaapi.netnode_charlast(self, *args)

    def charprev(self, *args):
        """charprev(self, nodeidx_t cur, char tag) -> nodeidx_t"""
        return _idaapi.netnode_charprev(self, *args)

    def charshift(self, *args):
        """charshift(self, nodeidx_t frm, nodeidx_t to, nodeidx_t size, char tag) -> size_t"""
        return _idaapi.netnode_charshift(self, *args)

    def altval_idx8(self, *args):
        """altval_idx8(self, uchar alt, char tag) -> nodeidx_t"""
        return _idaapi.netnode_altval_idx8(self, *args)

    def altset_idx8(self, *args):
        """altset_idx8(self, uchar alt, nodeidx_t val, char tag) -> bool"""
        return _idaapi.netnode_altset_idx8(self, *args)

    def altdel_idx8(self, *args):
        """altdel_idx8(self, uchar alt, char tag) -> bool"""
        return _idaapi.netnode_altdel_idx8(self, *args)

    def alt1st_idx8(self, *args):
        """alt1st_idx8(self, char tag) -> nodeidx_t"""
        return _idaapi.netnode_alt1st_idx8(self, *args)

    def altnxt_idx8(self, *args):
        """altnxt_idx8(self, uchar cur, char tag) -> nodeidx_t"""
        return _idaapi.netnode_altnxt_idx8(self, *args)

    def altlast_idx8(self, *args):
        """altlast_idx8(self, char tag) -> nodeidx_t"""
        return _idaapi.netnode_altlast_idx8(self, *args)

    def altprev_idx8(self, *args):
        """altprev_idx8(self, uchar cur, char tag) -> nodeidx_t"""
        return _idaapi.netnode_altprev_idx8(self, *args)

    def charval_idx8(self, *args):
        """charval_idx8(self, uchar alt, char tag) -> uchar"""
        return _idaapi.netnode_charval_idx8(self, *args)

    def charset_idx8(self, *args):
        """charset_idx8(self, uchar alt, uchar val, char tag) -> bool"""
        return _idaapi.netnode_charset_idx8(self, *args)

    def chardel_idx8(self, *args):
        """chardel_idx8(self, uchar alt, char tag) -> bool"""
        return _idaapi.netnode_chardel_idx8(self, *args)

    def char1st_idx8(self, *args):
        """char1st_idx8(self, char tag) -> nodeidx_t"""
        return _idaapi.netnode_char1st_idx8(self, *args)

    def charnxt_idx8(self, *args):
        """charnxt_idx8(self, uchar cur, char tag) -> nodeidx_t"""
        return _idaapi.netnode_charnxt_idx8(self, *args)

    def charlast_idx8(self, *args):
        """charlast_idx8(self, char tag) -> nodeidx_t"""
        return _idaapi.netnode_charlast_idx8(self, *args)

    def charprev_idx8(self, *args):
        """charprev_idx8(self, uchar cur, char tag) -> nodeidx_t"""
        return _idaapi.netnode_charprev_idx8(self, *args)

    def altdel(self, *args):
        """
        altdel(self, nodeidx_t alt, char tag = atag) -> bool
        altdel(self) -> bool
        """
        return _idaapi.netnode_altdel(self, *args)

    def altdel_all(self, *args):
        """altdel_all(self, char tag) -> bool"""
        return _idaapi.netnode_altdel_all(self, *args)

    def supval(self, *args):
        """supval(self, nodeidx_t alt, char tag = stag) -> ssize_t"""
        return _idaapi.netnode_supval(self, *args)

    def supstr(self, *args):
        """supstr(self, nodeidx_t alt, char tag = stag) -> ssize_t"""
        return _idaapi.netnode_supstr(self, *args)

    def supset(self, *args):
        """supset(self, nodeidx_t alt, void value, char tag = stag) -> bool"""
        return _idaapi.netnode_supset(self, *args)

    def sup1st(self, *args):
        """sup1st(self, char tag = stag) -> nodeidx_t"""
        return _idaapi.netnode_sup1st(self, *args)

    def supnxt(self, *args):
        """supnxt(self, nodeidx_t cur, char tag = stag) -> nodeidx_t"""
        return _idaapi.netnode_supnxt(self, *args)

    def suplast(self, *args):
        """suplast(self, char tag = stag) -> nodeidx_t"""
        return _idaapi.netnode_suplast(self, *args)

    def supprev(self, *args):
        """supprev(self, nodeidx_t cur, char tag = stag) -> nodeidx_t"""
        return _idaapi.netnode_supprev(self, *args)

    def supshift(self, *args):
        """supshift(self, nodeidx_t frm, nodeidx_t to, nodeidx_t size, char tag = stag) -> size_t"""
        return _idaapi.netnode_supshift(self, *args)

    def supval_idx8(self, *args):
        """supval_idx8(self, uchar alt, char tag) -> ssize_t"""
        return _idaapi.netnode_supval_idx8(self, *args)

    def supstr_idx8(self, *args):
        """supstr_idx8(self, uchar alt, char tag) -> ssize_t"""
        return _idaapi.netnode_supstr_idx8(self, *args)

    def supset_idx8(self, *args):
        """supset_idx8(self, uchar alt, void value, char tag) -> bool"""
        return _idaapi.netnode_supset_idx8(self, *args)

    def supdel_idx8(self, *args):
        """supdel_idx8(self, uchar alt, char tag) -> bool"""
        return _idaapi.netnode_supdel_idx8(self, *args)

    def sup1st_idx8(self, *args):
        """sup1st_idx8(self, char tag) -> nodeidx_t"""
        return _idaapi.netnode_sup1st_idx8(self, *args)

    def supnxt_idx8(self, *args):
        """supnxt_idx8(self, uchar alt, char tag) -> nodeidx_t"""
        return _idaapi.netnode_supnxt_idx8(self, *args)

    def suplast_idx8(self, *args):
        """suplast_idx8(self, char tag) -> nodeidx_t"""
        return _idaapi.netnode_suplast_idx8(self, *args)

    def supprev_idx8(self, *args):
        """supprev_idx8(self, uchar alt, char tag) -> nodeidx_t"""
        return _idaapi.netnode_supprev_idx8(self, *args)

    def supdel(self, *args):
        """
        supdel(self, nodeidx_t alt, char tag = stag) -> bool
        supdel(self) -> bool
        """
        return _idaapi.netnode_supdel(self, *args)

    def supdel_all(self, *args):
        """supdel_all(self, char tag) -> bool"""
        return _idaapi.netnode_supdel_all(self, *args)

    def hashval(self, *args):
        """hashval(self, char idx, char tag = htag) -> ssize_t"""
        return _idaapi.netnode_hashval(self, *args)

    def hashstr(self, *args):
        """hashstr(self, char idx, char tag = htag) -> ssize_t"""
        return _idaapi.netnode_hashstr(self, *args)

    def hashval_long(self, *args):
        """hashval_long(self, char idx, char tag = htag) -> nodeidx_t"""
        return _idaapi.netnode_hashval_long(self, *args)

    def hashset(self, *args):
        """hashset(self, char idx, void value, char tag = htag) -> bool"""
        return _idaapi.netnode_hashset(self, *args)

    def hashset_idx(self, *args):
        """hashset_idx(self, char idx, nodeidx_t value, char tag = htag) -> bool"""
        return _idaapi.netnode_hashset_idx(self, *args)

    def hashdel(self, *args):
        """hashdel(self, char idx, char tag = htag) -> bool"""
        return _idaapi.netnode_hashdel(self, *args)

    def hash1st(self, *args):
        """hash1st(self, char tag = htag) -> ssize_t"""
        return _idaapi.netnode_hash1st(self, *args)

    def hashnxt(self, *args):
        """hashnxt(self, char idx, char tag = htag) -> ssize_t"""
        return _idaapi.netnode_hashnxt(self, *args)

    def hashlast(self, *args):
        """hashlast(self, char tag = htag) -> ssize_t"""
        return _idaapi.netnode_hashlast(self, *args)

    def hashprev(self, *args):
        """hashprev(self, char idx, char tag = htag) -> ssize_t"""
        return _idaapi.netnode_hashprev(self, *args)

    def hashdel_all(self, *args):
        """hashdel_all(self, char tag = htag) -> bool"""
        return _idaapi.netnode_hashdel_all(self, *args)

    def blobsize(self, *args):
        """blobsize(self, nodeidx_t start, char tag) -> size_t"""
        return _idaapi.netnode_blobsize(self, *args)

    def getblob(self, *args):
        """getblob(self, nodeidx_t start, char tag) -> void"""
        return _idaapi.netnode_getblob(self, *args)

    def setblob(self, *args):
        """setblob(self, void buf, nodeidx_t start, char tag) -> bool"""
        return _idaapi.netnode_setblob(self, *args)

    def delblob(self, *args):
        """delblob(self, nodeidx_t start, char tag) -> int"""
        return _idaapi.netnode_delblob(self, *args)

    def start(self, *args):
        """start(self) -> bool"""
        return _idaapi.netnode_start(self, *args)

    def end(self, *args):
        """end(self) -> bool"""
        return _idaapi.netnode_end(self, *args)

    def next(self, *args):
        """next(self) -> bool"""
        return _idaapi.netnode_next(self, *args)

    def prev(self, *args):
        """prev(self) -> bool"""
        return _idaapi.netnode_prev(self, *args)

    def copyto(self, *args):
        """copyto(self, netnode target, nodeidx_t count = 1) -> size_t"""
        return _idaapi.netnode_copyto(self, *args)

    def moveto(self, *args):
        """moveto(self, netnode target, nodeidx_t count = 1) -> size_t"""
        return _idaapi.netnode_moveto(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, netnode n) -> bool
        __eq__(self, nodeidx_t x) -> bool
        """
        return _idaapi.netnode___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, netnode n) -> bool
        __ne__(self, nodeidx_t x) -> bool
        """
        return _idaapi.netnode___ne__(self, *args)

    __swig_destroy__ = _idaapi.delete_netnode
    __del__ = lambda self : None;
netnode_swigregister = _idaapi.netnode_swigregister
netnode_swigregister(netnode)
BTREE_PAGE_SIZE = cvar.BTREE_PAGE_SIZE
MAXNAMESIZE = cvar.MAXNAMESIZE
MAXSPECSIZE = cvar.MAXSPECSIZE
atag = cvar.atag
stag = cvar.stag
htag = cvar.htag
vtag = cvar.vtag
ntag = cvar.ntag
ltag = cvar.ltag
NNBASE_OK = _idaapi.NNBASE_OK
NNBASE_REPAIR = _idaapi.NNBASE_REPAIR
NNBASE_IOERR = _idaapi.NNBASE_IOERR
NNBASE_PAGE16 = _idaapi.NNBASE_PAGE16


def set_aflags0(*args):
  """set_aflags0(ea_t ea, uint32 flags)"""
  return _idaapi.set_aflags0(*args)

def get_aflags0(*args):
  """get_aflags0(ea_t ea) -> uint32"""
  return _idaapi.get_aflags0(*args)

def del_aflags0(*args):
  """del_aflags0(ea_t ea)"""
  return _idaapi.del_aflags0(*args)

def set_aflags(*args):
  """set_aflags(ea_t ea, uint32 flags)"""
  return _idaapi.set_aflags(*args)

def set_abits(*args):
  """set_abits(ea_t ea, uint32 bits)"""
  return _idaapi.set_abits(*args)

def clr_abits(*args):
  """clr_abits(ea_t ea, uint32 bits)"""
  return _idaapi.clr_abits(*args)

def get_aflags(*args):
  """get_aflags(ea_t ea) -> uint32"""
  return _idaapi.get_aflags(*args)

def del_aflags(*args):
  """del_aflags(ea_t ea)"""
  return _idaapi.del_aflags(*args)
AFL_LINNUM = _idaapi.AFL_LINNUM
AFL_USERSP = _idaapi.AFL_USERSP
AFL_PUBNAM = _idaapi.AFL_PUBNAM
AFL_WEAKNAM = _idaapi.AFL_WEAKNAM
AFL_HIDDEN = _idaapi.AFL_HIDDEN
AFL_MANUAL = _idaapi.AFL_MANUAL
AFL_NOBRD = _idaapi.AFL_NOBRD
AFL_ZSTROFF = _idaapi.AFL_ZSTROFF
AFL_BNOT0 = _idaapi.AFL_BNOT0
AFL_BNOT1 = _idaapi.AFL_BNOT1
AFL_LIB = _idaapi.AFL_LIB
AFL_TI = _idaapi.AFL_TI
AFL_TI0 = _idaapi.AFL_TI0
AFL_TI1 = _idaapi.AFL_TI1
AFL_LNAME = _idaapi.AFL_LNAME
AFL_TILCMT = _idaapi.AFL_TILCMT
AFL_LZERO0 = _idaapi.AFL_LZERO0
AFL_LZERO1 = _idaapi.AFL_LZERO1
AFL_COLORED = _idaapi.AFL_COLORED
AFL_TERSESTR = _idaapi.AFL_TERSESTR
AFL_SIGN0 = _idaapi.AFL_SIGN0
AFL_SIGN1 = _idaapi.AFL_SIGN1
AFL_NORET = _idaapi.AFL_NORET
AFL_FIXEDSPD = _idaapi.AFL_FIXEDSPD
AFL_ALIGNFLOW = _idaapi.AFL_ALIGNFLOW
AFL_USERTI = _idaapi.AFL_USERTI
AFL_RETFP = _idaapi.AFL_RETFP

def set_visible_item(*args):
  """set_visible_item(ea_t ea, bool visible)"""
  return _idaapi.set_visible_item(*args)

def is_visible_item(*args):
  """is_visible_item(ea_t ea) -> bool"""
  return _idaapi.is_visible_item(*args)

def is_finally_visible_item(*args):
  """is_finally_visible_item(ea_t ea) -> bool"""
  return _idaapi.is_finally_visible_item(*args)

def set_source_linnum(*args):
  """set_source_linnum(ea_t ea, uval_t lnnum)"""
  return _idaapi.set_source_linnum(*args)

def get_source_linnum(*args):
  """get_source_linnum(ea_t ea) -> uval_t"""
  return _idaapi.get_source_linnum(*args)

def del_source_linnum(*args):
  """del_source_linnum(ea_t ea)"""
  return _idaapi.del_source_linnum(*args)

def get_str_type_code(*args):
  """get_str_type_code(uval_t strtype) -> char"""
  return _idaapi.get_str_type_code(*args)
ASCSTR_TERMCHR = _idaapi.ASCSTR_TERMCHR

def get_str_term1(*args):
  """get_str_term1(int32 strtype) -> char"""
  return _idaapi.get_str_term1(*args)

def get_str_term2(*args):
  """get_str_term2(int32 strtype) -> char"""
  return _idaapi.get_str_term2(*args)
ASCSTR_PASCAL = _idaapi.ASCSTR_PASCAL
ASCSTR_LEN2 = _idaapi.ASCSTR_LEN2
ASCSTR_UNICODE = _idaapi.ASCSTR_UNICODE
ASCSTR_LEN4 = _idaapi.ASCSTR_LEN4
ASCSTR_ULEN2 = _idaapi.ASCSTR_ULEN2
ASCSTR_ULEN4 = _idaapi.ASCSTR_ULEN4
ASCSTR_LAST = _idaapi.ASCSTR_LAST

def is_unicode(*args):
  """is_unicode(int32 strtype) -> bool"""
  return _idaapi.is_unicode(*args)

def is_pascal(*args):
  """is_pascal(int32 strtype) -> bool"""
  return _idaapi.is_pascal(*args)

def set_item_color(*args):
  """set_item_color(ea_t ea, bgcolor_t color)"""
  return _idaapi.set_item_color(*args)

def get_item_color(*args):
  """get_item_color(ea_t ea) -> bgcolor_t"""
  return _idaapi.get_item_color(*args)

def del_item_color(*args):
  """del_item_color(ea_t ea)"""
  return _idaapi.del_item_color(*args)

def get_reftype_by_size(*args):
  """get_reftype_by_size(size_t size) -> reftype_t"""
  return _idaapi.get_reftype_by_size(*args)
class refinfo_t(object):
    """Proxy of C++ refinfo_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    target = _swig_property(_idaapi.refinfo_t_target_get, _idaapi.refinfo_t_target_set)
    base = _swig_property(_idaapi.refinfo_t_base_get, _idaapi.refinfo_t_base_set)
    tdelta = _swig_property(_idaapi.refinfo_t_tdelta_get, _idaapi.refinfo_t_tdelta_set)
    flags = _swig_property(_idaapi.refinfo_t_flags_get, _idaapi.refinfo_t_flags_set)
    def type(self, *args):
        """type(self) -> reftype_t"""
        return _idaapi.refinfo_t_type(self, *args)

    def no_base_xref(self, *args):
        """no_base_xref(self) -> bool"""
        return _idaapi.refinfo_t_no_base_xref(self, *args)

    def is_pastend(self, *args):
        """is_pastend(self) -> bool"""
        return _idaapi.refinfo_t_is_pastend(self, *args)

    def is_rvaoff(self, *args):
        """is_rvaoff(self) -> bool"""
        return _idaapi.refinfo_t_is_rvaoff(self, *args)

    def is_custom(self, *args):
        """is_custom(self) -> bool"""
        return _idaapi.refinfo_t_is_custom(self, *args)

    def set_type(self, *args):
        """set_type(self, reftype_t t)"""
        return _idaapi.refinfo_t_set_type(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> refinfo_t"""
        this = _idaapi.new_refinfo_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_refinfo_t
    __del__ = lambda self : None;
refinfo_t_swigregister = _idaapi.refinfo_t_swigregister
refinfo_t_swigregister(refinfo_t)
REF_OFF8 = cvar.REF_OFF8
REF_OFF16 = cvar.REF_OFF16
REF_OFF32 = cvar.REF_OFF32
REF_LOW8 = cvar.REF_LOW8
REF_LOW16 = cvar.REF_LOW16
REF_HIGH8 = cvar.REF_HIGH8
REF_HIGH16 = cvar.REF_HIGH16
REF_VHIGH = cvar.REF_VHIGH
REF_VLOW = cvar.REF_VLOW
REF_OFF64 = cvar.REF_OFF64
REF_LAST = cvar.REF_LAST
REFINFO_TYPE = _idaapi.REFINFO_TYPE
REFINFO_RVAOFF = _idaapi.REFINFO_RVAOFF
REFINFO_PASTEND = _idaapi.REFINFO_PASTEND
REFINFO_CUSTOM = _idaapi.REFINFO_CUSTOM
REFINFO_NOBASE = _idaapi.REFINFO_NOBASE

MAXSTRUCPATH = _idaapi.MAXSTRUCPATH
class strpath_t(object):
    """Proxy of C++ strpath_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    len = _swig_property(_idaapi.strpath_t_len_get, _idaapi.strpath_t_len_set)
    ids = _swig_property(_idaapi.strpath_t_ids_get, _idaapi.strpath_t_ids_set)
    delta = _swig_property(_idaapi.strpath_t_delta_get, _idaapi.strpath_t_delta_set)
    def __init__(self, *args): 
        """__init__(self) -> strpath_t"""
        this = _idaapi.new_strpath_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_strpath_t
    __del__ = lambda self : None;
strpath_t_swigregister = _idaapi.strpath_t_swigregister
strpath_t_swigregister(strpath_t)

class enum_const_t(object):
    """Proxy of C++ enum_const_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tid = _swig_property(_idaapi.enum_const_t_tid_get, _idaapi.enum_const_t_tid_set)
    serial = _swig_property(_idaapi.enum_const_t_serial_get, _idaapi.enum_const_t_serial_set)
    def __init__(self, *args): 
        """__init__(self) -> enum_const_t"""
        this = _idaapi.new_enum_const_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_enum_const_t
    __del__ = lambda self : None;
enum_const_t_swigregister = _idaapi.enum_const_t_swigregister
enum_const_t_swigregister(enum_const_t)

class typeinfo_t(object):
    """Proxy of C++ typeinfo_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ri = _swig_property(_idaapi.typeinfo_t_ri_get, _idaapi.typeinfo_t_ri_set)
    tid = _swig_property(_idaapi.typeinfo_t_tid_get, _idaapi.typeinfo_t_tid_set)
    path = _swig_property(_idaapi.typeinfo_t_path_get, _idaapi.typeinfo_t_path_set)
    strtype = _swig_property(_idaapi.typeinfo_t_strtype_get, _idaapi.typeinfo_t_strtype_set)
    ec = _swig_property(_idaapi.typeinfo_t_ec_get, _idaapi.typeinfo_t_ec_set)
    def __init__(self, *args): 
        """__init__(self) -> typeinfo_t"""
        this = _idaapi.new_typeinfo_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_typeinfo_t
    __del__ = lambda self : None;
typeinfo_t_swigregister = _idaapi.typeinfo_t_swigregister
typeinfo_t_swigregister(typeinfo_t)


def set_refinfo_ex(*args):
  """set_refinfo_ex(ea_t ea, int n, refinfo_t ri) -> int"""
  return _idaapi.set_refinfo_ex(*args)

def set_refinfo(*args):
  """
    set_refinfo(ea_t ea, int n, reftype_t type, ea_t target = ea_t(-1), 
        ea_t base = 0, adiff_t tdelta = 0) -> int
    """
  return _idaapi.set_refinfo(*args)

def get_refinfo(*args):
  """get_refinfo(ea_t ea, int n, refinfo_t ri) -> int"""
  return _idaapi.get_refinfo(*args)

def del_refinfo(*args):
  """del_refinfo(ea_t ea, int n) -> int"""
  return _idaapi.del_refinfo(*args)

def write_struc_path(*args):
  """write_struc_path(netnode node, int idx, tid_t path, int plen, adiff_t delta)"""
  return _idaapi.write_struc_path(*args)

def read_struc_path(*args):
  """read_struc_path(netnode node, int idx, tid_t path, adiff_t delta) -> int"""
  return _idaapi.read_struc_path(*args)

def get_input_file_path(*args):
  """get_input_file_path() -> ssize_t"""
  return _idaapi.get_input_file_path(*args)

def get_root_filename(*args):
  """get_root_filename() -> ssize_t"""
  return _idaapi.get_root_filename(*args)

def set_root_filename(*args):
  """set_root_filename(char file)"""
  return _idaapi.set_root_filename(*args)

def retrieve_input_file_crc32(*args):
  """retrieve_input_file_crc32() -> uint32"""
  return _idaapi.retrieve_input_file_crc32(*args)

def retrieve_input_file_md5(*args):
  """retrieve_input_file_md5(uchar hash) -> bool"""
  return _idaapi.retrieve_input_file_md5(*args)

def get_asm_inc_file(*args):
  """get_asm_inc_file() -> ssize_t"""
  return _idaapi.get_asm_inc_file(*args)

def set_asm_inc_file(*args):
  """set_asm_inc_file(char file)"""
  return _idaapi.set_asm_inc_file(*args)

def get_imagebase(*args):
  """get_imagebase() -> ea_t"""
  return _idaapi.get_imagebase(*args)

def set_imagebase(*args):
  """set_imagebase(ea_t base)"""
  return _idaapi.set_imagebase(*args)

def get_ids_modnode(*args):
  """get_ids_modnode() -> netnode"""
  return _idaapi.get_ids_modnode(*args)

def set_ids_modnode(*args):
  """set_ids_modnode(netnode id)"""
  return _idaapi.set_ids_modnode(*args)

def ExtraUpdate(*args):
  """ExtraUpdate(ea_t ea, char str, int what)"""
  return _idaapi.ExtraUpdate(*args)

def ExtraDel(*args):
  """ExtraDel(ea_t ea, int what)"""
  return _idaapi.ExtraDel(*args)

def ExtraGet(*args):
  """ExtraGet(ea_t ea, int what) -> ssize_t"""
  return _idaapi.ExtraGet(*args)

def dbg_get_input_path(*args):
  """dbg_get_input_path() -> size_t"""
  return _idaapi.dbg_get_input_path(*args)

def get_import_module_qty(*args):
  """get_import_module_qty() -> int"""
  return _idaapi.get_import_module_qty(*args)

def get_import_module_name(*args):
  """get_import_module_name(int mod_index) -> bool"""
  return _idaapi.get_import_module_name(*args)

def enum_import_names(*args):
  """enum_import_names(int mod_index, import_enum_cb_t callback, void param = None) -> int"""
  return _idaapi.enum_import_names(*args)
NN_null = _idaapi.NN_null
NN_aaa = _idaapi.NN_aaa
NN_aad = _idaapi.NN_aad
NN_aam = _idaapi.NN_aam
NN_aas = _idaapi.NN_aas
NN_adc = _idaapi.NN_adc
NN_add = _idaapi.NN_add
NN_and = _idaapi.NN_and
NN_arpl = _idaapi.NN_arpl
NN_bound = _idaapi.NN_bound
NN_bsf = _idaapi.NN_bsf
NN_bsr = _idaapi.NN_bsr
NN_bt = _idaapi.NN_bt
NN_btc = _idaapi.NN_btc
NN_btr = _idaapi.NN_btr
NN_bts = _idaapi.NN_bts
NN_call = _idaapi.NN_call
NN_callfi = _idaapi.NN_callfi
NN_callni = _idaapi.NN_callni
NN_cbw = _idaapi.NN_cbw
NN_cwde = _idaapi.NN_cwde
NN_cdqe = _idaapi.NN_cdqe
NN_clc = _idaapi.NN_clc
NN_cld = _idaapi.NN_cld
NN_cli = _idaapi.NN_cli
NN_clts = _idaapi.NN_clts
NN_cmc = _idaapi.NN_cmc
NN_cmp = _idaapi.NN_cmp
NN_cmps = _idaapi.NN_cmps
NN_cwd = _idaapi.NN_cwd
NN_cdq = _idaapi.NN_cdq
NN_cqo = _idaapi.NN_cqo
NN_daa = _idaapi.NN_daa
NN_das = _idaapi.NN_das
NN_dec = _idaapi.NN_dec
NN_div = _idaapi.NN_div
NN_enterw = _idaapi.NN_enterw
NN_enter = _idaapi.NN_enter
NN_enterd = _idaapi.NN_enterd
NN_enterq = _idaapi.NN_enterq
NN_hlt = _idaapi.NN_hlt
NN_idiv = _idaapi.NN_idiv
NN_imul = _idaapi.NN_imul
NN_in = _idaapi.NN_in
NN_inc = _idaapi.NN_inc
NN_ins = _idaapi.NN_ins
NN_int = _idaapi.NN_int
NN_into = _idaapi.NN_into
NN_int3 = _idaapi.NN_int3
NN_iretw = _idaapi.NN_iretw
NN_iret = _idaapi.NN_iret
NN_iretd = _idaapi.NN_iretd
NN_iretq = _idaapi.NN_iretq
NN_ja = _idaapi.NN_ja
NN_jae = _idaapi.NN_jae
NN_jb = _idaapi.NN_jb
NN_jbe = _idaapi.NN_jbe
NN_jc = _idaapi.NN_jc
NN_jcxz = _idaapi.NN_jcxz
NN_jecxz = _idaapi.NN_jecxz
NN_jrcxz = _idaapi.NN_jrcxz
NN_je = _idaapi.NN_je
NN_jg = _idaapi.NN_jg
NN_jge = _idaapi.NN_jge
NN_jl = _idaapi.NN_jl
NN_jle = _idaapi.NN_jle
NN_jna = _idaapi.NN_jna
NN_jnae = _idaapi.NN_jnae
NN_jnb = _idaapi.NN_jnb
NN_jnbe = _idaapi.NN_jnbe
NN_jnc = _idaapi.NN_jnc
NN_jne = _idaapi.NN_jne
NN_jng = _idaapi.NN_jng
NN_jnge = _idaapi.NN_jnge
NN_jnl = _idaapi.NN_jnl
NN_jnle = _idaapi.NN_jnle
NN_jno = _idaapi.NN_jno
NN_jnp = _idaapi.NN_jnp
NN_jns = _idaapi.NN_jns
NN_jnz = _idaapi.NN_jnz
NN_jo = _idaapi.NN_jo
NN_jp = _idaapi.NN_jp
NN_jpe = _idaapi.NN_jpe
NN_jpo = _idaapi.NN_jpo
NN_js = _idaapi.NN_js
NN_jz = _idaapi.NN_jz
NN_jmp = _idaapi.NN_jmp
NN_jmpfi = _idaapi.NN_jmpfi
NN_jmpni = _idaapi.NN_jmpni
NN_jmpshort = _idaapi.NN_jmpshort
NN_lahf = _idaapi.NN_lahf
NN_lar = _idaapi.NN_lar
NN_lea = _idaapi.NN_lea
NN_leavew = _idaapi.NN_leavew
NN_leave = _idaapi.NN_leave
NN_leaved = _idaapi.NN_leaved
NN_leaveq = _idaapi.NN_leaveq
NN_lgdt = _idaapi.NN_lgdt
NN_lidt = _idaapi.NN_lidt
NN_lgs = _idaapi.NN_lgs
NN_lss = _idaapi.NN_lss
NN_lds = _idaapi.NN_lds
NN_les = _idaapi.NN_les
NN_lfs = _idaapi.NN_lfs
NN_lldt = _idaapi.NN_lldt
NN_lmsw = _idaapi.NN_lmsw
NN_lock = _idaapi.NN_lock
NN_lods = _idaapi.NN_lods
NN_loopw = _idaapi.NN_loopw
NN_loop = _idaapi.NN_loop
NN_loopd = _idaapi.NN_loopd
NN_loopq = _idaapi.NN_loopq
NN_loopwe = _idaapi.NN_loopwe
NN_loope = _idaapi.NN_loope
NN_loopde = _idaapi.NN_loopde
NN_loopqe = _idaapi.NN_loopqe
NN_loopwne = _idaapi.NN_loopwne
NN_loopne = _idaapi.NN_loopne
NN_loopdne = _idaapi.NN_loopdne
NN_loopqne = _idaapi.NN_loopqne
NN_lsl = _idaapi.NN_lsl
NN_ltr = _idaapi.NN_ltr
NN_mov = _idaapi.NN_mov
NN_movsp = _idaapi.NN_movsp
NN_movs = _idaapi.NN_movs
NN_movsx = _idaapi.NN_movsx
NN_movzx = _idaapi.NN_movzx
NN_mul = _idaapi.NN_mul
NN_neg = _idaapi.NN_neg
NN_nop = _idaapi.NN_nop
NN_not = _idaapi.NN_not
NN_or = _idaapi.NN_or
NN_out = _idaapi.NN_out
NN_outs = _idaapi.NN_outs
NN_pop = _idaapi.NN_pop
NN_popaw = _idaapi.NN_popaw
NN_popa = _idaapi.NN_popa
NN_popad = _idaapi.NN_popad
NN_popaq = _idaapi.NN_popaq
NN_popfw = _idaapi.NN_popfw
NN_popf = _idaapi.NN_popf
NN_popfd = _idaapi.NN_popfd
NN_popfq = _idaapi.NN_popfq
NN_push = _idaapi.NN_push
NN_pushaw = _idaapi.NN_pushaw
NN_pusha = _idaapi.NN_pusha
NN_pushad = _idaapi.NN_pushad
NN_pushaq = _idaapi.NN_pushaq
NN_pushfw = _idaapi.NN_pushfw
NN_pushf = _idaapi.NN_pushf
NN_pushfd = _idaapi.NN_pushfd
NN_pushfq = _idaapi.NN_pushfq
NN_rcl = _idaapi.NN_rcl
NN_rcr = _idaapi.NN_rcr
NN_rol = _idaapi.NN_rol
NN_ror = _idaapi.NN_ror
NN_rep = _idaapi.NN_rep
NN_repe = _idaapi.NN_repe
NN_repne = _idaapi.NN_repne
NN_retn = _idaapi.NN_retn
NN_retf = _idaapi.NN_retf
NN_sahf = _idaapi.NN_sahf
NN_sal = _idaapi.NN_sal
NN_sar = _idaapi.NN_sar
NN_shl = _idaapi.NN_shl
NN_shr = _idaapi.NN_shr
NN_sbb = _idaapi.NN_sbb
NN_scas = _idaapi.NN_scas
NN_seta = _idaapi.NN_seta
NN_setae = _idaapi.NN_setae
NN_setb = _idaapi.NN_setb
NN_setbe = _idaapi.NN_setbe
NN_setc = _idaapi.NN_setc
NN_sete = _idaapi.NN_sete
NN_setg = _idaapi.NN_setg
NN_setge = _idaapi.NN_setge
NN_setl = _idaapi.NN_setl
NN_setle = _idaapi.NN_setle
NN_setna = _idaapi.NN_setna
NN_setnae = _idaapi.NN_setnae
NN_setnb = _idaapi.NN_setnb
NN_setnbe = _idaapi.NN_setnbe
NN_setnc = _idaapi.NN_setnc
NN_setne = _idaapi.NN_setne
NN_setng = _idaapi.NN_setng
NN_setnge = _idaapi.NN_setnge
NN_setnl = _idaapi.NN_setnl
NN_setnle = _idaapi.NN_setnle
NN_setno = _idaapi.NN_setno
NN_setnp = _idaapi.NN_setnp
NN_setns = _idaapi.NN_setns
NN_setnz = _idaapi.NN_setnz
NN_seto = _idaapi.NN_seto
NN_setp = _idaapi.NN_setp
NN_setpe = _idaapi.NN_setpe
NN_setpo = _idaapi.NN_setpo
NN_sets = _idaapi.NN_sets
NN_setz = _idaapi.NN_setz
NN_sgdt = _idaapi.NN_sgdt
NN_sidt = _idaapi.NN_sidt
NN_shld = _idaapi.NN_shld
NN_shrd = _idaapi.NN_shrd
NN_sldt = _idaapi.NN_sldt
NN_smsw = _idaapi.NN_smsw
NN_stc = _idaapi.NN_stc
NN_std = _idaapi.NN_std
NN_sti = _idaapi.NN_sti
NN_stos = _idaapi.NN_stos
NN_str = _idaapi.NN_str
NN_sub = _idaapi.NN_sub
NN_test = _idaapi.NN_test
NN_verr = _idaapi.NN_verr
NN_verw = _idaapi.NN_verw
NN_wait = _idaapi.NN_wait
NN_xchg = _idaapi.NN_xchg
NN_xlat = _idaapi.NN_xlat
NN_xor = _idaapi.NN_xor
NN_cmpxchg = _idaapi.NN_cmpxchg
NN_bswap = _idaapi.NN_bswap
NN_xadd = _idaapi.NN_xadd
NN_invd = _idaapi.NN_invd
NN_wbinvd = _idaapi.NN_wbinvd
NN_invlpg = _idaapi.NN_invlpg
NN_rdmsr = _idaapi.NN_rdmsr
NN_wrmsr = _idaapi.NN_wrmsr
NN_cpuid = _idaapi.NN_cpuid
NN_cmpxchg8b = _idaapi.NN_cmpxchg8b
NN_rdtsc = _idaapi.NN_rdtsc
NN_rsm = _idaapi.NN_rsm
NN_cmova = _idaapi.NN_cmova
NN_cmovb = _idaapi.NN_cmovb
NN_cmovbe = _idaapi.NN_cmovbe
NN_cmovg = _idaapi.NN_cmovg
NN_cmovge = _idaapi.NN_cmovge
NN_cmovl = _idaapi.NN_cmovl
NN_cmovle = _idaapi.NN_cmovle
NN_cmovnb = _idaapi.NN_cmovnb
NN_cmovno = _idaapi.NN_cmovno
NN_cmovnp = _idaapi.NN_cmovnp
NN_cmovns = _idaapi.NN_cmovns
NN_cmovnz = _idaapi.NN_cmovnz
NN_cmovo = _idaapi.NN_cmovo
NN_cmovp = _idaapi.NN_cmovp
NN_cmovs = _idaapi.NN_cmovs
NN_cmovz = _idaapi.NN_cmovz
NN_fcmovb = _idaapi.NN_fcmovb
NN_fcmove = _idaapi.NN_fcmove
NN_fcmovbe = _idaapi.NN_fcmovbe
NN_fcmovu = _idaapi.NN_fcmovu
NN_fcmovnb = _idaapi.NN_fcmovnb
NN_fcmovne = _idaapi.NN_fcmovne
NN_fcmovnbe = _idaapi.NN_fcmovnbe
NN_fcmovnu = _idaapi.NN_fcmovnu
NN_fcomi = _idaapi.NN_fcomi
NN_fucomi = _idaapi.NN_fucomi
NN_fcomip = _idaapi.NN_fcomip
NN_fucomip = _idaapi.NN_fucomip
NN_rdpmc = _idaapi.NN_rdpmc
NN_fld = _idaapi.NN_fld
NN_fst = _idaapi.NN_fst
NN_fstp = _idaapi.NN_fstp
NN_fxch = _idaapi.NN_fxch
NN_fild = _idaapi.NN_fild
NN_fist = _idaapi.NN_fist
NN_fistp = _idaapi.NN_fistp
NN_fbld = _idaapi.NN_fbld
NN_fbstp = _idaapi.NN_fbstp
NN_fadd = _idaapi.NN_fadd
NN_faddp = _idaapi.NN_faddp
NN_fiadd = _idaapi.NN_fiadd
NN_fsub = _idaapi.NN_fsub
NN_fsubp = _idaapi.NN_fsubp
NN_fisub = _idaapi.NN_fisub
NN_fsubr = _idaapi.NN_fsubr
NN_fsubrp = _idaapi.NN_fsubrp
NN_fisubr = _idaapi.NN_fisubr
NN_fmul = _idaapi.NN_fmul
NN_fmulp = _idaapi.NN_fmulp
NN_fimul = _idaapi.NN_fimul
NN_fdiv = _idaapi.NN_fdiv
NN_fdivp = _idaapi.NN_fdivp
NN_fidiv = _idaapi.NN_fidiv
NN_fdivr = _idaapi.NN_fdivr
NN_fdivrp = _idaapi.NN_fdivrp
NN_fidivr = _idaapi.NN_fidivr
NN_fsqrt = _idaapi.NN_fsqrt
NN_fscale = _idaapi.NN_fscale
NN_fprem = _idaapi.NN_fprem
NN_frndint = _idaapi.NN_frndint
NN_fxtract = _idaapi.NN_fxtract
NN_fabs = _idaapi.NN_fabs
NN_fchs = _idaapi.NN_fchs
NN_fcom = _idaapi.NN_fcom
NN_fcomp = _idaapi.NN_fcomp
NN_fcompp = _idaapi.NN_fcompp
NN_ficom = _idaapi.NN_ficom
NN_ficomp = _idaapi.NN_ficomp
NN_ftst = _idaapi.NN_ftst
NN_fxam = _idaapi.NN_fxam
NN_fptan = _idaapi.NN_fptan
NN_fpatan = _idaapi.NN_fpatan
NN_f2xm1 = _idaapi.NN_f2xm1
NN_fyl2x = _idaapi.NN_fyl2x
NN_fyl2xp1 = _idaapi.NN_fyl2xp1
NN_fldz = _idaapi.NN_fldz
NN_fld1 = _idaapi.NN_fld1
NN_fldpi = _idaapi.NN_fldpi
NN_fldl2t = _idaapi.NN_fldl2t
NN_fldl2e = _idaapi.NN_fldl2e
NN_fldlg2 = _idaapi.NN_fldlg2
NN_fldln2 = _idaapi.NN_fldln2
NN_finit = _idaapi.NN_finit
NN_fninit = _idaapi.NN_fninit
NN_fsetpm = _idaapi.NN_fsetpm
NN_fldcw = _idaapi.NN_fldcw
NN_fstcw = _idaapi.NN_fstcw
NN_fnstcw = _idaapi.NN_fnstcw
NN_fstsw = _idaapi.NN_fstsw
NN_fnstsw = _idaapi.NN_fnstsw
NN_fclex = _idaapi.NN_fclex
NN_fnclex = _idaapi.NN_fnclex
NN_fstenv = _idaapi.NN_fstenv
NN_fnstenv = _idaapi.NN_fnstenv
NN_fldenv = _idaapi.NN_fldenv
NN_fsave = _idaapi.NN_fsave
NN_fnsave = _idaapi.NN_fnsave
NN_frstor = _idaapi.NN_frstor
NN_fincstp = _idaapi.NN_fincstp
NN_fdecstp = _idaapi.NN_fdecstp
NN_ffree = _idaapi.NN_ffree
NN_fnop = _idaapi.NN_fnop
NN_feni = _idaapi.NN_feni
NN_fneni = _idaapi.NN_fneni
NN_fdisi = _idaapi.NN_fdisi
NN_fndisi = _idaapi.NN_fndisi
NN_fprem1 = _idaapi.NN_fprem1
NN_fsincos = _idaapi.NN_fsincos
NN_fsin = _idaapi.NN_fsin
NN_fcos = _idaapi.NN_fcos
NN_fucom = _idaapi.NN_fucom
NN_fucomp = _idaapi.NN_fucomp
NN_fucompp = _idaapi.NN_fucompp
NN_setalc = _idaapi.NN_setalc
NN_svdc = _idaapi.NN_svdc
NN_rsdc = _idaapi.NN_rsdc
NN_svldt = _idaapi.NN_svldt
NN_rsldt = _idaapi.NN_rsldt
NN_svts = _idaapi.NN_svts
NN_rsts = _idaapi.NN_rsts
NN_icebp = _idaapi.NN_icebp
NN_loadall = _idaapi.NN_loadall
NN_emms = _idaapi.NN_emms
NN_movd = _idaapi.NN_movd
NN_movq = _idaapi.NN_movq
NN_packsswb = _idaapi.NN_packsswb
NN_packssdw = _idaapi.NN_packssdw
NN_packuswb = _idaapi.NN_packuswb
NN_paddb = _idaapi.NN_paddb
NN_paddw = _idaapi.NN_paddw
NN_paddd = _idaapi.NN_paddd
NN_paddsb = _idaapi.NN_paddsb
NN_paddsw = _idaapi.NN_paddsw
NN_paddusb = _idaapi.NN_paddusb
NN_paddusw = _idaapi.NN_paddusw
NN_pand = _idaapi.NN_pand
NN_pandn = _idaapi.NN_pandn
NN_pcmpeqb = _idaapi.NN_pcmpeqb
NN_pcmpeqw = _idaapi.NN_pcmpeqw
NN_pcmpeqd = _idaapi.NN_pcmpeqd
NN_pcmpgtb = _idaapi.NN_pcmpgtb
NN_pcmpgtw = _idaapi.NN_pcmpgtw
NN_pcmpgtd = _idaapi.NN_pcmpgtd
NN_pmaddwd = _idaapi.NN_pmaddwd
NN_pmulhw = _idaapi.NN_pmulhw
NN_pmullw = _idaapi.NN_pmullw
NN_por = _idaapi.NN_por
NN_psllw = _idaapi.NN_psllw
NN_pslld = _idaapi.NN_pslld
NN_psllq = _idaapi.NN_psllq
NN_psraw = _idaapi.NN_psraw
NN_psrad = _idaapi.NN_psrad
NN_psrlw = _idaapi.NN_psrlw
NN_psrld = _idaapi.NN_psrld
NN_psrlq = _idaapi.NN_psrlq
NN_psubb = _idaapi.NN_psubb
NN_psubw = _idaapi.NN_psubw
NN_psubd = _idaapi.NN_psubd
NN_psubsb = _idaapi.NN_psubsb
NN_psubsw = _idaapi.NN_psubsw
NN_psubusb = _idaapi.NN_psubusb
NN_psubusw = _idaapi.NN_psubusw
NN_punpckhbw = _idaapi.NN_punpckhbw
NN_punpckhwd = _idaapi.NN_punpckhwd
NN_punpckhdq = _idaapi.NN_punpckhdq
NN_punpcklbw = _idaapi.NN_punpcklbw
NN_punpcklwd = _idaapi.NN_punpcklwd
NN_punpckldq = _idaapi.NN_punpckldq
NN_pxor = _idaapi.NN_pxor
NN_fxsave = _idaapi.NN_fxsave
NN_fxrstor = _idaapi.NN_fxrstor
NN_sysenter = _idaapi.NN_sysenter
NN_sysexit = _idaapi.NN_sysexit
NN_pavgusb = _idaapi.NN_pavgusb
NN_pfadd = _idaapi.NN_pfadd
NN_pfsub = _idaapi.NN_pfsub
NN_pfsubr = _idaapi.NN_pfsubr
NN_pfacc = _idaapi.NN_pfacc
NN_pfcmpge = _idaapi.NN_pfcmpge
NN_pfcmpgt = _idaapi.NN_pfcmpgt
NN_pfcmpeq = _idaapi.NN_pfcmpeq
NN_pfmin = _idaapi.NN_pfmin
NN_pfmax = _idaapi.NN_pfmax
NN_pi2fd = _idaapi.NN_pi2fd
NN_pf2id = _idaapi.NN_pf2id
NN_pfrcp = _idaapi.NN_pfrcp
NN_pfrsqrt = _idaapi.NN_pfrsqrt
NN_pfmul = _idaapi.NN_pfmul
NN_pfrcpit1 = _idaapi.NN_pfrcpit1
NN_pfrsqit1 = _idaapi.NN_pfrsqit1
NN_pfrcpit2 = _idaapi.NN_pfrcpit2
NN_pmulhrw = _idaapi.NN_pmulhrw
NN_femms = _idaapi.NN_femms
NN_prefetch = _idaapi.NN_prefetch
NN_prefetchw = _idaapi.NN_prefetchw
NN_addps = _idaapi.NN_addps
NN_addss = _idaapi.NN_addss
NN_andnps = _idaapi.NN_andnps
NN_andps = _idaapi.NN_andps
NN_cmpps = _idaapi.NN_cmpps
NN_cmpss = _idaapi.NN_cmpss
NN_comiss = _idaapi.NN_comiss
NN_cvtpi2ps = _idaapi.NN_cvtpi2ps
NN_cvtps2pi = _idaapi.NN_cvtps2pi
NN_cvtsi2ss = _idaapi.NN_cvtsi2ss
NN_cvtss2si = _idaapi.NN_cvtss2si
NN_cvttps2pi = _idaapi.NN_cvttps2pi
NN_cvttss2si = _idaapi.NN_cvttss2si
NN_divps = _idaapi.NN_divps
NN_divss = _idaapi.NN_divss
NN_ldmxcsr = _idaapi.NN_ldmxcsr
NN_maxps = _idaapi.NN_maxps
NN_maxss = _idaapi.NN_maxss
NN_minps = _idaapi.NN_minps
NN_minss = _idaapi.NN_minss
NN_movaps = _idaapi.NN_movaps
NN_movhlps = _idaapi.NN_movhlps
NN_movhps = _idaapi.NN_movhps
NN_movlhps = _idaapi.NN_movlhps
NN_movlps = _idaapi.NN_movlps
NN_movmskps = _idaapi.NN_movmskps
NN_movss = _idaapi.NN_movss
NN_movups = _idaapi.NN_movups
NN_mulps = _idaapi.NN_mulps
NN_mulss = _idaapi.NN_mulss
NN_orps = _idaapi.NN_orps
NN_rcpps = _idaapi.NN_rcpps
NN_rcpss = _idaapi.NN_rcpss
NN_rsqrtps = _idaapi.NN_rsqrtps
NN_rsqrtss = _idaapi.NN_rsqrtss
NN_shufps = _idaapi.NN_shufps
NN_sqrtps = _idaapi.NN_sqrtps
NN_sqrtss = _idaapi.NN_sqrtss
NN_stmxcsr = _idaapi.NN_stmxcsr
NN_subps = _idaapi.NN_subps
NN_subss = _idaapi.NN_subss
NN_ucomiss = _idaapi.NN_ucomiss
NN_unpckhps = _idaapi.NN_unpckhps
NN_unpcklps = _idaapi.NN_unpcklps
NN_xorps = _idaapi.NN_xorps
NN_pavgb = _idaapi.NN_pavgb
NN_pavgw = _idaapi.NN_pavgw
NN_pextrw = _idaapi.NN_pextrw
NN_pinsrw = _idaapi.NN_pinsrw
NN_pmaxsw = _idaapi.NN_pmaxsw
NN_pmaxub = _idaapi.NN_pmaxub
NN_pminsw = _idaapi.NN_pminsw
NN_pminub = _idaapi.NN_pminub
NN_pmovmskb = _idaapi.NN_pmovmskb
NN_pmulhuw = _idaapi.NN_pmulhuw
NN_psadbw = _idaapi.NN_psadbw
NN_pshufw = _idaapi.NN_pshufw
NN_maskmovq = _idaapi.NN_maskmovq
NN_movntps = _idaapi.NN_movntps
NN_movntq = _idaapi.NN_movntq
NN_prefetcht0 = _idaapi.NN_prefetcht0
NN_prefetcht1 = _idaapi.NN_prefetcht1
NN_prefetcht2 = _idaapi.NN_prefetcht2
NN_prefetchnta = _idaapi.NN_prefetchnta
NN_sfence = _idaapi.NN_sfence
NN_cmpeqps = _idaapi.NN_cmpeqps
NN_cmpltps = _idaapi.NN_cmpltps
NN_cmpleps = _idaapi.NN_cmpleps
NN_cmpunordps = _idaapi.NN_cmpunordps
NN_cmpneqps = _idaapi.NN_cmpneqps
NN_cmpnltps = _idaapi.NN_cmpnltps
NN_cmpnleps = _idaapi.NN_cmpnleps
NN_cmpordps = _idaapi.NN_cmpordps
NN_cmpeqss = _idaapi.NN_cmpeqss
NN_cmpltss = _idaapi.NN_cmpltss
NN_cmpless = _idaapi.NN_cmpless
NN_cmpunordss = _idaapi.NN_cmpunordss
NN_cmpneqss = _idaapi.NN_cmpneqss
NN_cmpnltss = _idaapi.NN_cmpnltss
NN_cmpnless = _idaapi.NN_cmpnless
NN_cmpordss = _idaapi.NN_cmpordss
NN_pf2iw = _idaapi.NN_pf2iw
NN_pfnacc = _idaapi.NN_pfnacc
NN_pfpnacc = _idaapi.NN_pfpnacc
NN_pi2fw = _idaapi.NN_pi2fw
NN_pswapd = _idaapi.NN_pswapd
NN_fstp1 = _idaapi.NN_fstp1
NN_fcom2 = _idaapi.NN_fcom2
NN_fcomp3 = _idaapi.NN_fcomp3
NN_fxch4 = _idaapi.NN_fxch4
NN_fcomp5 = _idaapi.NN_fcomp5
NN_ffreep = _idaapi.NN_ffreep
NN_fxch7 = _idaapi.NN_fxch7
NN_fstp8 = _idaapi.NN_fstp8
NN_fstp9 = _idaapi.NN_fstp9
NN_addpd = _idaapi.NN_addpd
NN_addsd = _idaapi.NN_addsd
NN_andnpd = _idaapi.NN_andnpd
NN_andpd = _idaapi.NN_andpd
NN_clflush = _idaapi.NN_clflush
NN_cmppd = _idaapi.NN_cmppd
NN_cmpsd = _idaapi.NN_cmpsd
NN_comisd = _idaapi.NN_comisd
NN_cvtdq2pd = _idaapi.NN_cvtdq2pd
NN_cvtdq2ps = _idaapi.NN_cvtdq2ps
NN_cvtpd2dq = _idaapi.NN_cvtpd2dq
NN_cvtpd2pi = _idaapi.NN_cvtpd2pi
NN_cvtpd2ps = _idaapi.NN_cvtpd2ps
NN_cvtpi2pd = _idaapi.NN_cvtpi2pd
NN_cvtps2dq = _idaapi.NN_cvtps2dq
NN_cvtps2pd = _idaapi.NN_cvtps2pd
NN_cvtsd2si = _idaapi.NN_cvtsd2si
NN_cvtsd2ss = _idaapi.NN_cvtsd2ss
NN_cvtsi2sd = _idaapi.NN_cvtsi2sd
NN_cvtss2sd = _idaapi.NN_cvtss2sd
NN_cvttpd2dq = _idaapi.NN_cvttpd2dq
NN_cvttpd2pi = _idaapi.NN_cvttpd2pi
NN_cvttps2dq = _idaapi.NN_cvttps2dq
NN_cvttsd2si = _idaapi.NN_cvttsd2si
NN_divpd = _idaapi.NN_divpd
NN_divsd = _idaapi.NN_divsd
NN_lfence = _idaapi.NN_lfence
NN_maskmovdqu = _idaapi.NN_maskmovdqu
NN_maxpd = _idaapi.NN_maxpd
NN_maxsd = _idaapi.NN_maxsd
NN_mfence = _idaapi.NN_mfence
NN_minpd = _idaapi.NN_minpd
NN_minsd = _idaapi.NN_minsd
NN_movapd = _idaapi.NN_movapd
NN_movdq2q = _idaapi.NN_movdq2q
NN_movdqa = _idaapi.NN_movdqa
NN_movdqu = _idaapi.NN_movdqu
NN_movhpd = _idaapi.NN_movhpd
NN_movlpd = _idaapi.NN_movlpd
NN_movmskpd = _idaapi.NN_movmskpd
NN_movntdq = _idaapi.NN_movntdq
NN_movnti = _idaapi.NN_movnti
NN_movntpd = _idaapi.NN_movntpd
NN_movq2dq = _idaapi.NN_movq2dq
NN_movsd = _idaapi.NN_movsd
NN_movupd = _idaapi.NN_movupd
NN_mulpd = _idaapi.NN_mulpd
NN_mulsd = _idaapi.NN_mulsd
NN_orpd = _idaapi.NN_orpd
NN_paddq = _idaapi.NN_paddq
NN_pause = _idaapi.NN_pause
NN_pmuludq = _idaapi.NN_pmuludq
NN_pshufd = _idaapi.NN_pshufd
NN_pshufhw = _idaapi.NN_pshufhw
NN_pshuflw = _idaapi.NN_pshuflw
NN_pslldq = _idaapi.NN_pslldq
NN_psrldq = _idaapi.NN_psrldq
NN_psubq = _idaapi.NN_psubq
NN_punpckhqdq = _idaapi.NN_punpckhqdq
NN_punpcklqdq = _idaapi.NN_punpcklqdq
NN_shufpd = _idaapi.NN_shufpd
NN_sqrtpd = _idaapi.NN_sqrtpd
NN_sqrtsd = _idaapi.NN_sqrtsd
NN_subpd = _idaapi.NN_subpd
NN_subsd = _idaapi.NN_subsd
NN_ucomisd = _idaapi.NN_ucomisd
NN_unpckhpd = _idaapi.NN_unpckhpd
NN_unpcklpd = _idaapi.NN_unpcklpd
NN_xorpd = _idaapi.NN_xorpd
NN_syscall = _idaapi.NN_syscall
NN_sysret = _idaapi.NN_sysret
NN_swapgs = _idaapi.NN_swapgs
NN_movddup = _idaapi.NN_movddup
NN_movshdup = _idaapi.NN_movshdup
NN_movsldup = _idaapi.NN_movsldup
NN_movsxd = _idaapi.NN_movsxd
NN_cmpxchg16b = _idaapi.NN_cmpxchg16b
NN_addsubpd = _idaapi.NN_addsubpd
NN_addsubps = _idaapi.NN_addsubps
NN_haddpd = _idaapi.NN_haddpd
NN_haddps = _idaapi.NN_haddps
NN_hsubpd = _idaapi.NN_hsubpd
NN_hsubps = _idaapi.NN_hsubps
NN_monitor = _idaapi.NN_monitor
NN_mwait = _idaapi.NN_mwait
NN_fisttp = _idaapi.NN_fisttp
NN_lddqu = _idaapi.NN_lddqu
NN_psignb = _idaapi.NN_psignb
NN_psignw = _idaapi.NN_psignw
NN_psignd = _idaapi.NN_psignd
NN_pshufb = _idaapi.NN_pshufb
NN_pmulhrsw = _idaapi.NN_pmulhrsw
NN_pmaddubsw = _idaapi.NN_pmaddubsw
NN_phsubsw = _idaapi.NN_phsubsw
NN_phaddsw = _idaapi.NN_phaddsw
NN_phaddw = _idaapi.NN_phaddw
NN_phaddd = _idaapi.NN_phaddd
NN_phsubw = _idaapi.NN_phsubw
NN_phsubd = _idaapi.NN_phsubd
NN_palignr = _idaapi.NN_palignr
NN_pabsb = _idaapi.NN_pabsb
NN_pabsw = _idaapi.NN_pabsw
NN_pabsd = _idaapi.NN_pabsd
NN_vmcall = _idaapi.NN_vmcall
NN_vmclear = _idaapi.NN_vmclear
NN_vmlaunch = _idaapi.NN_vmlaunch
NN_vmresume = _idaapi.NN_vmresume
NN_vmptrld = _idaapi.NN_vmptrld
NN_vmptrst = _idaapi.NN_vmptrst
NN_vmread = _idaapi.NN_vmread
NN_vmwrite = _idaapi.NN_vmwrite
NN_vmxoff = _idaapi.NN_vmxoff
NN_vmxon = _idaapi.NN_vmxon
NN_ud2 = _idaapi.NN_ud2
NN_rdtscp = _idaapi.NN_rdtscp
NN_pfrcpv = _idaapi.NN_pfrcpv
NN_pfrsqrtv = _idaapi.NN_pfrsqrtv
NN_cmpeqpd = _idaapi.NN_cmpeqpd
NN_cmpltpd = _idaapi.NN_cmpltpd
NN_cmplepd = _idaapi.NN_cmplepd
NN_cmpunordpd = _idaapi.NN_cmpunordpd
NN_cmpneqpd = _idaapi.NN_cmpneqpd
NN_cmpnltpd = _idaapi.NN_cmpnltpd
NN_cmpnlepd = _idaapi.NN_cmpnlepd
NN_cmpordpd = _idaapi.NN_cmpordpd
NN_cmpeqsd = _idaapi.NN_cmpeqsd
NN_cmpltsd = _idaapi.NN_cmpltsd
NN_cmplesd = _idaapi.NN_cmplesd
NN_cmpunordsd = _idaapi.NN_cmpunordsd
NN_cmpneqsd = _idaapi.NN_cmpneqsd
NN_cmpnltsd = _idaapi.NN_cmpnltsd
NN_cmpnlesd = _idaapi.NN_cmpnlesd
NN_cmpordsd = _idaapi.NN_cmpordsd
NN_blendpd = _idaapi.NN_blendpd
NN_blendps = _idaapi.NN_blendps
NN_blendvpd = _idaapi.NN_blendvpd
NN_blendvps = _idaapi.NN_blendvps
NN_dppd = _idaapi.NN_dppd
NN_dpps = _idaapi.NN_dpps
NN_extractps = _idaapi.NN_extractps
NN_insertps = _idaapi.NN_insertps
NN_movntdqa = _idaapi.NN_movntdqa
NN_mpsadbw = _idaapi.NN_mpsadbw
NN_packusdw = _idaapi.NN_packusdw
NN_pblendvb = _idaapi.NN_pblendvb
NN_pblendw = _idaapi.NN_pblendw
NN_pcmpeqq = _idaapi.NN_pcmpeqq
NN_pextrb = _idaapi.NN_pextrb
NN_pextrd = _idaapi.NN_pextrd
NN_pextrq = _idaapi.NN_pextrq
NN_phminposuw = _idaapi.NN_phminposuw
NN_pinsrb = _idaapi.NN_pinsrb
NN_pinsrd = _idaapi.NN_pinsrd
NN_pinsrq = _idaapi.NN_pinsrq
NN_pmaxsb = _idaapi.NN_pmaxsb
NN_pmaxsd = _idaapi.NN_pmaxsd
NN_pmaxud = _idaapi.NN_pmaxud
NN_pmaxuw = _idaapi.NN_pmaxuw
NN_pminsb = _idaapi.NN_pminsb
NN_pminsd = _idaapi.NN_pminsd
NN_pminud = _idaapi.NN_pminud
NN_pminuw = _idaapi.NN_pminuw
NN_pmovsxbw = _idaapi.NN_pmovsxbw
NN_pmovsxbd = _idaapi.NN_pmovsxbd
NN_pmovsxbq = _idaapi.NN_pmovsxbq
NN_pmovsxwd = _idaapi.NN_pmovsxwd
NN_pmovsxwq = _idaapi.NN_pmovsxwq
NN_pmovsxdq = _idaapi.NN_pmovsxdq
NN_pmovzxbw = _idaapi.NN_pmovzxbw
NN_pmovzxbd = _idaapi.NN_pmovzxbd
NN_pmovzxbq = _idaapi.NN_pmovzxbq
NN_pmovzxwd = _idaapi.NN_pmovzxwd
NN_pmovzxwq = _idaapi.NN_pmovzxwq
NN_pmovzxdq = _idaapi.NN_pmovzxdq
NN_pmuldq = _idaapi.NN_pmuldq
NN_pmulld = _idaapi.NN_pmulld
NN_ptest = _idaapi.NN_ptest
NN_roundpd = _idaapi.NN_roundpd
NN_roundps = _idaapi.NN_roundps
NN_roundsd = _idaapi.NN_roundsd
NN_roundss = _idaapi.NN_roundss
NN_crc32 = _idaapi.NN_crc32
NN_pcmpestri = _idaapi.NN_pcmpestri
NN_pcmpestrm = _idaapi.NN_pcmpestrm
NN_pcmpistri = _idaapi.NN_pcmpistri
NN_pcmpistrm = _idaapi.NN_pcmpistrm
NN_pcmpgtq = _idaapi.NN_pcmpgtq
NN_popcnt = _idaapi.NN_popcnt
NN_extrq = _idaapi.NN_extrq
NN_insertq = _idaapi.NN_insertq
NN_movntsd = _idaapi.NN_movntsd
NN_movntss = _idaapi.NN_movntss
NN_lzcnt = _idaapi.NN_lzcnt
NN_xgetbv = _idaapi.NN_xgetbv
NN_xrstor = _idaapi.NN_xrstor
NN_xsave = _idaapi.NN_xsave
NN_xsetbv = _idaapi.NN_xsetbv
NN_getsec = _idaapi.NN_getsec
NN_clgi = _idaapi.NN_clgi
NN_invlpga = _idaapi.NN_invlpga
NN_skinit = _idaapi.NN_skinit
NN_stgi = _idaapi.NN_stgi
NN_vmexit = _idaapi.NN_vmexit
NN_vmload = _idaapi.NN_vmload
NN_vmmcall = _idaapi.NN_vmmcall
NN_vmrun = _idaapi.NN_vmrun
NN_vmsave = _idaapi.NN_vmsave
NN_invept = _idaapi.NN_invept
NN_invvpid = _idaapi.NN_invvpid
NN_movbe = _idaapi.NN_movbe
NN_aesenc = _idaapi.NN_aesenc
NN_aesenclast = _idaapi.NN_aesenclast
NN_aesdec = _idaapi.NN_aesdec
NN_aesdeclast = _idaapi.NN_aesdeclast
NN_aesimc = _idaapi.NN_aesimc
NN_aeskeygenassist = _idaapi.NN_aeskeygenassist
NN_pclmulqdq = _idaapi.NN_pclmulqdq
NN_last = _idaapi.NN_last
I5_null = _idaapi.I5_null
I5_aci = _idaapi.I5_aci
I5_adc = _idaapi.I5_adc
Z80_adc = _idaapi.Z80_adc
I5_add = _idaapi.I5_add
Z80_add = _idaapi.Z80_add
I5_adi = _idaapi.I5_adi
I5_ana = _idaapi.I5_ana
I5_ani = _idaapi.I5_ani
I5_call = _idaapi.I5_call
I5_cnz = _idaapi.I5_cnz
I5_cz = _idaapi.I5_cz
I5_cnc = _idaapi.I5_cnc
I5_cc = _idaapi.I5_cc
I5_cpo = _idaapi.I5_cpo
I5_cpe = _idaapi.I5_cpe
I5_cp = _idaapi.I5_cp
I5_cm = _idaapi.I5_cm
I5_cmc = _idaapi.I5_cmc
I5_cmp = _idaapi.I5_cmp
I5_cpi = _idaapi.I5_cpi
I5_cma = _idaapi.I5_cma
I5_daa = _idaapi.I5_daa
I5_dad = _idaapi.I5_dad
I5_dcr = _idaapi.I5_dcr
I5_dcx = _idaapi.I5_dcx
I5_di = _idaapi.I5_di
Z80_di = _idaapi.Z80_di
I5_ei = _idaapi.I5_ei
Z80_ei = _idaapi.Z80_ei
I5_halt = _idaapi.I5_halt
I5_in = _idaapi.I5_in
Z80_in = _idaapi.Z80_in
I5_inr = _idaapi.I5_inr
I5_inx = _idaapi.I5_inx
I5_jmp = _idaapi.I5_jmp
I5_jnz = _idaapi.I5_jnz
I5_jz = _idaapi.I5_jz
I5_jnc = _idaapi.I5_jnc
I5_jc = _idaapi.I5_jc
I5_jpo = _idaapi.I5_jpo
I5_jpe = _idaapi.I5_jpe
I5_jp = _idaapi.I5_jp
I5_jm = _idaapi.I5_jm
I5_lda = _idaapi.I5_lda
I5_ldax = _idaapi.I5_ldax
I5_lhld = _idaapi.I5_lhld
I5_lxi = _idaapi.I5_lxi
I5_mov = _idaapi.I5_mov
I5_mvi = _idaapi.I5_mvi
I5_nop = _idaapi.I5_nop
I5_ora = _idaapi.I5_ora
I5_ori = _idaapi.I5_ori
I5_out = _idaapi.I5_out
Z80_out = _idaapi.Z80_out
I5_pchl = _idaapi.I5_pchl
I5_pop = _idaapi.I5_pop
Z80_pop = _idaapi.Z80_pop
I5_push = _idaapi.I5_push
Z80_push = _idaapi.Z80_push
I5_ret = _idaapi.I5_ret
I5_rnz = _idaapi.I5_rnz
I5_rz = _idaapi.I5_rz
I5_rnc = _idaapi.I5_rnc
I5_rc = _idaapi.I5_rc
I5_rpo = _idaapi.I5_rpo
I5_rpe = _idaapi.I5_rpe
I5_rp = _idaapi.I5_rp
I5_rm = _idaapi.I5_rm
I5_ral = _idaapi.I5_ral
I5_rlc = _idaapi.I5_rlc
I5_rar = _idaapi.I5_rar
I5_rrc = _idaapi.I5_rrc
I5_rst = _idaapi.I5_rst
I5_sbb = _idaapi.I5_sbb
I5_sbi = _idaapi.I5_sbi
I5_stc = _idaapi.I5_stc
I5_sphl = _idaapi.I5_sphl
I5_sta = _idaapi.I5_sta
I5_stax = _idaapi.I5_stax
I5_shld = _idaapi.I5_shld
I5_sui = _idaapi.I5_sui
I5_sub = _idaapi.I5_sub
Z80_sub = _idaapi.Z80_sub
I5_xra = _idaapi.I5_xra
I5_xri = _idaapi.I5_xri
I5_xchg = _idaapi.I5_xchg
I5_xthl = _idaapi.I5_xthl
I5_rim = _idaapi.I5_rim
I5_sim = _idaapi.I5_sim
Z80_and = _idaapi.Z80_and
Z80_bit = _idaapi.Z80_bit
Z80_call = _idaapi.Z80_call
Z80_ccf = _idaapi.Z80_ccf
Z80_cp = _idaapi.Z80_cp
Z80_cpd = _idaapi.Z80_cpd
Z80_cpdr = _idaapi.Z80_cpdr
Z80_cpi = _idaapi.Z80_cpi
Z80_cpir = _idaapi.Z80_cpir
Z80_cpl = _idaapi.Z80_cpl
Z80_dec = _idaapi.Z80_dec
Z80_djnz = _idaapi.Z80_djnz
Z80_ex = _idaapi.Z80_ex
Z80_exx = _idaapi.Z80_exx
Z80_halt = _idaapi.Z80_halt
Z80_im = _idaapi.Z80_im
Z80_inc = _idaapi.Z80_inc
Z80_ind = _idaapi.Z80_ind
Z80_indr = _idaapi.Z80_indr
Z80_ini = _idaapi.Z80_ini
Z80_inir = _idaapi.Z80_inir
Z80_jp = _idaapi.Z80_jp
Z80_jr = _idaapi.Z80_jr
Z80_ld = _idaapi.Z80_ld
Z80_ldd = _idaapi.Z80_ldd
Z80_lddr = _idaapi.Z80_lddr
Z80_ldi = _idaapi.Z80_ldi
Z80_ldir = _idaapi.Z80_ldir
Z80_neg = _idaapi.Z80_neg
Z80_or = _idaapi.Z80_or
Z80_otdr = _idaapi.Z80_otdr
Z80_otir = _idaapi.Z80_otir
Z80_outd = _idaapi.Z80_outd
Z80_outi = _idaapi.Z80_outi
Z80_res = _idaapi.Z80_res
Z80_ret = _idaapi.Z80_ret
Z80_reti = _idaapi.Z80_reti
Z80_retn = _idaapi.Z80_retn
Z80_rl = _idaapi.Z80_rl
Z80_rla = _idaapi.Z80_rla
Z80_rlc = _idaapi.Z80_rlc
Z80_rlca = _idaapi.Z80_rlca
Z80_rld = _idaapi.Z80_rld
Z80_rr = _idaapi.Z80_rr
Z80_rra = _idaapi.Z80_rra
Z80_rrc = _idaapi.Z80_rrc
Z80_rrca = _idaapi.Z80_rrca
Z80_rrd = _idaapi.Z80_rrd
Z80_scf = _idaapi.Z80_scf
Z80_sbc = _idaapi.Z80_sbc
Z80_set = _idaapi.Z80_set
Z80_sla = _idaapi.Z80_sla
Z80_sra = _idaapi.Z80_sra
Z80_srl = _idaapi.Z80_srl
Z80_xor = _idaapi.Z80_xor
Z80_inp = _idaapi.Z80_inp
Z80_outp = _idaapi.Z80_outp
Z80_srr = _idaapi.Z80_srr
HD_in0 = _idaapi.HD_in0
Z80_in0 = _idaapi.Z80_in0
HD_mlt = _idaapi.HD_mlt
Z80_mlt = _idaapi.Z80_mlt
HD_otim = _idaapi.HD_otim
Z80_otim = _idaapi.Z80_otim
HD_otimr = _idaapi.HD_otimr
Z80_otimr = _idaapi.Z80_otimr
HD_otdm = _idaapi.HD_otdm
Z80_otdm = _idaapi.Z80_otdm
HD_otdmr = _idaapi.HD_otdmr
Z80_otdmr = _idaapi.Z80_otdmr
HD_out0 = _idaapi.HD_out0
Z80_out0 = _idaapi.Z80_out0
HD_slp = _idaapi.HD_slp
Z80_slp = _idaapi.Z80_slp
HD_tst = _idaapi.HD_tst
Z80_tst = _idaapi.Z80_tst
HD_tstio = _idaapi.HD_tstio
Z80_tstio = _idaapi.Z80_tstio
A80_lbcd = _idaapi.A80_lbcd
A80_lded = _idaapi.A80_lded
A80_lspd = _idaapi.A80_lspd
A80_lixd = _idaapi.A80_lixd
A80_liyd = _idaapi.A80_liyd
A80_sbcd = _idaapi.A80_sbcd
A80_sded = _idaapi.A80_sded
A80_sspd = _idaapi.A80_sspd
A80_sixd = _idaapi.A80_sixd
A80_siyd = _idaapi.A80_siyd
A80_xtix = _idaapi.A80_xtix
A80_xtiy = _idaapi.A80_xtiy
A80_spix = _idaapi.A80_spix
A80_spiy = _idaapi.A80_spiy
A80_pcix = _idaapi.A80_pcix
A80_pciy = _idaapi.A80_pciy
A80_mvra = _idaapi.A80_mvra
A80_mvia = _idaapi.A80_mvia
A80_mvar = _idaapi.A80_mvar
A80_mvai = _idaapi.A80_mvai
A80_addix = _idaapi.A80_addix
A80_addiy = _idaapi.A80_addiy
A80_addc = _idaapi.A80_addc
A80_addcix = _idaapi.A80_addcix
A80_addciy = _idaapi.A80_addciy
A80_subc = _idaapi.A80_subc
A80_subcix = _idaapi.A80_subcix
A80_subciy = _idaapi.A80_subciy
A80_jrc = _idaapi.A80_jrc
A80_jrnc = _idaapi.A80_jrnc
A80_jrz = _idaapi.A80_jrz
A80_jrnz = _idaapi.A80_jrnz
A80_cmpi = _idaapi.A80_cmpi
A80_cmpd = _idaapi.A80_cmpd
A80_im0 = _idaapi.A80_im0
A80_im1 = _idaapi.A80_im1
A80_im2 = _idaapi.A80_im2
A80_otd = _idaapi.A80_otd
A80_oti = _idaapi.A80_oti
I5_dsub = _idaapi.I5_dsub
I5_arhl = _idaapi.I5_arhl
I5_rdel = _idaapi.I5_rdel
I5_ldhi = _idaapi.I5_ldhi
I5_ldsi = _idaapi.I5_ldsi
I5_shlx = _idaapi.I5_shlx
I5_lhlx = _idaapi.I5_lhlx
I5_rstv = _idaapi.I5_rstv
I5_jx5 = _idaapi.I5_jx5
I5_jnx5 = _idaapi.I5_jnx5
Z80_cplw = _idaapi.Z80_cplw
Z80_swap = _idaapi.Z80_swap
Z80_inw = _idaapi.Z80_inw
Z80_outw = _idaapi.Z80_outw
Z80_ldw = _idaapi.Z80_ldw
Z80_addw = _idaapi.Z80_addw
Z80_subw = _idaapi.Z80_subw
Z80_adcw = _idaapi.Z80_adcw
Z80_sbcw = _idaapi.Z80_sbcw
Z80_andw = _idaapi.Z80_andw
Z80_xorw = _idaapi.Z80_xorw
Z80_orw = _idaapi.Z80_orw
Z80_cpw = _idaapi.Z80_cpw
Z80_ddir = _idaapi.Z80_ddir
Z80_calr = _idaapi.Z80_calr
Z80_ldctl = _idaapi.Z80_ldctl
Z80_mtest = _idaapi.Z80_mtest
Z80_exxx = _idaapi.Z80_exxx
Z80_exxy = _idaapi.Z80_exxy
Z80_exall = _idaapi.Z80_exall
Z80_setc = _idaapi.Z80_setc
Z80_resc = _idaapi.Z80_resc
Z80_rlcw = _idaapi.Z80_rlcw
Z80_rrcw = _idaapi.Z80_rrcw
Z80_rlw = _idaapi.Z80_rlw
Z80_rrw = _idaapi.Z80_rrw
Z80_slaw = _idaapi.Z80_slaw
Z80_sraw = _idaapi.Z80_sraw
Z80_srlw = _idaapi.Z80_srlw
Z80_multw = _idaapi.Z80_multw
Z80_multuw = _idaapi.Z80_multuw
Z80_divuw = _idaapi.Z80_divuw
Z80_outaw = _idaapi.Z80_outaw
Z80_inaw = _idaapi.Z80_inaw
Z80_outa = _idaapi.Z80_outa
Z80_ina = _idaapi.Z80_ina
Z80_negw = _idaapi.Z80_negw
Z80_exts = _idaapi.Z80_exts
Z80_extsw = _idaapi.Z80_extsw
Z80_btest = _idaapi.Z80_btest
Z80_ldiw = _idaapi.Z80_ldiw
Z80_ldirw = _idaapi.Z80_ldirw
Z80_lddw = _idaapi.Z80_lddw
Z80_lddrw = _idaapi.Z80_lddrw
Z80_iniw = _idaapi.Z80_iniw
Z80_inirw = _idaapi.Z80_inirw
Z80_indw = _idaapi.Z80_indw
Z80_indrw = _idaapi.Z80_indrw
Z80_outiw = _idaapi.Z80_outiw
Z80_otirw = _idaapi.Z80_otirw
Z80_outdw = _idaapi.Z80_outdw
Z80_otdrw = _idaapi.Z80_otdrw
GB_ldh = _idaapi.GB_ldh
GB_stop = _idaapi.GB_stop
I5_last = _idaapi.I5_last
I860_null = _idaapi.I860_null
I860_adds = _idaapi.I860_adds
I860_addu = _idaapi.I860_addu
I860_and = _idaapi.I860_and
I860_andh = _idaapi.I860_andh
I860_andnot = _idaapi.I860_andnot
I860_andnoth = _idaapi.I860_andnoth
I860_bc = _idaapi.I860_bc
I860_bc_t = _idaapi.I860_bc_t
I860_bla = _idaapi.I860_bla
I860_bnc = _idaapi.I860_bnc
I860_bnc_t = _idaapi.I860_bnc_t
I860_br = _idaapi.I860_br
I860_bri = _idaapi.I860_bri
I860_bte = _idaapi.I860_bte
I860_btne = _idaapi.I860_btne
I860_call = _idaapi.I860_call
I860_calli = _idaapi.I860_calli
I860_fadd = _idaapi.I860_fadd
I860_faddp = _idaapi.I860_faddp
I860_faddz = _idaapi.I860_faddz
I860_famov = _idaapi.I860_famov
I860_fiadd = _idaapi.I860_fiadd
I860_fisub = _idaapi.I860_fisub
I860_fix = _idaapi.I860_fix
I860_fld = _idaapi.I860_fld
I860_flush = _idaapi.I860_flush
I860_fmlow_dd = _idaapi.I860_fmlow_dd
I860_fmul = _idaapi.I860_fmul
I860_form = _idaapi.I860_form
I860_frcp = _idaapi.I860_frcp
I860_frsqr = _idaapi.I860_frsqr
I860_fst = _idaapi.I860_fst
I860_fsub = _idaapi.I860_fsub
I860_ftrunc = _idaapi.I860_ftrunc
I860_fxfr = _idaapi.I860_fxfr
I860_fzchkl = _idaapi.I860_fzchkl
I860_fzchks = _idaapi.I860_fzchks
I860_introvr = _idaapi.I860_introvr
I860_ixfr = _idaapi.I860_ixfr
I860_ld_c = _idaapi.I860_ld_c
I860_ld = _idaapi.I860_ld
I860_ldint = _idaapi.I860_ldint
I860_ldio = _idaapi.I860_ldio
I860_lock = _idaapi.I860_lock
I860_or = _idaapi.I860_or
I860_orh = _idaapi.I860_orh
I860_pfadd = _idaapi.I860_pfadd
I860_pfaddp = _idaapi.I860_pfaddp
I860_pfaddz = _idaapi.I860_pfaddz
I860_pfamov = _idaapi.I860_pfamov
I860_pfeq = _idaapi.I860_pfeq
I860_pfgt = _idaapi.I860_pfgt
I860_pfiadd = _idaapi.I860_pfiadd
I860_pfisub = _idaapi.I860_pfisub
I860_pfix = _idaapi.I860_pfix
I860_pfld = _idaapi.I860_pfld
I860_pfle = _idaapi.I860_pfle
I860_pfmul = _idaapi.I860_pfmul
I860_pfmul3_dd = _idaapi.I860_pfmul3_dd
I860_pform = _idaapi.I860_pform
I860_pfsub = _idaapi.I860_pfsub
I860_pftrunc = _idaapi.I860_pftrunc
I860_pfzchkl = _idaapi.I860_pfzchkl
I860_pfzchks = _idaapi.I860_pfzchks
I860_pst_d = _idaapi.I860_pst_d
I860_scyc = _idaapi.I860_scyc
I860_shl = _idaapi.I860_shl
I860_shr = _idaapi.I860_shr
I860_shra = _idaapi.I860_shra
I860_shrd = _idaapi.I860_shrd
I860_st_c = _idaapi.I860_st_c
I860_st = _idaapi.I860_st
I860_stio = _idaapi.I860_stio
I860_subs = _idaapi.I860_subs
I860_subu = _idaapi.I860_subu
I860_trap = _idaapi.I860_trap
I860_unlock = _idaapi.I860_unlock
I860_xor = _idaapi.I860_xor
I860_xorh = _idaapi.I860_xorh
I860_r2p1 = _idaapi.I860_r2p1
I860_r2pt = _idaapi.I860_r2pt
I860_r2ap1 = _idaapi.I860_r2ap1
I860_r2apt = _idaapi.I860_r2apt
I860_i2p1 = _idaapi.I860_i2p1
I860_i2pt = _idaapi.I860_i2pt
I860_i2ap1 = _idaapi.I860_i2ap1
I860_i2apt = _idaapi.I860_i2apt
I860_rat1p2 = _idaapi.I860_rat1p2
I860_m12apm = _idaapi.I860_m12apm
I860_ra1p2 = _idaapi.I860_ra1p2
I860_m12ttpa = _idaapi.I860_m12ttpa
I860_iat1p2 = _idaapi.I860_iat1p2
I860_m12tpm = _idaapi.I860_m12tpm
I860_ia1p2 = _idaapi.I860_ia1p2
I860_m12tpa = _idaapi.I860_m12tpa
I860_r2s1 = _idaapi.I860_r2s1
I860_r2st = _idaapi.I860_r2st
I860_r2as1 = _idaapi.I860_r2as1
I860_r2ast = _idaapi.I860_r2ast
I860_i2s1 = _idaapi.I860_i2s1
I860_i2st = _idaapi.I860_i2st
I860_i2as1 = _idaapi.I860_i2as1
I860_i2ast = _idaapi.I860_i2ast
I860_rat1s2 = _idaapi.I860_rat1s2
I860_m12asm = _idaapi.I860_m12asm
I860_ra1s2 = _idaapi.I860_ra1s2
I860_m12ttsa = _idaapi.I860_m12ttsa
I860_iat1s2 = _idaapi.I860_iat1s2
I860_m12tsm = _idaapi.I860_m12tsm
I860_ia1s2 = _idaapi.I860_ia1s2
I860_m12tsa = _idaapi.I860_m12tsa
I860_mr2p1 = _idaapi.I860_mr2p1
I860_mr2pt = _idaapi.I860_mr2pt
I860_mr2mp1 = _idaapi.I860_mr2mp1
I860_mr2mpt = _idaapi.I860_mr2mpt
I860_mi2p1 = _idaapi.I860_mi2p1
I860_mi2pt = _idaapi.I860_mi2pt
I860_mi2mp1 = _idaapi.I860_mi2mp1
I860_mi2mpt = _idaapi.I860_mi2mpt
I860_mrmt1p2 = _idaapi.I860_mrmt1p2
I860_mm12mpm = _idaapi.I860_mm12mpm
I860_mrm1p2 = _idaapi.I860_mrm1p2
I860_mm12ttpm = _idaapi.I860_mm12ttpm
I860_mimt1p2 = _idaapi.I860_mimt1p2
I860_mm12tpm = _idaapi.I860_mm12tpm
I860_mim1p2 = _idaapi.I860_mim1p2
I860_mr2s1 = _idaapi.I860_mr2s1
I860_mr2st = _idaapi.I860_mr2st
I860_mr2ms1 = _idaapi.I860_mr2ms1
I860_mr2mst = _idaapi.I860_mr2mst
I860_mi2s1 = _idaapi.I860_mi2s1
I860_mi2st = _idaapi.I860_mi2st
I860_mi2ms1 = _idaapi.I860_mi2ms1
I860_mi2mst = _idaapi.I860_mi2mst
I860_mrmt1s2 = _idaapi.I860_mrmt1s2
I860_mm12msm = _idaapi.I860_mm12msm
I860_mrm1s2 = _idaapi.I860_mrm1s2
I860_mm12ttsm = _idaapi.I860_mm12ttsm
I860_mimt1s2 = _idaapi.I860_mimt1s2
I860_mm12tsm = _idaapi.I860_mm12tsm
I860_mim1s2 = _idaapi.I860_mim1s2
I860_last = _idaapi.I860_last
I51_null = _idaapi.I51_null
I51_acall = _idaapi.I51_acall
I51_add = _idaapi.I51_add
I51_addc = _idaapi.I51_addc
I51_ajmp = _idaapi.I51_ajmp
I51_anl = _idaapi.I51_anl
I51_cjne = _idaapi.I51_cjne
I51_clr = _idaapi.I51_clr
I51_cpl = _idaapi.I51_cpl
I51_da = _idaapi.I51_da
I51_dec = _idaapi.I51_dec
I51_div = _idaapi.I51_div
I51_djnz = _idaapi.I51_djnz
I51_inc = _idaapi.I51_inc
I51_jb = _idaapi.I51_jb
I51_jbc = _idaapi.I51_jbc
I51_jc = _idaapi.I51_jc
I51_jmp = _idaapi.I51_jmp
I51_jnb = _idaapi.I51_jnb
I51_jnc = _idaapi.I51_jnc
I51_jnz = _idaapi.I51_jnz
I51_jz = _idaapi.I51_jz
I51_lcall = _idaapi.I51_lcall
I51_ljmp = _idaapi.I51_ljmp
I51_mov = _idaapi.I51_mov
I51_movc = _idaapi.I51_movc
I51_movx = _idaapi.I51_movx
I51_mul = _idaapi.I51_mul
I51_nop = _idaapi.I51_nop
I51_orl = _idaapi.I51_orl
I51_pop = _idaapi.I51_pop
I51_push = _idaapi.I51_push
I51_ret = _idaapi.I51_ret
I51_reti = _idaapi.I51_reti
I51_rl = _idaapi.I51_rl
I51_rlc = _idaapi.I51_rlc
I51_rr = _idaapi.I51_rr
I51_rrc = _idaapi.I51_rrc
I51_setb = _idaapi.I51_setb
I51_sjmp = _idaapi.I51_sjmp
I51_subb = _idaapi.I51_subb
I51_swap = _idaapi.I51_swap
I51_xch = _idaapi.I51_xch
I51_xchd = _idaapi.I51_xchd
I51_xrl = _idaapi.I51_xrl
I51_jsle = _idaapi.I51_jsle
I51_jsg = _idaapi.I51_jsg
I51_jle = _idaapi.I51_jle
I51_jg = _idaapi.I51_jg
I51_jsl = _idaapi.I51_jsl
I51_jsge = _idaapi.I51_jsge
I51_je = _idaapi.I51_je
I51_jne = _idaapi.I51_jne
I51_trap = _idaapi.I51_trap
I51_ejmp = _idaapi.I51_ejmp
I51_ecall = _idaapi.I51_ecall
I51_eret = _idaapi.I51_eret
I51_movh = _idaapi.I51_movh
I51_movz = _idaapi.I51_movz
I51_movs = _idaapi.I51_movs
I51_srl = _idaapi.I51_srl
I51_sra = _idaapi.I51_sra
I51_sll = _idaapi.I51_sll
I51_sub = _idaapi.I51_sub
I51_cmp = _idaapi.I51_cmp
I51_last = _idaapi.I51_last
TMS_null = _idaapi.TMS_null
TMS_abs = _idaapi.TMS_abs
TMS_adcb = _idaapi.TMS_adcb
TMS_add = _idaapi.TMS_add
TMS_addb = _idaapi.TMS_addb
TMS_addc = _idaapi.TMS_addc
TMS_adds = _idaapi.TMS_adds
TMS_addt = _idaapi.TMS_addt
TMS_adrk = _idaapi.TMS_adrk
TMS_and = _idaapi.TMS_and
TMS_andb = _idaapi.TMS_andb
TMS_apac = _idaapi.TMS_apac
TMS_apl = _idaapi.TMS_apl
TMS_apl2 = _idaapi.TMS_apl2
TMS_b = _idaapi.TMS_b
TMS_bacc = _idaapi.TMS_bacc
TMS_baccd = _idaapi.TMS_baccd
TMS_banz = _idaapi.TMS_banz
TMS_banzd = _idaapi.TMS_banzd
TMS_bcnd = _idaapi.TMS_bcnd
TMS_bcndd = _idaapi.TMS_bcndd
TMS_bd = _idaapi.TMS_bd
TMS_bit = _idaapi.TMS_bit
TMS_bitt = _idaapi.TMS_bitt
TMS_bldd = _idaapi.TMS_bldd
TMS_bldp = _idaapi.TMS_bldp
TMS_blpd = _idaapi.TMS_blpd
TMS_bsar = _idaapi.TMS_bsar
TMS_cala = _idaapi.TMS_cala
TMS_calad = _idaapi.TMS_calad
TMS_call = _idaapi.TMS_call
TMS_calld = _idaapi.TMS_calld
TMS_cc = _idaapi.TMS_cc
TMS_ccd = _idaapi.TMS_ccd
TMS_clrc = _idaapi.TMS_clrc
TMS_cmpl = _idaapi.TMS_cmpl
TMS_cmpr = _idaapi.TMS_cmpr
TMS_cpl = _idaapi.TMS_cpl
TMS_cpl2 = _idaapi.TMS_cpl2
TMS_crgt = _idaapi.TMS_crgt
TMS_crlt = _idaapi.TMS_crlt
TMS_dmov = _idaapi.TMS_dmov
TMS_estop = _idaapi.TMS_estop
TMS_exar = _idaapi.TMS_exar
TMS_idle = _idaapi.TMS_idle
TMS_idle2 = _idaapi.TMS_idle2
TMS_in = _idaapi.TMS_in
TMS_intr = _idaapi.TMS_intr
TMS_lacb = _idaapi.TMS_lacb
TMS_lacc = _idaapi.TMS_lacc
TMS_lacl = _idaapi.TMS_lacl
TMS_lact = _idaapi.TMS_lact
TMS_lamm = _idaapi.TMS_lamm
TMS_lar = _idaapi.TMS_lar
TMS_ldp = _idaapi.TMS_ldp
TMS_lmmr = _idaapi.TMS_lmmr
TMS_lph = _idaapi.TMS_lph
TMS_lst = _idaapi.TMS_lst
TMS_lt = _idaapi.TMS_lt
TMS_lta = _idaapi.TMS_lta
TMS_ltd = _idaapi.TMS_ltd
TMS_ltp = _idaapi.TMS_ltp
TMS_lts = _idaapi.TMS_lts
TMS_mac = _idaapi.TMS_mac
TMS_macd = _idaapi.TMS_macd
TMS_madd = _idaapi.TMS_madd
TMS_mads = _idaapi.TMS_mads
TMS_mar = _idaapi.TMS_mar
TMS_mpy = _idaapi.TMS_mpy
TMS_mpya = _idaapi.TMS_mpya
TMS_mpys = _idaapi.TMS_mpys
TMS_mpyu = _idaapi.TMS_mpyu
TMS_neg = _idaapi.TMS_neg
TMS_nmi = _idaapi.TMS_nmi
TMS_nop = _idaapi.TMS_nop
TMS_norm = _idaapi.TMS_norm
TMS_opl = _idaapi.TMS_opl
TMS_opl2 = _idaapi.TMS_opl2
TMS_or = _idaapi.TMS_or
TMS_orb = _idaapi.TMS_orb
TMS_out = _idaapi.TMS_out
TMS_pac = _idaapi.TMS_pac
TMS_pop = _idaapi.TMS_pop
TMS_popd = _idaapi.TMS_popd
TMS_pshd = _idaapi.TMS_pshd
TMS_push = _idaapi.TMS_push
TMS_ret = _idaapi.TMS_ret
TMS_retc = _idaapi.TMS_retc
TMS_retcd = _idaapi.TMS_retcd
TMS_retd = _idaapi.TMS_retd
TMS_rete = _idaapi.TMS_rete
TMS_reti = _idaapi.TMS_reti
TMS_rol = _idaapi.TMS_rol
TMS_rolb = _idaapi.TMS_rolb
TMS_ror = _idaapi.TMS_ror
TMS_rorb = _idaapi.TMS_rorb
TMS_rpt = _idaapi.TMS_rpt
TMS_rptb = _idaapi.TMS_rptb
TMS_rptz = _idaapi.TMS_rptz
TMS_sacb = _idaapi.TMS_sacb
TMS_sach = _idaapi.TMS_sach
TMS_sacl = _idaapi.TMS_sacl
TMS_samm = _idaapi.TMS_samm
TMS_sar = _idaapi.TMS_sar
TMS_sath = _idaapi.TMS_sath
TMS_satl = _idaapi.TMS_satl
TMS_sbb = _idaapi.TMS_sbb
TMS_sbbb = _idaapi.TMS_sbbb
TMS_sbrk = _idaapi.TMS_sbrk
TMS_setc = _idaapi.TMS_setc
TMS_sfl = _idaapi.TMS_sfl
TMS_sflb = _idaapi.TMS_sflb
TMS_sfr = _idaapi.TMS_sfr
TMS_sfrb = _idaapi.TMS_sfrb
TMS_smmr = _idaapi.TMS_smmr
TMS_spac = _idaapi.TMS_spac
TMS_sph = _idaapi.TMS_sph
TMS_spl = _idaapi.TMS_spl
TMS_splk = _idaapi.TMS_splk
TMS_spm = _idaapi.TMS_spm
TMS_sqra = _idaapi.TMS_sqra
TMS_sqrs = _idaapi.TMS_sqrs
TMS_sst = _idaapi.TMS_sst
TMS_sub = _idaapi.TMS_sub
TMS_subb = _idaapi.TMS_subb
TMS_subc = _idaapi.TMS_subc
TMS_subs = _idaapi.TMS_subs
TMS_subt = _idaapi.TMS_subt
TMS_tblr = _idaapi.TMS_tblr
TMS_tblw = _idaapi.TMS_tblw
TMS_trap = _idaapi.TMS_trap
TMS_xc = _idaapi.TMS_xc
TMS_xor = _idaapi.TMS_xor
TMS_xorb = _idaapi.TMS_xorb
TMS_xpl = _idaapi.TMS_xpl
TMS_xpl2 = _idaapi.TMS_xpl2
TMS_zalr = _idaapi.TMS_zalr
TMS_zap = _idaapi.TMS_zap
TMS_zpr = _idaapi.TMS_zpr
TMS2_abs = _idaapi.TMS2_abs
TMS2_add = _idaapi.TMS2_add
TMS2_addc = _idaapi.TMS2_addc
TMS2_addh = _idaapi.TMS2_addh
TMS2_addk = _idaapi.TMS2_addk
TMS2_adds = _idaapi.TMS2_adds
TMS2_addt = _idaapi.TMS2_addt
TMS2_adlk = _idaapi.TMS2_adlk
TMS2_adrk = _idaapi.TMS2_adrk
TMS2_and = _idaapi.TMS2_and
TMS2_andk = _idaapi.TMS2_andk
TMS2_apac = _idaapi.TMS2_apac
TMS2_b = _idaapi.TMS2_b
TMS2_bacc = _idaapi.TMS2_bacc
TMS2_banz = _idaapi.TMS2_banz
TMS2_bbnz = _idaapi.TMS2_bbnz
TMS2_bbz = _idaapi.TMS2_bbz
TMS2_bc = _idaapi.TMS2_bc
TMS2_bgez = _idaapi.TMS2_bgez
TMS2_bgz = _idaapi.TMS2_bgz
TMS2_bioz = _idaapi.TMS2_bioz
TMS2_bit = _idaapi.TMS2_bit
TMS2_bitt = _idaapi.TMS2_bitt
TMS2_blez = _idaapi.TMS2_blez
TMS2_blkd = _idaapi.TMS2_blkd
TMS2_blkp = _idaapi.TMS2_blkp
TMS2_blz = _idaapi.TMS2_blz
TMS2_bnc = _idaapi.TMS2_bnc
TMS2_bnv = _idaapi.TMS2_bnv
TMS2_bnz = _idaapi.TMS2_bnz
TMS2_bv = _idaapi.TMS2_bv
TMS2_bz = _idaapi.TMS2_bz
TMS2_cala = _idaapi.TMS2_cala
TMS2_call = _idaapi.TMS2_call
TMS2_cmpl = _idaapi.TMS2_cmpl
TMS2_cmpr = _idaapi.TMS2_cmpr
TMS2_cnfd = _idaapi.TMS2_cnfd
TMS2_cnfp = _idaapi.TMS2_cnfp
TMS2_conf = _idaapi.TMS2_conf
TMS2_dint = _idaapi.TMS2_dint
TMS2_dmov = _idaapi.TMS2_dmov
TMS2_eint = _idaapi.TMS2_eint
TMS2_fort = _idaapi.TMS2_fort
TMS2_idle = _idaapi.TMS2_idle
TMS2_in = _idaapi.TMS2_in
TMS2_lac = _idaapi.TMS2_lac
TMS2_lack = _idaapi.TMS2_lack
TMS2_lact = _idaapi.TMS2_lact
TMS2_lalk = _idaapi.TMS2_lalk
TMS2_lar = _idaapi.TMS2_lar
TMS2_lark = _idaapi.TMS2_lark
TMS2_larp = _idaapi.TMS2_larp
TMS2_ldp = _idaapi.TMS2_ldp
TMS2_ldpk = _idaapi.TMS2_ldpk
TMS2_lph = _idaapi.TMS2_lph
TMS2_lrlk = _idaapi.TMS2_lrlk
TMS2_lst = _idaapi.TMS2_lst
TMS2_lst1 = _idaapi.TMS2_lst1
TMS2_lt = _idaapi.TMS2_lt
TMS2_lta = _idaapi.TMS2_lta
TMS2_ltd = _idaapi.TMS2_ltd
TMS2_ltp = _idaapi.TMS2_ltp
TMS2_lts = _idaapi.TMS2_lts
TMS2_mac = _idaapi.TMS2_mac
TMS2_macd = _idaapi.TMS2_macd
TMS2_mar = _idaapi.TMS2_mar
TMS2_mpy = _idaapi.TMS2_mpy
TMS2_mpya = _idaapi.TMS2_mpya
TMS2_mpyk = _idaapi.TMS2_mpyk
TMS2_mpys = _idaapi.TMS2_mpys
TMS2_mpyu = _idaapi.TMS2_mpyu
TMS2_neg = _idaapi.TMS2_neg
TMS2_nop = _idaapi.TMS2_nop
TMS2_norm = _idaapi.TMS2_norm
TMS2_or = _idaapi.TMS2_or
TMS2_ork = _idaapi.TMS2_ork
TMS2_out = _idaapi.TMS2_out
TMS2_pac = _idaapi.TMS2_pac
TMS2_pop = _idaapi.TMS2_pop
TMS2_popd = _idaapi.TMS2_popd
TMS2_pshd = _idaapi.TMS2_pshd
TMS2_push = _idaapi.TMS2_push
TMS2_rc = _idaapi.TMS2_rc
TMS2_ret = _idaapi.TMS2_ret
TMS2_rfsm = _idaapi.TMS2_rfsm
TMS2_rhm = _idaapi.TMS2_rhm
TMS2_rol = _idaapi.TMS2_rol
TMS2_ror = _idaapi.TMS2_ror
TMS2_rovm = _idaapi.TMS2_rovm
TMS2_rpt = _idaapi.TMS2_rpt
TMS2_rptk = _idaapi.TMS2_rptk
TMS2_rsxm = _idaapi.TMS2_rsxm
TMS2_rtc = _idaapi.TMS2_rtc
TMS2_rtxm = _idaapi.TMS2_rtxm
TMS2_rxf = _idaapi.TMS2_rxf
TMS2_sach = _idaapi.TMS2_sach
TMS2_sacl = _idaapi.TMS2_sacl
TMS2_sar = _idaapi.TMS2_sar
TMS2_sblk = _idaapi.TMS2_sblk
TMS2_sbrk = _idaapi.TMS2_sbrk
TMS2_sc = _idaapi.TMS2_sc
TMS2_sfl = _idaapi.TMS2_sfl
TMS2_sfr = _idaapi.TMS2_sfr
TMS2_sfsm = _idaapi.TMS2_sfsm
TMS2_shm = _idaapi.TMS2_shm
TMS2_sovm = _idaapi.TMS2_sovm
TMS2_spac = _idaapi.TMS2_spac
TMS2_sph = _idaapi.TMS2_sph
TMS2_spl = _idaapi.TMS2_spl
TMS2_spm = _idaapi.TMS2_spm
TMS2_sqra = _idaapi.TMS2_sqra
TMS2_sqrs = _idaapi.TMS2_sqrs
TMS2_sst = _idaapi.TMS2_sst
TMS2_sst1 = _idaapi.TMS2_sst1
TMS2_ssxm = _idaapi.TMS2_ssxm
TMS2_stc = _idaapi.TMS2_stc
TMS2_stxm = _idaapi.TMS2_stxm
TMS2_sub = _idaapi.TMS2_sub
TMS2_subb = _idaapi.TMS2_subb
TMS2_subc = _idaapi.TMS2_subc
TMS2_subh = _idaapi.TMS2_subh
TMS2_subk = _idaapi.TMS2_subk
TMS2_subs = _idaapi.TMS2_subs
TMS2_subt = _idaapi.TMS2_subt
TMS2_sxf = _idaapi.TMS2_sxf
TMS2_tblr = _idaapi.TMS2_tblr
TMS2_tblw = _idaapi.TMS2_tblw
TMS2_trap = _idaapi.TMS2_trap
TMS2_xor = _idaapi.TMS2_xor
TMS2_xork = _idaapi.TMS2_xork
TMS2_zac = _idaapi.TMS2_zac
TMS2_zalh = _idaapi.TMS2_zalh
TMS2_zalr = _idaapi.TMS2_zalr
TMS2_zals = _idaapi.TMS2_zals
TMS_last = _idaapi.TMS_last
M65_null = _idaapi.M65_null
M65_adc = _idaapi.M65_adc
M65_anc = _idaapi.M65_anc
M65_and = _idaapi.M65_and
M65_ane = _idaapi.M65_ane
M65_arr = _idaapi.M65_arr
M65_asl = _idaapi.M65_asl
M65_asr = _idaapi.M65_asr
M65_bcc = _idaapi.M65_bcc
M65_bcs = _idaapi.M65_bcs
M65_beq = _idaapi.M65_beq
M65_bit = _idaapi.M65_bit
M65_bmi = _idaapi.M65_bmi
M65_bne = _idaapi.M65_bne
M65_bpl = _idaapi.M65_bpl
M65_brk = _idaapi.M65_brk
M65_bvc = _idaapi.M65_bvc
M65_bvs = _idaapi.M65_bvs
M65_clc = _idaapi.M65_clc
M65_cld = _idaapi.M65_cld
M65_cli = _idaapi.M65_cli
M65_clv = _idaapi.M65_clv
M65_cmp = _idaapi.M65_cmp
M65_cpx = _idaapi.M65_cpx
M65_cpy = _idaapi.M65_cpy
M65_dcp = _idaapi.M65_dcp
M65_dec = _idaapi.M65_dec
M65_dex = _idaapi.M65_dex
M65_dey = _idaapi.M65_dey
M65_eor = _idaapi.M65_eor
M65_inc = _idaapi.M65_inc
M65_inx = _idaapi.M65_inx
M65_iny = _idaapi.M65_iny
M65_isb = _idaapi.M65_isb
M65_jmp = _idaapi.M65_jmp
M65_jmpi = _idaapi.M65_jmpi
M65_jsr = _idaapi.M65_jsr
M65_lae = _idaapi.M65_lae
M65_lax = _idaapi.M65_lax
M65_lda = _idaapi.M65_lda
M65_ldx = _idaapi.M65_ldx
M65_ldy = _idaapi.M65_ldy
M65_lsr = _idaapi.M65_lsr
M65_lxa = _idaapi.M65_lxa
M65_nop = _idaapi.M65_nop
M65_ora = _idaapi.M65_ora
M65_pha = _idaapi.M65_pha
M65_php = _idaapi.M65_php
M65_pla = _idaapi.M65_pla
M65_plp = _idaapi.M65_plp
M65_rla = _idaapi.M65_rla
M65_rol = _idaapi.M65_rol
M65_ror = _idaapi.M65_ror
M65_rra = _idaapi.M65_rra
M65_rti = _idaapi.M65_rti
M65_rts = _idaapi.M65_rts
M65_sax = _idaapi.M65_sax
M65_sbc = _idaapi.M65_sbc
M65_sbx = _idaapi.M65_sbx
M65_sec = _idaapi.M65_sec
M65_sed = _idaapi.M65_sed
M65_sei = _idaapi.M65_sei
M65_sha = _idaapi.M65_sha
M65_shs = _idaapi.M65_shs
M65_shx = _idaapi.M65_shx
M65_shy = _idaapi.M65_shy
M65_slo = _idaapi.M65_slo
M65_sre = _idaapi.M65_sre
M65_sta = _idaapi.M65_sta
M65_stx = _idaapi.M65_stx
M65_sty = _idaapi.M65_sty
M65_tax = _idaapi.M65_tax
M65_tay = _idaapi.M65_tay
M65_tsx = _idaapi.M65_tsx
M65_txa = _idaapi.M65_txa
M65_txs = _idaapi.M65_txs
M65_tya = _idaapi.M65_tya
M65_bbr0 = _idaapi.M65_bbr0
M65_bbr1 = _idaapi.M65_bbr1
M65_bbr2 = _idaapi.M65_bbr2
M65_bbr3 = _idaapi.M65_bbr3
M65_bbr4 = _idaapi.M65_bbr4
M65_bbr5 = _idaapi.M65_bbr5
M65_bbr6 = _idaapi.M65_bbr6
M65_bbr7 = _idaapi.M65_bbr7
M65_bbs0 = _idaapi.M65_bbs0
M65_bbs1 = _idaapi.M65_bbs1
M65_bbs2 = _idaapi.M65_bbs2
M65_bbs3 = _idaapi.M65_bbs3
M65_bbs4 = _idaapi.M65_bbs4
M65_bbs5 = _idaapi.M65_bbs5
M65_bbs6 = _idaapi.M65_bbs6
M65_bbs7 = _idaapi.M65_bbs7
M65_rmb0 = _idaapi.M65_rmb0
M65_rmb1 = _idaapi.M65_rmb1
M65_rmb2 = _idaapi.M65_rmb2
M65_rmb3 = _idaapi.M65_rmb3
M65_rmb4 = _idaapi.M65_rmb4
M65_rmb5 = _idaapi.M65_rmb5
M65_rmb6 = _idaapi.M65_rmb6
M65_rmb7 = _idaapi.M65_rmb7
M65_smb0 = _idaapi.M65_smb0
M65_smb1 = _idaapi.M65_smb1
M65_smb2 = _idaapi.M65_smb2
M65_smb3 = _idaapi.M65_smb3
M65_smb4 = _idaapi.M65_smb4
M65_smb5 = _idaapi.M65_smb5
M65_smb6 = _idaapi.M65_smb6
M65_smb7 = _idaapi.M65_smb7
M65_stz = _idaapi.M65_stz
M65_tsb = _idaapi.M65_tsb
M65_trb = _idaapi.M65_trb
M65_phy = _idaapi.M65_phy
M65_ply = _idaapi.M65_ply
M65_phx = _idaapi.M65_phx
M65_plx = _idaapi.M65_plx
M65_bra = _idaapi.M65_bra
M65_last = _idaapi.M65_last
pdp_null = _idaapi.pdp_null
pdp_halt = _idaapi.pdp_halt
pdp_wait = _idaapi.pdp_wait
pdp_rti = _idaapi.pdp_rti
pdp_bpt = _idaapi.pdp_bpt
pdp_iot = _idaapi.pdp_iot
pdp_reset = _idaapi.pdp_reset
pdp_rtt = _idaapi.pdp_rtt
pdp_mfpt = _idaapi.pdp_mfpt
pdp_jmp = _idaapi.pdp_jmp
pdp_rts = _idaapi.pdp_rts
pdp_spl = _idaapi.pdp_spl
pdp_nop = _idaapi.pdp_nop
pdp_clc = _idaapi.pdp_clc
pdp_clv = _idaapi.pdp_clv
pdp_clz = _idaapi.pdp_clz
pdp_cln = _idaapi.pdp_cln
pdp_ccc = _idaapi.pdp_ccc
pdp_sec = _idaapi.pdp_sec
pdp_sev = _idaapi.pdp_sev
pdp_sez = _idaapi.pdp_sez
pdp_sen = _idaapi.pdp_sen
pdp_scc = _idaapi.pdp_scc
pdp_swab = _idaapi.pdp_swab
pdp_br = _idaapi.pdp_br
pdp_bne = _idaapi.pdp_bne
pdp_beq = _idaapi.pdp_beq
pdp_bge = _idaapi.pdp_bge
pdp_blt = _idaapi.pdp_blt
pdp_bgt = _idaapi.pdp_bgt
pdp_ble = _idaapi.pdp_ble
pdp_jsr = _idaapi.pdp_jsr
pdp_clr = _idaapi.pdp_clr
pdp_com = _idaapi.pdp_com
pdp_inc = _idaapi.pdp_inc
pdp_dec = _idaapi.pdp_dec
pdp_neg = _idaapi.pdp_neg
pdp_adc = _idaapi.pdp_adc
pdp_sbc = _idaapi.pdp_sbc
pdp_tst = _idaapi.pdp_tst
pdp_ror = _idaapi.pdp_ror
pdp_rol = _idaapi.pdp_rol
pdp_asr = _idaapi.pdp_asr
pdp_asl = _idaapi.pdp_asl
pdp_mark = _idaapi.pdp_mark
pdp_mfpi = _idaapi.pdp_mfpi
pdp_mtpi = _idaapi.pdp_mtpi
pdp_sxt = _idaapi.pdp_sxt
pdp_mov = _idaapi.pdp_mov
pdp_cmp = _idaapi.pdp_cmp
pdp_bit = _idaapi.pdp_bit
pdp_bic = _idaapi.pdp_bic
pdp_bis = _idaapi.pdp_bis
pdp_add = _idaapi.pdp_add
pdp_sub = _idaapi.pdp_sub
pdp_mul = _idaapi.pdp_mul
pdp_div = _idaapi.pdp_div
pdp_ash = _idaapi.pdp_ash
pdp_ashc = _idaapi.pdp_ashc
pdp_xor = _idaapi.pdp_xor
pdp_fadd = _idaapi.pdp_fadd
pdp_fsub = _idaapi.pdp_fsub
pdp_fmul = _idaapi.pdp_fmul
pdp_fdiv = _idaapi.pdp_fdiv
pdp_sob = _idaapi.pdp_sob
pdp_bpl = _idaapi.pdp_bpl
pdp_bmi = _idaapi.pdp_bmi
pdp_bhi = _idaapi.pdp_bhi
pdp_blos = _idaapi.pdp_blos
pdp_bvc = _idaapi.pdp_bvc
pdp_bvs = _idaapi.pdp_bvs
pdp_bcc = _idaapi.pdp_bcc
pdp_bcs = _idaapi.pdp_bcs
pdp_emt = _idaapi.pdp_emt
pdp_trap = _idaapi.pdp_trap
pdp_mtps = _idaapi.pdp_mtps
pdp_mfpd = _idaapi.pdp_mfpd
pdp_mtpd = _idaapi.pdp_mtpd
pdp_mfps = _idaapi.pdp_mfps
pdp_cfcc = _idaapi.pdp_cfcc
pdp_setf = _idaapi.pdp_setf
pdp_seti = _idaapi.pdp_seti
pdp_setd = _idaapi.pdp_setd
pdp_setl = _idaapi.pdp_setl
pdp_ldfps = _idaapi.pdp_ldfps
pdp_stfps = _idaapi.pdp_stfps
pdp_stst = _idaapi.pdp_stst
pdp_clrd = _idaapi.pdp_clrd
pdp_tstd = _idaapi.pdp_tstd
pdp_absd = _idaapi.pdp_absd
pdp_negd = _idaapi.pdp_negd
pdp_muld = _idaapi.pdp_muld
pdp_modd = _idaapi.pdp_modd
pdp_addd = _idaapi.pdp_addd
pdp_ldd = _idaapi.pdp_ldd
pdp_subd = _idaapi.pdp_subd
pdp_cmpd = _idaapi.pdp_cmpd
pdp_std = _idaapi.pdp_std
pdp_divd = _idaapi.pdp_divd
pdp_stexp = _idaapi.pdp_stexp
pdp_stcdi = _idaapi.pdp_stcdi
pdp_stcdf = _idaapi.pdp_stcdf
pdp_ldexp = _idaapi.pdp_ldexp
pdp_ldcif = _idaapi.pdp_ldcif
pdp_ldcfd = _idaapi.pdp_ldcfd
pdp_call = _idaapi.pdp_call
pdp_return = _idaapi.pdp_return
pdp_compcc = _idaapi.pdp_compcc
pdp_last = _idaapi.pdp_last
mc_null = _idaapi.mc_null
mc_abcd = _idaapi.mc_abcd
mc_add = _idaapi.mc_add
mc_adda = _idaapi.mc_adda
mc_addi = _idaapi.mc_addi
mc_addq = _idaapi.mc_addq
mc_addx = _idaapi.mc_addx
mc_and = _idaapi.mc_and
mc_andi = _idaapi.mc_andi
mc_asl = _idaapi.mc_asl
mc_asr = _idaapi.mc_asr
mc_b = _idaapi.mc_b
mc_bchg = _idaapi.mc_bchg
mc_bclr = _idaapi.mc_bclr
mc_bftst = _idaapi.mc_bftst
mc_bfchg = _idaapi.mc_bfchg
mc_bfclr = _idaapi.mc_bfclr
mc_bfset = _idaapi.mc_bfset
mc_bfextu = _idaapi.mc_bfextu
mc_bfexts = _idaapi.mc_bfexts
mc_bfffo = _idaapi.mc_bfffo
mc_bfins = _idaapi.mc_bfins
mc_bgnd = _idaapi.mc_bgnd
mc_bkpt = _idaapi.mc_bkpt
mc_bra = _idaapi.mc_bra
mc_bset = _idaapi.mc_bset
mc_bsr = _idaapi.mc_bsr
mc_btst = _idaapi.mc_btst
mc_callm = _idaapi.mc_callm
mc_cas = _idaapi.mc_cas
mc_cas2 = _idaapi.mc_cas2
mc_chk = _idaapi.mc_chk
mc_chk2 = _idaapi.mc_chk2
mc_cinv = _idaapi.mc_cinv
mc_clr = _idaapi.mc_clr
mc_cmp = _idaapi.mc_cmp
mc_cmp2 = _idaapi.mc_cmp2
mc_cmpa = _idaapi.mc_cmpa
mc_cmpi = _idaapi.mc_cmpi
mc_cmpm = _idaapi.mc_cmpm
mc_cpush = _idaapi.mc_cpush
mc_db = _idaapi.mc_db
mc_divs = _idaapi.mc_divs
mc_divsl = _idaapi.mc_divsl
mc_divu = _idaapi.mc_divu
mc_divul = _idaapi.mc_divul
mc_eor = _idaapi.mc_eor
mc_eori = _idaapi.mc_eori
mc_exg = _idaapi.mc_exg
mc_ext = _idaapi.mc_ext
mc_extb = _idaapi.mc_extb
mc_fabs = _idaapi.mc_fabs
mc_facos = _idaapi.mc_facos
mc_fadd = _idaapi.mc_fadd
mc_fasin = _idaapi.mc_fasin
mc_fatan = _idaapi.mc_fatan
mc_fatanh = _idaapi.mc_fatanh
mc_fb = _idaapi.mc_fb
mc_fcmp = _idaapi.mc_fcmp
mc_fcos = _idaapi.mc_fcos
mc_fcosh = _idaapi.mc_fcosh
mc_fdabs = _idaapi.mc_fdabs
mc_fdadd = _idaapi.mc_fdadd
mc_fdb = _idaapi.mc_fdb
mc_fddiv = _idaapi.mc_fddiv
mc_fdiv = _idaapi.mc_fdiv
mc_fdmove = _idaapi.mc_fdmove
mc_fdmul = _idaapi.mc_fdmul
mc_fdneg = _idaapi.mc_fdneg
mc_fdsqrt = _idaapi.mc_fdsqrt
mc_fdsub = _idaapi.mc_fdsub
mc_fetox = _idaapi.mc_fetox
mc_fetoxm1 = _idaapi.mc_fetoxm1
mc_fgetexp = _idaapi.mc_fgetexp
mc_fgetman = _idaapi.mc_fgetman
mc_fint = _idaapi.mc_fint
mc_fintrz = _idaapi.mc_fintrz
mc_flog2 = _idaapi.mc_flog2
mc_flog10 = _idaapi.mc_flog10
mc_flogn = _idaapi.mc_flogn
mc_flognp1 = _idaapi.mc_flognp1
mc_fmod = _idaapi.mc_fmod
mc_fmove = _idaapi.mc_fmove
mc_fmovecr = _idaapi.mc_fmovecr
mc_fmovem = _idaapi.mc_fmovem
mc_fmul = _idaapi.mc_fmul
mc_fneg = _idaapi.mc_fneg
mc_fnop = _idaapi.mc_fnop
mc_frem = _idaapi.mc_frem
mc_frestore = _idaapi.mc_frestore
mc_fs = _idaapi.mc_fs
mc_fsabs = _idaapi.mc_fsabs
mc_fsadd = _idaapi.mc_fsadd
mc_fsave = _idaapi.mc_fsave
mc_fscale = _idaapi.mc_fscale
mc_fsdiv = _idaapi.mc_fsdiv
mc_fsgldiv = _idaapi.mc_fsgldiv
mc_fsglmul = _idaapi.mc_fsglmul
mc_fsin = _idaapi.mc_fsin
mc_fsincos = _idaapi.mc_fsincos
mc_fsinh = _idaapi.mc_fsinh
mc_fsmove = _idaapi.mc_fsmove
mc_fsmul = _idaapi.mc_fsmul
mc_fsneg = _idaapi.mc_fsneg
mc_fsqrt = _idaapi.mc_fsqrt
mc_fssqrt = _idaapi.mc_fssqrt
mc_fssub = _idaapi.mc_fssub
mc_fsub = _idaapi.mc_fsub
mc_ftan = _idaapi.mc_ftan
mc_ftanh = _idaapi.mc_ftanh
mc_ftentox = _idaapi.mc_ftentox
mc_ftrap = _idaapi.mc_ftrap
mc_ftst = _idaapi.mc_ftst
mc_ftwotox = _idaapi.mc_ftwotox
mc_halt = _idaapi.mc_halt
mc_illegal = _idaapi.mc_illegal
mc_jmp = _idaapi.mc_jmp
mc_jsr = _idaapi.mc_jsr
mc_lea = _idaapi.mc_lea
mc_link = _idaapi.mc_link
mc_lpstop = _idaapi.mc_lpstop
mc_lsl = _idaapi.mc_lsl
mc_lsr = _idaapi.mc_lsr
mc_mac = _idaapi.mc_mac
mc_macl = _idaapi.mc_macl
mc_move = _idaapi.mc_move
mc_move16 = _idaapi.mc_move16
mc_movea = _idaapi.mc_movea
mc_movec = _idaapi.mc_movec
mc_movem = _idaapi.mc_movem
mc_movep = _idaapi.mc_movep
mc_moveq = _idaapi.mc_moveq
mc_moves = _idaapi.mc_moves
mc_msac = _idaapi.mc_msac
mc_msacl = _idaapi.mc_msacl
mc_muls = _idaapi.mc_muls
mc_mulu = _idaapi.mc_mulu
mc_nbcd = _idaapi.mc_nbcd
mc_neg = _idaapi.mc_neg
mc_negx = _idaapi.mc_negx
mc_nop = _idaapi.mc_nop
mc_not = _idaapi.mc_not
mc_or = _idaapi.mc_or
mc_ori = _idaapi.mc_ori
mc_pack = _idaapi.mc_pack
mc_pea = _idaapi.mc_pea
mc_pb = _idaapi.mc_pb
mc_pdb = _idaapi.mc_pdb
mc_pflush = _idaapi.mc_pflush
mc_pflushr = _idaapi.mc_pflushr
mc_ploadr = _idaapi.mc_ploadr
mc_ploadw = _idaapi.mc_ploadw
mc_pmove = _idaapi.mc_pmove
mc_prestore = _idaapi.mc_prestore
mc_psave = _idaapi.mc_psave
mc_ps = _idaapi.mc_ps
mc_ptestr = _idaapi.mc_ptestr
mc_ptestw = _idaapi.mc_ptestw
mc_ptrap = _idaapi.mc_ptrap
mc_pulse = _idaapi.mc_pulse
mc_pvalid = _idaapi.mc_pvalid
mc_rol = _idaapi.mc_rol
mc_ror = _idaapi.mc_ror
mc_roxl = _idaapi.mc_roxl
mc_roxr = _idaapi.mc_roxr
mc_reset = _idaapi.mc_reset
mc_rtd = _idaapi.mc_rtd
mc_rte = _idaapi.mc_rte
mc_rtm = _idaapi.mc_rtm
mc_rtr = _idaapi.mc_rtr
mc_rts = _idaapi.mc_rts
mc_sbcd = _idaapi.mc_sbcd
mc_s = _idaapi.mc_s
mc_stop = _idaapi.mc_stop
mc_sub = _idaapi.mc_sub
mc_suba = _idaapi.mc_suba
mc_subi = _idaapi.mc_subi
mc_subq = _idaapi.mc_subq
mc_subx = _idaapi.mc_subx
mc_swap = _idaapi.mc_swap
mc_tas = _idaapi.mc_tas
mc_tbl = _idaapi.mc_tbl
mc_trap = _idaapi.mc_trap
mc_trapv = _idaapi.mc_trapv
mc_tst = _idaapi.mc_tst
mc_unlk = _idaapi.mc_unlk
mc_unpk = _idaapi.mc_unpk
mc_wddata = _idaapi.mc_wddata
mc_wdebug = _idaapi.mc_wdebug
mc_atrap = _idaapi.mc_atrap
mc_last = _idaapi.mc_last
mc8_null = _idaapi.mc8_null
mc8_aba = _idaapi.mc8_aba
mc8_ab = _idaapi.mc8_ab
mc8_adc = _idaapi.mc8_adc
mc8_add = _idaapi.mc8_add
mc8_addd = _idaapi.mc8_addd
mc8_ais = _idaapi.mc8_ais
mc8_aix = _idaapi.mc8_aix
mc8_and = _idaapi.mc8_and
mc8_andcc = _idaapi.mc8_andcc
mc8_asr = _idaapi.mc8_asr
mc8_bcc = _idaapi.mc8_bcc
mc8_bclr = _idaapi.mc8_bclr
mc8_bcs = _idaapi.mc8_bcs
mc8_beq = _idaapi.mc8_beq
mc8_bge = _idaapi.mc8_bge
mc8_bgt = _idaapi.mc8_bgt
mc8_bhcc = _idaapi.mc8_bhcc
mc8_bhcs = _idaapi.mc8_bhcs
mc8_bhi = _idaapi.mc8_bhi
mc8_bhs = _idaapi.mc8_bhs
mc8_bih = _idaapi.mc8_bih
mc8_bil = _idaapi.mc8_bil
mc8_bit = _idaapi.mc8_bit
mc8_ble = _idaapi.mc8_ble
mc8_blo = _idaapi.mc8_blo
mc8_bls = _idaapi.mc8_bls
mc8_blt = _idaapi.mc8_blt
mc8_bmc = _idaapi.mc8_bmc
mc8_bmi = _idaapi.mc8_bmi
mc8_bms = _idaapi.mc8_bms
mc8_bne = _idaapi.mc8_bne
mc8_bpl = _idaapi.mc8_bpl
mc8_bra = _idaapi.mc8_bra
mc8_brclr = _idaapi.mc8_brclr
mc8_brn = _idaapi.mc8_brn
mc8_brset = _idaapi.mc8_brset
mc8_bset = _idaapi.mc8_bset
mc8_bsr = _idaapi.mc8_bsr
mc8_bvc = _idaapi.mc8_bvc
mc8_bvs = _idaapi.mc8_bvs
mc8_cba = _idaapi.mc8_cba
mc8_cbeq = _idaapi.mc8_cbeq
mc8_clc = _idaapi.mc8_clc
mc8_cli = _idaapi.mc8_cli
mc8_clr = _idaapi.mc8_clr
mc8_clv = _idaapi.mc8_clv
mc8_cmp = _idaapi.mc8_cmp
mc8_com = _idaapi.mc8_com
mc8_cp = _idaapi.mc8_cp
mc8_cpd = _idaapi.mc8_cpd
mc8_cphx = _idaapi.mc8_cphx
mc8_cpx = _idaapi.mc8_cpx
mc8_cwai = _idaapi.mc8_cwai
mc8_daa = _idaapi.mc8_daa
mc8_dbnz = _idaapi.mc8_dbnz
mc8_de = _idaapi.mc8_de
mc8_dec = _idaapi.mc8_dec
mc8_des = _idaapi.mc8_des
mc8_div = _idaapi.mc8_div
mc8_eor = _idaapi.mc8_eor
mc8_exg = _idaapi.mc8_exg
mc8_fdiv = _idaapi.mc8_fdiv
mc8_idiv = _idaapi.mc8_idiv
mc8_in = _idaapi.mc8_in
mc8_inc = _idaapi.mc8_inc
mc8_ins = _idaapi.mc8_ins
mc8_jmp = _idaapi.mc8_jmp
mc8_jsr = _idaapi.mc8_jsr
mc8_ld = _idaapi.mc8_ld
mc8_lda = _idaapi.mc8_lda
mc8_ldd = _idaapi.mc8_ldd
mc8_ldhx = _idaapi.mc8_ldhx
mc8_lds = _idaapi.mc8_lds
mc8_ldx = _idaapi.mc8_ldx
mc8_lea = _idaapi.mc8_lea
mc8_lsl = _idaapi.mc8_lsl
mc8_lsld = _idaapi.mc8_lsld
mc8_lsr = _idaapi.mc8_lsr
mc8_lsrd = _idaapi.mc8_lsrd
mc8_mov = _idaapi.mc8_mov
mc8_mul = _idaapi.mc8_mul
mc8_neg = _idaapi.mc8_neg
mc8_nop = _idaapi.mc8_nop
mc8_nsa = _idaapi.mc8_nsa
mc8_ora = _idaapi.mc8_ora
mc8_orcc = _idaapi.mc8_orcc
mc8_psh = _idaapi.mc8_psh
mc8_psha = _idaapi.mc8_psha
mc8_pshb = _idaapi.mc8_pshb
mc8_pshh = _idaapi.mc8_pshh
mc8_pshx = _idaapi.mc8_pshx
mc8_pul = _idaapi.mc8_pul
mc8_pula = _idaapi.mc8_pula
mc8_pulb = _idaapi.mc8_pulb
mc8_pulh = _idaapi.mc8_pulh
mc8_pulx = _idaapi.mc8_pulx
mc8_rol = _idaapi.mc8_rol
mc8_ror = _idaapi.mc8_ror
mc8_rsp = _idaapi.mc8_rsp
mc8_rti = _idaapi.mc8_rti
mc8_rts = _idaapi.mc8_rts
mc8_sba = _idaapi.mc8_sba
mc8_sbc = _idaapi.mc8_sbc
mc8_sec = _idaapi.mc8_sec
mc8_sei = _idaapi.mc8_sei
mc8_sev = _idaapi.mc8_sev
mc8_sex = _idaapi.mc8_sex
mc8_slp = _idaapi.mc8_slp
mc8_st = _idaapi.mc8_st
mc8_sta = _idaapi.mc8_sta
mc8_std = _idaapi.mc8_std
mc8_sthx = _idaapi.mc8_sthx
mc8_stop = _idaapi.mc8_stop
mc8_sts = _idaapi.mc8_sts
mc8_stx = _idaapi.mc8_stx
mc8_sub = _idaapi.mc8_sub
mc8_subd = _idaapi.mc8_subd
mc8_swi = _idaapi.mc8_swi
mc8_sync = _idaapi.mc8_sync
mc8_tab = _idaapi.mc8_tab
mc8_tap = _idaapi.mc8_tap
mc8_tax = _idaapi.mc8_tax
mc8_tba = _idaapi.mc8_tba
mc8_test = _idaapi.mc8_test
mc8_tfr = _idaapi.mc8_tfr
mc8_tpa = _idaapi.mc8_tpa
mc8_ts = _idaapi.mc8_ts
mc8_tst = _idaapi.mc8_tst
mc8_tsx = _idaapi.mc8_tsx
mc8_txa = _idaapi.mc8_txa
mc8_txs = _idaapi.mc8_txs
mc8_tys = _idaapi.mc8_tys
mc8_wai = _idaapi.mc8_wai
mc8_wait = _idaapi.mc8_wait
mc8_xgd = _idaapi.mc8_xgd
mc8_1 = _idaapi.mc8_1
mc8_2 = _idaapi.mc8_2
mc8_os9 = _idaapi.mc8_os9
mc8_aim = _idaapi.mc8_aim
mc8_oim = _idaapi.mc8_oim
mc8_eim = _idaapi.mc8_eim
mc8_tim = _idaapi.mc8_tim
mc8_last = _idaapi.mc8_last
j_nop = _idaapi.j_nop
j_aconst_null = _idaapi.j_aconst_null
j_iconst_m1 = _idaapi.j_iconst_m1
j_iconst_0 = _idaapi.j_iconst_0
j_iconst_1 = _idaapi.j_iconst_1
j_iconst_2 = _idaapi.j_iconst_2
j_iconst_3 = _idaapi.j_iconst_3
j_iconst_4 = _idaapi.j_iconst_4
j_iconst_5 = _idaapi.j_iconst_5
j_lconst_0 = _idaapi.j_lconst_0
j_lconst_1 = _idaapi.j_lconst_1
j_fconst_0 = _idaapi.j_fconst_0
j_fconst_1 = _idaapi.j_fconst_1
j_fconst_2 = _idaapi.j_fconst_2
j_dconst_0 = _idaapi.j_dconst_0
j_dconst_1 = _idaapi.j_dconst_1
j_bipush = _idaapi.j_bipush
j_sipush = _idaapi.j_sipush
j_ldc = _idaapi.j_ldc
j_ldcw = _idaapi.j_ldcw
j_ldc2w = _idaapi.j_ldc2w
j_iload = _idaapi.j_iload
j_lload = _idaapi.j_lload
j_fload = _idaapi.j_fload
j_dload = _idaapi.j_dload
j_aload = _idaapi.j_aload
j_iload_0 = _idaapi.j_iload_0
j_iload_1 = _idaapi.j_iload_1
j_iload_2 = _idaapi.j_iload_2
j_iload_3 = _idaapi.j_iload_3
j_lload_0 = _idaapi.j_lload_0
j_lload_1 = _idaapi.j_lload_1
j_lload_2 = _idaapi.j_lload_2
j_lload_3 = _idaapi.j_lload_3
j_fload_0 = _idaapi.j_fload_0
j_fload_1 = _idaapi.j_fload_1
j_fload_2 = _idaapi.j_fload_2
j_fload_3 = _idaapi.j_fload_3
j_dload_0 = _idaapi.j_dload_0
j_dload_1 = _idaapi.j_dload_1
j_dload_2 = _idaapi.j_dload_2
j_dload_3 = _idaapi.j_dload_3
j_aload_0 = _idaapi.j_aload_0
j_aload_1 = _idaapi.j_aload_1
j_aload_2 = _idaapi.j_aload_2
j_aload_3 = _idaapi.j_aload_3
j_iaload = _idaapi.j_iaload
j_laload = _idaapi.j_laload
j_faload = _idaapi.j_faload
j_daload = _idaapi.j_daload
j_aaload = _idaapi.j_aaload
j_baload = _idaapi.j_baload
j_caload = _idaapi.j_caload
j_saload = _idaapi.j_saload
j_istore = _idaapi.j_istore
j_lstore = _idaapi.j_lstore
j_fstore = _idaapi.j_fstore
j_dstore = _idaapi.j_dstore
j_astore = _idaapi.j_astore
j_istore_0 = _idaapi.j_istore_0
j_istore_1 = _idaapi.j_istore_1
j_istore_2 = _idaapi.j_istore_2
j_istore_3 = _idaapi.j_istore_3
j_lstore_0 = _idaapi.j_lstore_0
j_lstore_1 = _idaapi.j_lstore_1
j_lstore_2 = _idaapi.j_lstore_2
j_lstore_3 = _idaapi.j_lstore_3
j_fstore_0 = _idaapi.j_fstore_0
j_fstore_1 = _idaapi.j_fstore_1
j_fstore_2 = _idaapi.j_fstore_2
j_fstore_3 = _idaapi.j_fstore_3
j_dstore_0 = _idaapi.j_dstore_0
j_dstore_1 = _idaapi.j_dstore_1
j_dstore_2 = _idaapi.j_dstore_2
j_dstore_3 = _idaapi.j_dstore_3
j_astore_0 = _idaapi.j_astore_0
j_astore_1 = _idaapi.j_astore_1
j_astore_2 = _idaapi.j_astore_2
j_astore_3 = _idaapi.j_astore_3
j_iastore = _idaapi.j_iastore
j_lastore = _idaapi.j_lastore
j_fastore = _idaapi.j_fastore
j_dastore = _idaapi.j_dastore
j_aastore = _idaapi.j_aastore
j_bastore = _idaapi.j_bastore
j_castore = _idaapi.j_castore
j_sastore = _idaapi.j_sastore
j_pop = _idaapi.j_pop
j_pop2 = _idaapi.j_pop2
j_dup = _idaapi.j_dup
j_dup_x1 = _idaapi.j_dup_x1
j_dup_x2 = _idaapi.j_dup_x2
j_dup2 = _idaapi.j_dup2
j_dup2_x1 = _idaapi.j_dup2_x1
j_dup2_x2 = _idaapi.j_dup2_x2
j_swap = _idaapi.j_swap
j_iadd = _idaapi.j_iadd
j_ladd = _idaapi.j_ladd
j_fadd = _idaapi.j_fadd
j_dadd = _idaapi.j_dadd
j_isub = _idaapi.j_isub
j_lsub = _idaapi.j_lsub
j_fsub = _idaapi.j_fsub
j_dsub = _idaapi.j_dsub
j_imul = _idaapi.j_imul
j_lmul = _idaapi.j_lmul
j_fmul = _idaapi.j_fmul
j_dmul = _idaapi.j_dmul
j_idiv = _idaapi.j_idiv
j_ldiv = _idaapi.j_ldiv
j_fdiv = _idaapi.j_fdiv
j_ddiv = _idaapi.j_ddiv
j_irem = _idaapi.j_irem
j_lrem = _idaapi.j_lrem
j_frem = _idaapi.j_frem
j_drem = _idaapi.j_drem
j_ineg = _idaapi.j_ineg
j_lneg = _idaapi.j_lneg
j_fneg = _idaapi.j_fneg
j_dneg = _idaapi.j_dneg
j_ishl = _idaapi.j_ishl
j_lshl = _idaapi.j_lshl
j_ishr = _idaapi.j_ishr
j_lshr = _idaapi.j_lshr
j_iushr = _idaapi.j_iushr
j_lushr = _idaapi.j_lushr
j_iand = _idaapi.j_iand
j_land = _idaapi.j_land
j_ior = _idaapi.j_ior
j_lor = _idaapi.j_lor
j_ixor = _idaapi.j_ixor
j_lxor = _idaapi.j_lxor
j_iinc = _idaapi.j_iinc
j_i2l = _idaapi.j_i2l
j_i2f = _idaapi.j_i2f
j_i2d = _idaapi.j_i2d
j_l2i = _idaapi.j_l2i
j_l2f = _idaapi.j_l2f
j_l2d = _idaapi.j_l2d
j_f2i = _idaapi.j_f2i
j_f2l = _idaapi.j_f2l
j_f2d = _idaapi.j_f2d
j_d2i = _idaapi.j_d2i
j_d2l = _idaapi.j_d2l
j_d2f = _idaapi.j_d2f
j_i2b = _idaapi.j_i2b
j_i2c = _idaapi.j_i2c
j_i2s = _idaapi.j_i2s
j_lcmp = _idaapi.j_lcmp
j_fcmpl = _idaapi.j_fcmpl
j_fcmpg = _idaapi.j_fcmpg
j_dcmpl = _idaapi.j_dcmpl
j_dcmpg = _idaapi.j_dcmpg
j_ifeq = _idaapi.j_ifeq
j_ifne = _idaapi.j_ifne
j_iflt = _idaapi.j_iflt
j_ifge = _idaapi.j_ifge
j_ifgt = _idaapi.j_ifgt
j_ifle = _idaapi.j_ifle
j_if_icmpeq = _idaapi.j_if_icmpeq
j_if_icmpne = _idaapi.j_if_icmpne
j_if_icmplt = _idaapi.j_if_icmplt
j_if_icmpge = _idaapi.j_if_icmpge
j_if_icmpgt = _idaapi.j_if_icmpgt
j_if_icmple = _idaapi.j_if_icmple
j_if_acmpeq = _idaapi.j_if_acmpeq
j_if_acmpne = _idaapi.j_if_acmpne
j_goto = _idaapi.j_goto
j_jsr = _idaapi.j_jsr
j_ret = _idaapi.j_ret
j_tableswitch = _idaapi.j_tableswitch
j_lookupswitch = _idaapi.j_lookupswitch
j_ireturn = _idaapi.j_ireturn
j_lreturn = _idaapi.j_lreturn
j_freturn = _idaapi.j_freturn
j_dreturn = _idaapi.j_dreturn
j_areturn = _idaapi.j_areturn
j_return = _idaapi.j_return
j_getstatic = _idaapi.j_getstatic
j_putstatic = _idaapi.j_putstatic
j_getfield = _idaapi.j_getfield
j_putfield = _idaapi.j_putfield
j_invokevirtual = _idaapi.j_invokevirtual
j_invokespecial = _idaapi.j_invokespecial
j_invokestatic = _idaapi.j_invokestatic
j_invokeinterface = _idaapi.j_invokeinterface
j_invokedynamic = _idaapi.j_invokedynamic
j_new = _idaapi.j_new
j_newarray = _idaapi.j_newarray
j_anewarray = _idaapi.j_anewarray
j_arraylength = _idaapi.j_arraylength
j_athrow = _idaapi.j_athrow
j_checkcast = _idaapi.j_checkcast
j_instanceof = _idaapi.j_instanceof
j_monitorenter = _idaapi.j_monitorenter
j_monitorexit = _idaapi.j_monitorexit
j_wide = _idaapi.j_wide
j_multianewarray = _idaapi.j_multianewarray
j_ifnull = _idaapi.j_ifnull
j_ifnonnull = _idaapi.j_ifnonnull
j_goto_w = _idaapi.j_goto_w
j_jsr_w = _idaapi.j_jsr_w
j_breakpoint = _idaapi.j_breakpoint
j_lastnorm = _idaapi.j_lastnorm
j_a_invokesuper = _idaapi.j_a_invokesuper
j_a_invokevirtualobject = _idaapi.j_a_invokevirtualobject
j_a_invokeignored = _idaapi.j_a_invokeignored
j_a_software = _idaapi.j_a_software
j_a_hardware = _idaapi.j_a_hardware
j_last = _idaapi.j_last
j_ldc_quick = _idaapi.j_ldc_quick
j_ldcw_quick = _idaapi.j_ldcw_quick
j_ldc2w_quick = _idaapi.j_ldc2w_quick
j_getfield_quick = _idaapi.j_getfield_quick
j_putfield_quick = _idaapi.j_putfield_quick
j_getfield2_quick = _idaapi.j_getfield2_quick
j_putfield2_quick = _idaapi.j_putfield2_quick
j_getstatic_quick = _idaapi.j_getstatic_quick
j_putstatic_quick = _idaapi.j_putstatic_quick
j_getstatic2_quick = _idaapi.j_getstatic2_quick
j_putstatic2_quick = _idaapi.j_putstatic2_quick
j_invokevirtual_quick = _idaapi.j_invokevirtual_quick
j_invokenonvirtual_quick = _idaapi.j_invokenonvirtual_quick
j_invokesuper_quick = _idaapi.j_invokesuper_quick
j_invokestatic_quick = _idaapi.j_invokestatic_quick
j_invokeinterface_quick = _idaapi.j_invokeinterface_quick
j_invokevirtualobject_quick = _idaapi.j_invokevirtualobject_quick
j_invokeignored_quick = _idaapi.j_invokeignored_quick
j_new_quick = _idaapi.j_new_quick
j_anewarray_quick = _idaapi.j_anewarray_quick
j_multianewarray_quick = _idaapi.j_multianewarray_quick
j_checkcast_quick = _idaapi.j_checkcast_quick
j_instanceof_quick = _idaapi.j_instanceof_quick
j_invokevirtual_quick_w = _idaapi.j_invokevirtual_quick_w
j_getfield_quick_w = _idaapi.j_getfield_quick_w
j_putfield_quick_w = _idaapi.j_putfield_quick_w
j_quick_last = _idaapi.j_quick_last
ARM_null = _idaapi.ARM_null
ARM_ret = _idaapi.ARM_ret
ARM_nop = _idaapi.ARM_nop
ARM_b = _idaapi.ARM_b
ARM_bl = _idaapi.ARM_bl
ARM_asr = _idaapi.ARM_asr
ARM_lsl = _idaapi.ARM_lsl
ARM_lsr = _idaapi.ARM_lsr
ARM_ror = _idaapi.ARM_ror
ARM_neg = _idaapi.ARM_neg
ARM_and = _idaapi.ARM_and
ARM_eor = _idaapi.ARM_eor
ARM_sub = _idaapi.ARM_sub
ARM_rsb = _idaapi.ARM_rsb
ARM_add = _idaapi.ARM_add
ARM_adc = _idaapi.ARM_adc
ARM_sbc = _idaapi.ARM_sbc
ARM_rsc = _idaapi.ARM_rsc
ARM_tst = _idaapi.ARM_tst
ARM_teq = _idaapi.ARM_teq
ARM_cmp = _idaapi.ARM_cmp
ARM_cmn = _idaapi.ARM_cmn
ARM_orr = _idaapi.ARM_orr
ARM_mov = _idaapi.ARM_mov
ARM_bic = _idaapi.ARM_bic
ARM_mvn = _idaapi.ARM_mvn
ARM_mrs = _idaapi.ARM_mrs
ARM_msr = _idaapi.ARM_msr
ARM_mul = _idaapi.ARM_mul
ARM_mla = _idaapi.ARM_mla
ARM_ldr = _idaapi.ARM_ldr
ARM_ldrpc = _idaapi.ARM_ldrpc
ARM_str = _idaapi.ARM_str
ARM_ldm = _idaapi.ARM_ldm
ARM_stm = _idaapi.ARM_stm
ARM_swp = _idaapi.ARM_swp
ARM_svc = _idaapi.ARM_svc
ARM_smull = _idaapi.ARM_smull
ARM_smlal = _idaapi.ARM_smlal
ARM_umull = _idaapi.ARM_umull
ARM_umlal = _idaapi.ARM_umlal
ARM_bx = _idaapi.ARM_bx
ARM_pop = _idaapi.ARM_pop
ARM_push = _idaapi.ARM_push
ARM_adr = _idaapi.ARM_adr
ARM_bkpt = _idaapi.ARM_bkpt
ARM_blx1 = _idaapi.ARM_blx1
ARM_blx2 = _idaapi.ARM_blx2
ARM_clz = _idaapi.ARM_clz
ARM_ldrd = _idaapi.ARM_ldrd
ARM_pld = _idaapi.ARM_pld
ARM_qadd = _idaapi.ARM_qadd
ARM_qdadd = _idaapi.ARM_qdadd
ARM_qdsub = _idaapi.ARM_qdsub
ARM_qsub = _idaapi.ARM_qsub
ARM_smlabb = _idaapi.ARM_smlabb
ARM_smlatb = _idaapi.ARM_smlatb
ARM_smlabt = _idaapi.ARM_smlabt
ARM_smlatt = _idaapi.ARM_smlatt
ARM_smlalbb = _idaapi.ARM_smlalbb
ARM_smlaltb = _idaapi.ARM_smlaltb
ARM_smlalbt = _idaapi.ARM_smlalbt
ARM_smlaltt = _idaapi.ARM_smlaltt
ARM_smlawb = _idaapi.ARM_smlawb
ARM_smulwb = _idaapi.ARM_smulwb
ARM_smlawt = _idaapi.ARM_smlawt
ARM_smulwt = _idaapi.ARM_smulwt
ARM_smulbb = _idaapi.ARM_smulbb
ARM_smultb = _idaapi.ARM_smultb
ARM_smulbt = _idaapi.ARM_smulbt
ARM_smultt = _idaapi.ARM_smultt
ARM_strd = _idaapi.ARM_strd
xScale_mia = _idaapi.xScale_mia
xScale_miaph = _idaapi.xScale_miaph
xScale_miabb = _idaapi.xScale_miabb
xScale_miabt = _idaapi.xScale_miabt
xScale_miatb = _idaapi.xScale_miatb
xScale_miatt = _idaapi.xScale_miatt
xScale_mar = _idaapi.xScale_mar
xScale_mra = _idaapi.xScale_mra
ARM_movl = _idaapi.ARM_movl
ARM_adrl = _idaapi.ARM_adrl
ARM_swbkpt = _idaapi.ARM_swbkpt
ARM_cdp = _idaapi.ARM_cdp
ARM_cdp2 = _idaapi.ARM_cdp2
ARM_ldc = _idaapi.ARM_ldc
ARM_ldc2 = _idaapi.ARM_ldc2
ARM_stc = _idaapi.ARM_stc
ARM_stc2 = _idaapi.ARM_stc2
ARM_mrc = _idaapi.ARM_mrc
ARM_mrc2 = _idaapi.ARM_mrc2
ARM_mcr = _idaapi.ARM_mcr
ARM_mcr2 = _idaapi.ARM_mcr2
ARM_mcrr = _idaapi.ARM_mcrr
ARM_mrrc = _idaapi.ARM_mrrc
ARM_fabsd = _idaapi.ARM_fabsd
ARM_fabss = _idaapi.ARM_fabss
ARM_faddd = _idaapi.ARM_faddd
ARM_fadds = _idaapi.ARM_fadds
ARM_fcmpd = _idaapi.ARM_fcmpd
ARM_fcmps = _idaapi.ARM_fcmps
ARM_fcmped = _idaapi.ARM_fcmped
ARM_fcmpes = _idaapi.ARM_fcmpes
ARM_fcmpezd = _idaapi.ARM_fcmpezd
ARM_fcmpezs = _idaapi.ARM_fcmpezs
ARM_fcmpzd = _idaapi.ARM_fcmpzd
ARM_fcmpzs = _idaapi.ARM_fcmpzs
ARM_fcpyd = _idaapi.ARM_fcpyd
ARM_fcpys = _idaapi.ARM_fcpys
ARM_fcvtsd = _idaapi.ARM_fcvtsd
ARM_fcvtds = _idaapi.ARM_fcvtds
ARM_fdivd = _idaapi.ARM_fdivd
ARM_fdivs = _idaapi.ARM_fdivs
ARM_fldd = _idaapi.ARM_fldd
ARM_flds = _idaapi.ARM_flds
ARM_fldmd = _idaapi.ARM_fldmd
ARM_fldms = _idaapi.ARM_fldms
ARM_fldmx = _idaapi.ARM_fldmx
ARM_fmacd = _idaapi.ARM_fmacd
ARM_fmacs = _idaapi.ARM_fmacs
ARM_fmscd = _idaapi.ARM_fmscd
ARM_fmscs = _idaapi.ARM_fmscs
ARM_fmstat = _idaapi.ARM_fmstat
ARM_fmuld = _idaapi.ARM_fmuld
ARM_fmuls = _idaapi.ARM_fmuls
ARM_fnegd = _idaapi.ARM_fnegd
ARM_fnegs = _idaapi.ARM_fnegs
ARM_fnmacd = _idaapi.ARM_fnmacd
ARM_fnmacs = _idaapi.ARM_fnmacs
ARM_fnmscd = _idaapi.ARM_fnmscd
ARM_fnmscs = _idaapi.ARM_fnmscs
ARM_fnmuld = _idaapi.ARM_fnmuld
ARM_fnmuls = _idaapi.ARM_fnmuls
ARM_fsitod = _idaapi.ARM_fsitod
ARM_fsitos = _idaapi.ARM_fsitos
ARM_fsqrtd = _idaapi.ARM_fsqrtd
ARM_fsqrts = _idaapi.ARM_fsqrts
ARM_fstd = _idaapi.ARM_fstd
ARM_fsts = _idaapi.ARM_fsts
ARM_fstmd = _idaapi.ARM_fstmd
ARM_fstms = _idaapi.ARM_fstms
ARM_fstmx = _idaapi.ARM_fstmx
ARM_fsubd = _idaapi.ARM_fsubd
ARM_fsubs = _idaapi.ARM_fsubs
ARM_ftosid = _idaapi.ARM_ftosid
ARM_ftosis = _idaapi.ARM_ftosis
ARM_ftosizd = _idaapi.ARM_ftosizd
ARM_ftosizs = _idaapi.ARM_ftosizs
ARM_ftouid = _idaapi.ARM_ftouid
ARM_ftouis = _idaapi.ARM_ftouis
ARM_ftouizd = _idaapi.ARM_ftouizd
ARM_ftouizs = _idaapi.ARM_ftouizs
ARM_fuitod = _idaapi.ARM_fuitod
ARM_fuitos = _idaapi.ARM_fuitos
ARM_fmdhr = _idaapi.ARM_fmdhr
ARM_fmrdh = _idaapi.ARM_fmrdh
ARM_fmdlr = _idaapi.ARM_fmdlr
ARM_fmrdl = _idaapi.ARM_fmrdl
ARM_fmxr = _idaapi.ARM_fmxr
ARM_fmrx = _idaapi.ARM_fmrx
ARM_fmsr = _idaapi.ARM_fmsr
ARM_fmrs = _idaapi.ARM_fmrs
ARM_fmdrr = _idaapi.ARM_fmdrr
ARM_fmrrd = _idaapi.ARM_fmrrd
ARM_fmsrr = _idaapi.ARM_fmsrr
ARM_fmrrs = _idaapi.ARM_fmrrs
ARM_bxj = _idaapi.ARM_bxj
ARM_mcrr2 = _idaapi.ARM_mcrr2
ARM_mrrc2 = _idaapi.ARM_mrrc2
ARM_cps = _idaapi.ARM_cps
ARM_cpsid = _idaapi.ARM_cpsid
ARM_cpsie = _idaapi.ARM_cpsie
ARM_ldrex = _idaapi.ARM_ldrex
ARM_pkhbt = _idaapi.ARM_pkhbt
ARM_pkhtb = _idaapi.ARM_pkhtb
ARM_qadd16 = _idaapi.ARM_qadd16
ARM_qadd8 = _idaapi.ARM_qadd8
ARM_qaddsubx = _idaapi.ARM_qaddsubx
ARM_qsub16 = _idaapi.ARM_qsub16
ARM_qsub8 = _idaapi.ARM_qsub8
ARM_qsubaddx = _idaapi.ARM_qsubaddx
ARM_rev = _idaapi.ARM_rev
ARM_rev16 = _idaapi.ARM_rev16
ARM_revsh = _idaapi.ARM_revsh
ARM_rfe = _idaapi.ARM_rfe
ARM_sadd16 = _idaapi.ARM_sadd16
ARM_sadd8 = _idaapi.ARM_sadd8
ARM_saddsubx = _idaapi.ARM_saddsubx
ARM_sel = _idaapi.ARM_sel
ARM_setend = _idaapi.ARM_setend
ARM_shadd16 = _idaapi.ARM_shadd16
ARM_shadd8 = _idaapi.ARM_shadd8
ARM_shaddsubx = _idaapi.ARM_shaddsubx
ARM_shsub16 = _idaapi.ARM_shsub16
ARM_shsub8 = _idaapi.ARM_shsub8
ARM_shsubaddx = _idaapi.ARM_shsubaddx
ARM_smlad = _idaapi.ARM_smlad
ARM_smladx = _idaapi.ARM_smladx
ARM_smuad = _idaapi.ARM_smuad
ARM_smuadx = _idaapi.ARM_smuadx
ARM_smlald = _idaapi.ARM_smlald
ARM_smlaldx = _idaapi.ARM_smlaldx
ARM_smlsd = _idaapi.ARM_smlsd
ARM_smlsdx = _idaapi.ARM_smlsdx
ARM_smusd = _idaapi.ARM_smusd
ARM_smusdx = _idaapi.ARM_smusdx
ARM_smlsld = _idaapi.ARM_smlsld
ARM_smlsldx = _idaapi.ARM_smlsldx
ARM_smmla = _idaapi.ARM_smmla
ARM_smmlar = _idaapi.ARM_smmlar
ARM_smmul = _idaapi.ARM_smmul
ARM_smmulr = _idaapi.ARM_smmulr
ARM_smmls = _idaapi.ARM_smmls
ARM_smmlsr = _idaapi.ARM_smmlsr
ARM_srs = _idaapi.ARM_srs
ARM_ssat = _idaapi.ARM_ssat
ARM_ssat16 = _idaapi.ARM_ssat16
ARM_ssub16 = _idaapi.ARM_ssub16
ARM_ssub8 = _idaapi.ARM_ssub8
ARM_ssubaddx = _idaapi.ARM_ssubaddx
ARM_strex = _idaapi.ARM_strex
ARM_sxtab = _idaapi.ARM_sxtab
ARM_sxtb = _idaapi.ARM_sxtb
ARM_sxtab16 = _idaapi.ARM_sxtab16
ARM_sxtb16 = _idaapi.ARM_sxtb16
ARM_sxtah = _idaapi.ARM_sxtah
ARM_sxth = _idaapi.ARM_sxth
ARM_uadd16 = _idaapi.ARM_uadd16
ARM_uadd8 = _idaapi.ARM_uadd8
ARM_uaddsubx = _idaapi.ARM_uaddsubx
ARM_uhadd16 = _idaapi.ARM_uhadd16
ARM_uhadd8 = _idaapi.ARM_uhadd8
ARM_uhaddsubx = _idaapi.ARM_uhaddsubx
ARM_uhsub16 = _idaapi.ARM_uhsub16
ARM_uhsub8 = _idaapi.ARM_uhsub8
ARM_uhsubaddx = _idaapi.ARM_uhsubaddx
ARM_umaal = _idaapi.ARM_umaal
ARM_uqadd16 = _idaapi.ARM_uqadd16
ARM_uqadd8 = _idaapi.ARM_uqadd8
ARM_uqaddsubx = _idaapi.ARM_uqaddsubx
ARM_uqsub16 = _idaapi.ARM_uqsub16
ARM_uqsub8 = _idaapi.ARM_uqsub8
ARM_uqsubaddx = _idaapi.ARM_uqsubaddx
ARM_usada8 = _idaapi.ARM_usada8
ARM_usad8 = _idaapi.ARM_usad8
ARM_usat = _idaapi.ARM_usat
ARM_usat16 = _idaapi.ARM_usat16
ARM_usub16 = _idaapi.ARM_usub16
ARM_usub8 = _idaapi.ARM_usub8
ARM_usubaddx = _idaapi.ARM_usubaddx
ARM_uxtab = _idaapi.ARM_uxtab
ARM_uxtb = _idaapi.ARM_uxtb
ARM_uxtab16 = _idaapi.ARM_uxtab16
ARM_uxtb16 = _idaapi.ARM_uxtb16
ARM_uxtah = _idaapi.ARM_uxtah
ARM_uxth = _idaapi.ARM_uxth
ARM_clrex = _idaapi.ARM_clrex
ARM_ldrexb = _idaapi.ARM_ldrexb
ARM_ldrexd = _idaapi.ARM_ldrexd
ARM_ldrexh = _idaapi.ARM_ldrexh
ARM_strexb = _idaapi.ARM_strexb
ARM_strexd = _idaapi.ARM_strexd
ARM_strexh = _idaapi.ARM_strexh
ARM_yield = _idaapi.ARM_yield
ARM_sev = _idaapi.ARM_sev
ARM_wfe = _idaapi.ARM_wfe
ARM_wfi = _idaapi.ARM_wfi
ARM_smc = _idaapi.ARM_smc
ARM_orn = _idaapi.ARM_orn
ARM_movt = _idaapi.ARM_movt
ARM_sbfx = _idaapi.ARM_sbfx
ARM_ubfx = _idaapi.ARM_ubfx
ARM_bfi = _idaapi.ARM_bfi
ARM_bfc = _idaapi.ARM_bfc
ARM_tbb = _idaapi.ARM_tbb
ARM_tbh = _idaapi.ARM_tbh
ARM_pli = _idaapi.ARM_pli
ARM_rbit = _idaapi.ARM_rbit
ARM_it = _idaapi.ARM_it
ARM_mls = _idaapi.ARM_mls
ARM_sdiv = _idaapi.ARM_sdiv
ARM_udiv = _idaapi.ARM_udiv
ARM_cbz = _idaapi.ARM_cbz
ARM_cbnz = _idaapi.ARM_cbnz
ARM_dsb = _idaapi.ARM_dsb
ARM_dmb = _idaapi.ARM_dmb
ARM_isb = _idaapi.ARM_isb
ARM_dbg = _idaapi.ARM_dbg
ARM_und = _idaapi.ARM_und
ARM_last = _idaapi.ARM_last
TMS6_null = _idaapi.TMS6_null
TMS6_abs = _idaapi.TMS6_abs
TMS6_add = _idaapi.TMS6_add
TMS6_addu = _idaapi.TMS6_addu
TMS6_addab = _idaapi.TMS6_addab
TMS6_addah = _idaapi.TMS6_addah
TMS6_addaw = _idaapi.TMS6_addaw
TMS6_addk = _idaapi.TMS6_addk
TMS6_add2 = _idaapi.TMS6_add2
TMS6_and = _idaapi.TMS6_and
TMS6_b = _idaapi.TMS6_b
TMS6_clr = _idaapi.TMS6_clr
TMS6_cmpeq = _idaapi.TMS6_cmpeq
TMS6_cmpgt = _idaapi.TMS6_cmpgt
TMS6_cmpgtu = _idaapi.TMS6_cmpgtu
TMS6_cmplt = _idaapi.TMS6_cmplt
TMS6_cmpltu = _idaapi.TMS6_cmpltu
TMS6_ext = _idaapi.TMS6_ext
TMS6_extu = _idaapi.TMS6_extu
TMS6_idle = _idaapi.TMS6_idle
TMS6_ldb = _idaapi.TMS6_ldb
TMS6_ldbu = _idaapi.TMS6_ldbu
TMS6_ldh = _idaapi.TMS6_ldh
TMS6_ldhu = _idaapi.TMS6_ldhu
TMS6_ldw = _idaapi.TMS6_ldw
TMS6_lmbd = _idaapi.TMS6_lmbd
TMS6_mpy = _idaapi.TMS6_mpy
TMS6_mpyu = _idaapi.TMS6_mpyu
TMS6_mpyus = _idaapi.TMS6_mpyus
TMS6_mpysu = _idaapi.TMS6_mpysu
TMS6_mpyh = _idaapi.TMS6_mpyh
TMS6_mpyhu = _idaapi.TMS6_mpyhu
TMS6_mpyhus = _idaapi.TMS6_mpyhus
TMS6_mpyhsu = _idaapi.TMS6_mpyhsu
TMS6_mpyhl = _idaapi.TMS6_mpyhl
TMS6_mpyhlu = _idaapi.TMS6_mpyhlu
TMS6_mpyhuls = _idaapi.TMS6_mpyhuls
TMS6_mpyhslu = _idaapi.TMS6_mpyhslu
TMS6_mpylh = _idaapi.TMS6_mpylh
TMS6_mpylhu = _idaapi.TMS6_mpylhu
TMS6_mpyluhs = _idaapi.TMS6_mpyluhs
TMS6_mpylshu = _idaapi.TMS6_mpylshu
TMS6_mv = _idaapi.TMS6_mv
TMS6_mvc = _idaapi.TMS6_mvc
TMS6_mvk = _idaapi.TMS6_mvk
TMS6_mvkh = _idaapi.TMS6_mvkh
TMS6_mvklh = _idaapi.TMS6_mvklh
TMS6_neg = _idaapi.TMS6_neg
TMS6_nop = _idaapi.TMS6_nop
TMS6_norm = _idaapi.TMS6_norm
TMS6_not = _idaapi.TMS6_not
TMS6_or = _idaapi.TMS6_or
TMS6_sadd = _idaapi.TMS6_sadd
TMS6_sat = _idaapi.TMS6_sat
TMS6_set = _idaapi.TMS6_set
TMS6_shl = _idaapi.TMS6_shl
TMS6_shr = _idaapi.TMS6_shr
TMS6_shru = _idaapi.TMS6_shru
TMS6_smpy = _idaapi.TMS6_smpy
TMS6_smpyhl = _idaapi.TMS6_smpyhl
TMS6_smpylh = _idaapi.TMS6_smpylh
TMS6_smpyh = _idaapi.TMS6_smpyh
TMS6_sshl = _idaapi.TMS6_sshl
TMS6_ssub = _idaapi.TMS6_ssub
TMS6_stb = _idaapi.TMS6_stb
TMS6_stbu = _idaapi.TMS6_stbu
TMS6_sth = _idaapi.TMS6_sth
TMS6_sthu = _idaapi.TMS6_sthu
TMS6_stw = _idaapi.TMS6_stw
TMS6_sub = _idaapi.TMS6_sub
TMS6_subu = _idaapi.TMS6_subu
TMS6_subab = _idaapi.TMS6_subab
TMS6_subah = _idaapi.TMS6_subah
TMS6_subaw = _idaapi.TMS6_subaw
TMS6_subc = _idaapi.TMS6_subc
TMS6_sub2 = _idaapi.TMS6_sub2
TMS6_xor = _idaapi.TMS6_xor
TMS6_zero = _idaapi.TMS6_zero
TMS6_abs2 = _idaapi.TMS6_abs2
TMS6_absdp = _idaapi.TMS6_absdp
TMS6_abssp = _idaapi.TMS6_abssp
TMS6_add4 = _idaapi.TMS6_add4
TMS6_addad = _idaapi.TMS6_addad
TMS6_adddp = _idaapi.TMS6_adddp
TMS6_addkpc = _idaapi.TMS6_addkpc
TMS6_addsp = _idaapi.TMS6_addsp
TMS6_addsub = _idaapi.TMS6_addsub
TMS6_addsub2 = _idaapi.TMS6_addsub2
TMS6_andn = _idaapi.TMS6_andn
TMS6_avg2 = _idaapi.TMS6_avg2
TMS6_avgu4 = _idaapi.TMS6_avgu4
TMS6_bdec = _idaapi.TMS6_bdec
TMS6_bitc4 = _idaapi.TMS6_bitc4
TMS6_bitr = _idaapi.TMS6_bitr
TMS6_bnop = _idaapi.TMS6_bnop
TMS6_bpos = _idaapi.TMS6_bpos
TMS6_callp = _idaapi.TMS6_callp
TMS6_cmpeq2 = _idaapi.TMS6_cmpeq2
TMS6_cmpeq4 = _idaapi.TMS6_cmpeq4
TMS6_cmpeqdp = _idaapi.TMS6_cmpeqdp
TMS6_cmpeqsp = _idaapi.TMS6_cmpeqsp
TMS6_cmpgt2 = _idaapi.TMS6_cmpgt2
TMS6_cmpgtdp = _idaapi.TMS6_cmpgtdp
TMS6_cmpgtsp = _idaapi.TMS6_cmpgtsp
TMS6_cmpgtu4 = _idaapi.TMS6_cmpgtu4
TMS6_cmplt2 = _idaapi.TMS6_cmplt2
TMS6_cmpltdp = _idaapi.TMS6_cmpltdp
TMS6_cmpltsp = _idaapi.TMS6_cmpltsp
TMS6_cmpltu4 = _idaapi.TMS6_cmpltu4
TMS6_cmpy = _idaapi.TMS6_cmpy
TMS6_cmpyr = _idaapi.TMS6_cmpyr
TMS6_cmpyr1 = _idaapi.TMS6_cmpyr1
TMS6_ddotp4 = _idaapi.TMS6_ddotp4
TMS6_ddotph2 = _idaapi.TMS6_ddotph2
TMS6_ddotph2r = _idaapi.TMS6_ddotph2r
TMS6_ddotpl2 = _idaapi.TMS6_ddotpl2
TMS6_ddotpl2r = _idaapi.TMS6_ddotpl2r
TMS6_deal = _idaapi.TMS6_deal
TMS6_dint = _idaapi.TMS6_dint
TMS6_dmv = _idaapi.TMS6_dmv
TMS6_dotp2 = _idaapi.TMS6_dotp2
TMS6_dotpn2 = _idaapi.TMS6_dotpn2
TMS6_dotpnrsu2 = _idaapi.TMS6_dotpnrsu2
TMS6_dotpnrus2 = _idaapi.TMS6_dotpnrus2
TMS6_dotprsu2 = _idaapi.TMS6_dotprsu2
TMS6_dotprus2 = _idaapi.TMS6_dotprus2
TMS6_dotpsu4 = _idaapi.TMS6_dotpsu4
TMS6_dotpu4 = _idaapi.TMS6_dotpu4
TMS6_dotpus4 = _idaapi.TMS6_dotpus4
TMS6_dpack2 = _idaapi.TMS6_dpack2
TMS6_dpackx2 = _idaapi.TMS6_dpackx2
TMS6_dpint = _idaapi.TMS6_dpint
TMS6_dpsp = _idaapi.TMS6_dpsp
TMS6_dptrunc = _idaapi.TMS6_dptrunc
TMS6_gmpy = _idaapi.TMS6_gmpy
TMS6_gmpy4 = _idaapi.TMS6_gmpy4
TMS6_intdp = _idaapi.TMS6_intdp
TMS6_intdpu = _idaapi.TMS6_intdpu
TMS6_intsp = _idaapi.TMS6_intsp
TMS6_intspu = _idaapi.TMS6_intspu
TMS6_lddw = _idaapi.TMS6_lddw
TMS6_ldndw = _idaapi.TMS6_ldndw
TMS6_ldnw = _idaapi.TMS6_ldnw
TMS6_max2 = _idaapi.TMS6_max2
TMS6_maxu4 = _idaapi.TMS6_maxu4
TMS6_min2 = _idaapi.TMS6_min2
TMS6_minu4 = _idaapi.TMS6_minu4
TMS6_mpy2 = _idaapi.TMS6_mpy2
TMS6_mpy2ir = _idaapi.TMS6_mpy2ir
TMS6_mpy32 = _idaapi.TMS6_mpy32
TMS6_mpy32su = _idaapi.TMS6_mpy32su
TMS6_mpy32u = _idaapi.TMS6_mpy32u
TMS6_mpy32us = _idaapi.TMS6_mpy32us
TMS6_mpydp = _idaapi.TMS6_mpydp
TMS6_mpyhi = _idaapi.TMS6_mpyhi
TMS6_mpyhir = _idaapi.TMS6_mpyhir
TMS6_mpyi = _idaapi.TMS6_mpyi
TMS6_mpyid = _idaapi.TMS6_mpyid
TMS6_mpyih = _idaapi.TMS6_mpyih
TMS6_mpyihr = _idaapi.TMS6_mpyihr
TMS6_mpyil = _idaapi.TMS6_mpyil
TMS6_mpyilr = _idaapi.TMS6_mpyilr
TMS6_mpyli = _idaapi.TMS6_mpyli
TMS6_mpylir = _idaapi.TMS6_mpylir
TMS6_mpysp = _idaapi.TMS6_mpysp
TMS6_mpysp2dp = _idaapi.TMS6_mpysp2dp
TMS6_mpyspdp = _idaapi.TMS6_mpyspdp
TMS6_mpysu4 = _idaapi.TMS6_mpysu4
TMS6_mpyu4 = _idaapi.TMS6_mpyu4
TMS6_mpyus4 = _idaapi.TMS6_mpyus4
TMS6_mvd = _idaapi.TMS6_mvd
TMS6_mvkl = _idaapi.TMS6_mvkl
TMS6_pack2 = _idaapi.TMS6_pack2
TMS6_packh2 = _idaapi.TMS6_packh2
TMS6_packh4 = _idaapi.TMS6_packh4
TMS6_packhl2 = _idaapi.TMS6_packhl2
TMS6_packl4 = _idaapi.TMS6_packl4
TMS6_packlh2 = _idaapi.TMS6_packlh2
TMS6_rcpdp = _idaapi.TMS6_rcpdp
TMS6_rcpsp = _idaapi.TMS6_rcpsp
TMS6_rint = _idaapi.TMS6_rint
TMS6_rotl = _idaapi.TMS6_rotl
TMS6_rpack2 = _idaapi.TMS6_rpack2
TMS6_rsqrdp = _idaapi.TMS6_rsqrdp
TMS6_rsqrsp = _idaapi.TMS6_rsqrsp
TMS6_sadd2 = _idaapi.TMS6_sadd2
TMS6_saddsu2 = _idaapi.TMS6_saddsu2
TMS6_saddsub = _idaapi.TMS6_saddsub
TMS6_saddsub2 = _idaapi.TMS6_saddsub2
TMS6_saddu4 = _idaapi.TMS6_saddu4
TMS6_saddus2 = _idaapi.TMS6_saddus2
TMS6_shfl = _idaapi.TMS6_shfl
TMS6_shfl3 = _idaapi.TMS6_shfl3
TMS6_shlmb = _idaapi.TMS6_shlmb
TMS6_shr2 = _idaapi.TMS6_shr2
TMS6_shrmb = _idaapi.TMS6_shrmb
TMS6_shru2 = _idaapi.TMS6_shru2
TMS6_smpy2 = _idaapi.TMS6_smpy2
TMS6_smpy32 = _idaapi.TMS6_smpy32
TMS6_spack2 = _idaapi.TMS6_spack2
TMS6_spacku4 = _idaapi.TMS6_spacku4
TMS6_spdp = _idaapi.TMS6_spdp
TMS6_spint = _idaapi.TMS6_spint
TMS6_spkernel = _idaapi.TMS6_spkernel
TMS6_spkernelr = _idaapi.TMS6_spkernelr
TMS6_sploop = _idaapi.TMS6_sploop
TMS6_sploopd = _idaapi.TMS6_sploopd
TMS6_sploopw = _idaapi.TMS6_sploopw
TMS6_spmask = _idaapi.TMS6_spmask
TMS6_spmaskr = _idaapi.TMS6_spmaskr
TMS6_sptrunc = _idaapi.TMS6_sptrunc
TMS6_sshvl = _idaapi.TMS6_sshvl
TMS6_sshvr = _idaapi.TMS6_sshvr
TMS6_ssub2 = _idaapi.TMS6_ssub2
TMS6_stdw = _idaapi.TMS6_stdw
TMS6_stndw = _idaapi.TMS6_stndw
TMS6_stnw = _idaapi.TMS6_stnw
TMS6_sub4 = _idaapi.TMS6_sub4
TMS6_subabs4 = _idaapi.TMS6_subabs4
TMS6_subdp = _idaapi.TMS6_subdp
TMS6_subsp = _idaapi.TMS6_subsp
TMS6_swap2 = _idaapi.TMS6_swap2
TMS6_swap4 = _idaapi.TMS6_swap4
TMS6_swe = _idaapi.TMS6_swe
TMS6_swenr = _idaapi.TMS6_swenr
TMS6_unpkhu4 = _idaapi.TMS6_unpkhu4
TMS6_unpklu4 = _idaapi.TMS6_unpklu4
TMS6_xormpy = _idaapi.TMS6_xormpy
TMS6_xpnd2 = _idaapi.TMS6_xpnd2
TMS6_xpnd4 = _idaapi.TMS6_xpnd4
TMS6_last = _idaapi.TMS6_last
I196_null = _idaapi.I196_null
I196_add2 = _idaapi.I196_add2
I196_add3 = _idaapi.I196_add3
I196_addb2 = _idaapi.I196_addb2
I196_addb3 = _idaapi.I196_addb3
I196_addc = _idaapi.I196_addc
I196_addcb = _idaapi.I196_addcb
I196_and2 = _idaapi.I196_and2
I196_and3 = _idaapi.I196_and3
I196_andb2 = _idaapi.I196_andb2
I196_andb3 = _idaapi.I196_andb3
I196_bmov = _idaapi.I196_bmov
I196_bmovi = _idaapi.I196_bmovi
I196_br = _idaapi.I196_br
I196_clr = _idaapi.I196_clr
I196_clrb = _idaapi.I196_clrb
I196_clrc = _idaapi.I196_clrc
I196_clrvt = _idaapi.I196_clrvt
I196_cmp = _idaapi.I196_cmp
I196_cmpb = _idaapi.I196_cmpb
I196_cmpl = _idaapi.I196_cmpl
I196_dec = _idaapi.I196_dec
I196_decb = _idaapi.I196_decb
I196_di = _idaapi.I196_di
I196_div = _idaapi.I196_div
I196_divb = _idaapi.I196_divb
I196_divu = _idaapi.I196_divu
I196_divub = _idaapi.I196_divub
I196_djnz = _idaapi.I196_djnz
I196_djnzw = _idaapi.I196_djnzw
I196_dpts = _idaapi.I196_dpts
I196_ei = _idaapi.I196_ei
I196_epts = _idaapi.I196_epts
I196_ext = _idaapi.I196_ext
I196_extb = _idaapi.I196_extb
I196_idlpd = _idaapi.I196_idlpd
I196_inc = _idaapi.I196_inc
I196_incb = _idaapi.I196_incb
I196_jbc = _idaapi.I196_jbc
I196_jbs = _idaapi.I196_jbs
I196_jc = _idaapi.I196_jc
I196_je = _idaapi.I196_je
I196_jge = _idaapi.I196_jge
I196_jgt = _idaapi.I196_jgt
I196_jh = _idaapi.I196_jh
I196_jle = _idaapi.I196_jle
I196_jlt = _idaapi.I196_jlt
I196_jnc = _idaapi.I196_jnc
I196_jne = _idaapi.I196_jne
I196_jnh = _idaapi.I196_jnh
I196_jnst = _idaapi.I196_jnst
I196_jnv = _idaapi.I196_jnv
I196_jnvt = _idaapi.I196_jnvt
I196_jst = _idaapi.I196_jst
I196_jv = _idaapi.I196_jv
I196_jvt = _idaapi.I196_jvt
I196_lcall = _idaapi.I196_lcall
I196_ld = _idaapi.I196_ld
I196_ldb = _idaapi.I196_ldb
I196_ldbse = _idaapi.I196_ldbse
I196_ldbze = _idaapi.I196_ldbze
I196_ljmp = _idaapi.I196_ljmp
I196_mul2 = _idaapi.I196_mul2
I196_mul3 = _idaapi.I196_mul3
I196_mulb2 = _idaapi.I196_mulb2
I196_mulb3 = _idaapi.I196_mulb3
I196_mulu2 = _idaapi.I196_mulu2
I196_mulu3 = _idaapi.I196_mulu3
I196_mulub2 = _idaapi.I196_mulub2
I196_mulub3 = _idaapi.I196_mulub3
I196_neg = _idaapi.I196_neg
I196_negb = _idaapi.I196_negb
I196_nop = _idaapi.I196_nop
I196_norml = _idaapi.I196_norml
I196_not = _idaapi.I196_not
I196_notb = _idaapi.I196_notb
I196_or = _idaapi.I196_or
I196_orb = _idaapi.I196_orb
I196_pop = _idaapi.I196_pop
I196_popa = _idaapi.I196_popa
I196_popf = _idaapi.I196_popf
I196_push = _idaapi.I196_push
I196_pusha = _idaapi.I196_pusha
I196_pushf = _idaapi.I196_pushf
I196_ret = _idaapi.I196_ret
I196_rst = _idaapi.I196_rst
I196_scall = _idaapi.I196_scall
I196_setc = _idaapi.I196_setc
I196_shl = _idaapi.I196_shl
I196_shlb = _idaapi.I196_shlb
I196_shll = _idaapi.I196_shll
I196_shr = _idaapi.I196_shr
I196_shra = _idaapi.I196_shra
I196_shrab = _idaapi.I196_shrab
I196_shral = _idaapi.I196_shral
I196_shrb = _idaapi.I196_shrb
I196_shrl = _idaapi.I196_shrl
I196_sjmp = _idaapi.I196_sjmp
I196_skip = _idaapi.I196_skip
I196_st = _idaapi.I196_st
I196_stb = _idaapi.I196_stb
I196_sub2 = _idaapi.I196_sub2
I196_sub3 = _idaapi.I196_sub3
I196_subb2 = _idaapi.I196_subb2
I196_subb3 = _idaapi.I196_subb3
I196_subc = _idaapi.I196_subc
I196_subcb = _idaapi.I196_subcb
I196_tijmp = _idaapi.I196_tijmp
I196_trap = _idaapi.I196_trap
I196_xch = _idaapi.I196_xch
I196_xchb = _idaapi.I196_xchb
I196_xor = _idaapi.I196_xor
I196_xorb = _idaapi.I196_xorb
I196_ebmovi = _idaapi.I196_ebmovi
I196_ebr = _idaapi.I196_ebr
I196_ecall = _idaapi.I196_ecall
I196_ejmp = _idaapi.I196_ejmp
I196_eld = _idaapi.I196_eld
I196_eldb = _idaapi.I196_eldb
I196_est = _idaapi.I196_est
I196_estb = _idaapi.I196_estb
I196_last = _idaapi.I196_last
SH3_null = _idaapi.SH3_null
SH3_add = _idaapi.SH3_add
SH3_addc = _idaapi.SH3_addc
SH3_addv = _idaapi.SH3_addv
SH3_and = _idaapi.SH3_and
SH3_and_b = _idaapi.SH3_and_b
SH3_bf = _idaapi.SH3_bf
SH3_bf_s = _idaapi.SH3_bf_s
SH3_bra = _idaapi.SH3_bra
SH3_braf = _idaapi.SH3_braf
SH3_bsr = _idaapi.SH3_bsr
SH3_bsrf = _idaapi.SH3_bsrf
SH3_bt = _idaapi.SH3_bt
SH3_bt_s = _idaapi.SH3_bt_s
SH3_clrmac = _idaapi.SH3_clrmac
SH3_clrs = _idaapi.SH3_clrs
SH3_clrt = _idaapi.SH3_clrt
SH3_cmp_eq = _idaapi.SH3_cmp_eq
SH3_cmp_ge = _idaapi.SH3_cmp_ge
SH3_cmp_gt = _idaapi.SH3_cmp_gt
SH3_cmp_hi = _idaapi.SH3_cmp_hi
SH3_cmp_hs = _idaapi.SH3_cmp_hs
SH3_cmp_pl = _idaapi.SH3_cmp_pl
SH3_cmp_pz = _idaapi.SH3_cmp_pz
SH3_cmp_str = _idaapi.SH3_cmp_str
SH3_div0s = _idaapi.SH3_div0s
SH3_div0u = _idaapi.SH3_div0u
SH3_div1 = _idaapi.SH3_div1
SH3_dmuls_l = _idaapi.SH3_dmuls_l
SH3_dmulu_l = _idaapi.SH3_dmulu_l
SH3_dt = _idaapi.SH3_dt
SH3_exts_b = _idaapi.SH3_exts_b
SH3_exts_w = _idaapi.SH3_exts_w
SH3_extu_b = _idaapi.SH3_extu_b
SH3_extu_w = _idaapi.SH3_extu_w
SH3_jmp = _idaapi.SH3_jmp
SH3_jsr = _idaapi.SH3_jsr
SH3_ldc = _idaapi.SH3_ldc
SH3_ldc_l = _idaapi.SH3_ldc_l
SH3_lds = _idaapi.SH3_lds
SH3_lds_l = _idaapi.SH3_lds_l
SH3_ldtlb = _idaapi.SH3_ldtlb
SH3_mac_w = _idaapi.SH3_mac_w
SH3_mac_l = _idaapi.SH3_mac_l
SH3_mov = _idaapi.SH3_mov
SH3_mov_b = _idaapi.SH3_mov_b
SH3_mov_w = _idaapi.SH3_mov_w
SH3_mov_l = _idaapi.SH3_mov_l
SH3_movi = _idaapi.SH3_movi
SH3_movi_w = _idaapi.SH3_movi_w
SH3_movi_l = _idaapi.SH3_movi_l
SH3_movp_b = _idaapi.SH3_movp_b
SH3_movp_w = _idaapi.SH3_movp_w
SH3_movp_l = _idaapi.SH3_movp_l
SH3_movs_b = _idaapi.SH3_movs_b
SH3_movs_w = _idaapi.SH3_movs_w
SH3_movs_l = _idaapi.SH3_movs_l
SH3_mova = _idaapi.SH3_mova
SH3_movt = _idaapi.SH3_movt
SH3_mul = _idaapi.SH3_mul
SH3_muls = _idaapi.SH3_muls
SH3_mulu = _idaapi.SH3_mulu
SH3_neg = _idaapi.SH3_neg
SH3_negc = _idaapi.SH3_negc
SH3_nop = _idaapi.SH3_nop
SH3_not = _idaapi.SH3_not
SH3_or = _idaapi.SH3_or
SH3_or_b = _idaapi.SH3_or_b
SH3_pref = _idaapi.SH3_pref
SH3_rotcl = _idaapi.SH3_rotcl
SH3_rotcr = _idaapi.SH3_rotcr
SH3_rotl = _idaapi.SH3_rotl
SH3_rotr = _idaapi.SH3_rotr
SH3_rte = _idaapi.SH3_rte
SH3_rts = _idaapi.SH3_rts
SH3_sets = _idaapi.SH3_sets
SH3_sett = _idaapi.SH3_sett
SH3_shad = _idaapi.SH3_shad
SH3_shal = _idaapi.SH3_shal
SH3_shar = _idaapi.SH3_shar
SH3_shld = _idaapi.SH3_shld
SH3_shll = _idaapi.SH3_shll
SH3_shll2 = _idaapi.SH3_shll2
SH3_shll8 = _idaapi.SH3_shll8
SH3_shll16 = _idaapi.SH3_shll16
SH3_shlr = _idaapi.SH3_shlr
SH3_shlr2 = _idaapi.SH3_shlr2
SH3_shlr8 = _idaapi.SH3_shlr8
SH3_shlr16 = _idaapi.SH3_shlr16
SH3_sleep = _idaapi.SH3_sleep
SH3_stc = _idaapi.SH3_stc
SH3_stc_l = _idaapi.SH3_stc_l
SH3_sts = _idaapi.SH3_sts
SH3_sts_l = _idaapi.SH3_sts_l
SH3_sub = _idaapi.SH3_sub
SH3_subc = _idaapi.SH3_subc
SH3_subv = _idaapi.SH3_subv
SH3_swap_b = _idaapi.SH3_swap_b
SH3_swap_w = _idaapi.SH3_swap_w
SH3_tas_b = _idaapi.SH3_tas_b
SH3_trapa = _idaapi.SH3_trapa
SH3_tst = _idaapi.SH3_tst
SH3_tst_b = _idaapi.SH3_tst_b
SH3_xor = _idaapi.SH3_xor
SH3_xor_b = _idaapi.SH3_xor_b
SH3_xtrct = _idaapi.SH3_xtrct
SH4_fabs = _idaapi.SH4_fabs
SH4_fadd = _idaapi.SH4_fadd
SH4_fcmp_eq = _idaapi.SH4_fcmp_eq
SH4_fcmp_gt = _idaapi.SH4_fcmp_gt
SH4_fcnvds = _idaapi.SH4_fcnvds
SH4_fcnvsd = _idaapi.SH4_fcnvsd
SH4_fdiv = _idaapi.SH4_fdiv
SH4_fipr = _idaapi.SH4_fipr
SH4_fldi0 = _idaapi.SH4_fldi0
SH4_fldi1 = _idaapi.SH4_fldi1
SH4_flds = _idaapi.SH4_flds
SH4_float = _idaapi.SH4_float
SH4_fmac = _idaapi.SH4_fmac
SH4_fmov = _idaapi.SH4_fmov
SH4_fmov_s = _idaapi.SH4_fmov_s
SH4_fmovex = _idaapi.SH4_fmovex
SH4_fmul = _idaapi.SH4_fmul
SH4_fneg = _idaapi.SH4_fneg
SH4_frchg = _idaapi.SH4_frchg
SH4_fschg = _idaapi.SH4_fschg
SH4_fsqrt = _idaapi.SH4_fsqrt
SH4_fsts = _idaapi.SH4_fsts
SH4_fsub = _idaapi.SH4_fsub
SH4_ftrc = _idaapi.SH4_ftrc
SH4_ftrv = _idaapi.SH4_ftrv
SH4_ftstn = _idaapi.SH4_ftstn
SH4_movca_l = _idaapi.SH4_movca_l
SH4_ocbi = _idaapi.SH4_ocbi
SH4_ocbp = _idaapi.SH4_ocbp
SH4_ocbwb = _idaapi.SH4_ocbwb
SH4_fsca = _idaapi.SH4_fsca
SH4_last = _idaapi.SH4_last
Z8_null = _idaapi.Z8_null
Z8_adc = _idaapi.Z8_adc
Z8_add = _idaapi.Z8_add
Z8_and = _idaapi.Z8_and
Z8_call = _idaapi.Z8_call
Z8_ccf = _idaapi.Z8_ccf
Z8_clr = _idaapi.Z8_clr
Z8_com = _idaapi.Z8_com
Z8_cp = _idaapi.Z8_cp
Z8_da = _idaapi.Z8_da
Z8_dec = _idaapi.Z8_dec
Z8_decw = _idaapi.Z8_decw
Z8_di = _idaapi.Z8_di
Z8_djnz = _idaapi.Z8_djnz
Z8_ei = _idaapi.Z8_ei
Z8_halt = _idaapi.Z8_halt
Z8_inc = _idaapi.Z8_inc
Z8_incw = _idaapi.Z8_incw
Z8_iret = _idaapi.Z8_iret
Z8_jp = _idaapi.Z8_jp
Z8_jpcond = _idaapi.Z8_jpcond
Z8_jr = _idaapi.Z8_jr
Z8_jrcond = _idaapi.Z8_jrcond
Z8_ld = _idaapi.Z8_ld
Z8_ldc = _idaapi.Z8_ldc
Z8_ldci = _idaapi.Z8_ldci
Z8_lde = _idaapi.Z8_lde
Z8_ldei = _idaapi.Z8_ldei
Z8_nop = _idaapi.Z8_nop
Z8_or = _idaapi.Z8_or
Z8_pop = _idaapi.Z8_pop
Z8_push = _idaapi.Z8_push
Z8_rcf = _idaapi.Z8_rcf
Z8_ret = _idaapi.Z8_ret
Z8_rl = _idaapi.Z8_rl
Z8_rlc = _idaapi.Z8_rlc
Z8_rr = _idaapi.Z8_rr
Z8_rrc = _idaapi.Z8_rrc
Z8_sbc = _idaapi.Z8_sbc
Z8_scf = _idaapi.Z8_scf
Z8_sra = _idaapi.Z8_sra
Z8_srp = _idaapi.Z8_srp
Z8_stop = _idaapi.Z8_stop
Z8_sub = _idaapi.Z8_sub
Z8_swap = _idaapi.Z8_swap
Z8_tm = _idaapi.Z8_tm
Z8_tcm = _idaapi.Z8_tcm
Z8_xor = _idaapi.Z8_xor
Z8_wdh = _idaapi.Z8_wdh
Z8_wdt = _idaapi.Z8_wdt
Z8_last = _idaapi.Z8_last
AVR_null = _idaapi.AVR_null
AVR_add = _idaapi.AVR_add
AVR_adc = _idaapi.AVR_adc
AVR_adiw = _idaapi.AVR_adiw
AVR_sub = _idaapi.AVR_sub
AVR_subi = _idaapi.AVR_subi
AVR_sbc = _idaapi.AVR_sbc
AVR_sbci = _idaapi.AVR_sbci
AVR_sbiw = _idaapi.AVR_sbiw
AVR_and = _idaapi.AVR_and
AVR_andi = _idaapi.AVR_andi
AVR_or = _idaapi.AVR_or
AVR_ori = _idaapi.AVR_ori
AVR_eor = _idaapi.AVR_eor
AVR_com = _idaapi.AVR_com
AVR_neg = _idaapi.AVR_neg
AVR_sbr = _idaapi.AVR_sbr
AVR_cbr = _idaapi.AVR_cbr
AVR_inc = _idaapi.AVR_inc
AVR_dec = _idaapi.AVR_dec
AVR_tst = _idaapi.AVR_tst
AVR_clr = _idaapi.AVR_clr
AVR_ser = _idaapi.AVR_ser
AVR_cp = _idaapi.AVR_cp
AVR_cpc = _idaapi.AVR_cpc
AVR_cpi = _idaapi.AVR_cpi
AVR_mul = _idaapi.AVR_mul
AVR_rjmp = _idaapi.AVR_rjmp
AVR_ijmp = _idaapi.AVR_ijmp
AVR_jmp = _idaapi.AVR_jmp
AVR_rcall = _idaapi.AVR_rcall
AVR_icall = _idaapi.AVR_icall
AVR_call = _idaapi.AVR_call
AVR_ret = _idaapi.AVR_ret
AVR_reti = _idaapi.AVR_reti
AVR_cpse = _idaapi.AVR_cpse
AVR_sbrc = _idaapi.AVR_sbrc
AVR_sbrs = _idaapi.AVR_sbrs
AVR_sbic = _idaapi.AVR_sbic
AVR_sbis = _idaapi.AVR_sbis
AVR_brbs = _idaapi.AVR_brbs
AVR_brbc = _idaapi.AVR_brbc
AVR_breq = _idaapi.AVR_breq
AVR_brne = _idaapi.AVR_brne
AVR_brcs = _idaapi.AVR_brcs
AVR_brcc = _idaapi.AVR_brcc
AVR_brsh = _idaapi.AVR_brsh
AVR_brlo = _idaapi.AVR_brlo
AVR_brmi = _idaapi.AVR_brmi
AVR_brpl = _idaapi.AVR_brpl
AVR_brge = _idaapi.AVR_brge
AVR_brlt = _idaapi.AVR_brlt
AVR_brhs = _idaapi.AVR_brhs
AVR_brhc = _idaapi.AVR_brhc
AVR_brts = _idaapi.AVR_brts
AVR_brtc = _idaapi.AVR_brtc
AVR_brvs = _idaapi.AVR_brvs
AVR_brvc = _idaapi.AVR_brvc
AVR_brie = _idaapi.AVR_brie
AVR_brid = _idaapi.AVR_brid
AVR_mov = _idaapi.AVR_mov
AVR_ldi = _idaapi.AVR_ldi
AVR_lds = _idaapi.AVR_lds
AVR_ld = _idaapi.AVR_ld
AVR_ldd = _idaapi.AVR_ldd
AVR_sts = _idaapi.AVR_sts
AVR_st = _idaapi.AVR_st
AVR_std = _idaapi.AVR_std
AVR_lpm = _idaapi.AVR_lpm
AVR_in = _idaapi.AVR_in
AVR_out = _idaapi.AVR_out
AVR_push = _idaapi.AVR_push
AVR_pop = _idaapi.AVR_pop
AVR_lsl = _idaapi.AVR_lsl
AVR_lsr = _idaapi.AVR_lsr
AVR_rol = _idaapi.AVR_rol
AVR_ror = _idaapi.AVR_ror
AVR_asr = _idaapi.AVR_asr
AVR_swap = _idaapi.AVR_swap
AVR_bset = _idaapi.AVR_bset
AVR_bclr = _idaapi.AVR_bclr
AVR_sbi = _idaapi.AVR_sbi
AVR_cbi = _idaapi.AVR_cbi
AVR_bst = _idaapi.AVR_bst
AVR_bld = _idaapi.AVR_bld
AVR_sec = _idaapi.AVR_sec
AVR_clc = _idaapi.AVR_clc
AVR_sen = _idaapi.AVR_sen
AVR_cln = _idaapi.AVR_cln
AVR_sez = _idaapi.AVR_sez
AVR_clz = _idaapi.AVR_clz
AVR_sei = _idaapi.AVR_sei
AVR_cli = _idaapi.AVR_cli
AVR_ses = _idaapi.AVR_ses
AVR_cls = _idaapi.AVR_cls
AVR_sev = _idaapi.AVR_sev
AVR_clv = _idaapi.AVR_clv
AVR_set = _idaapi.AVR_set
AVR_clt = _idaapi.AVR_clt
AVR_seh = _idaapi.AVR_seh
AVR_clh = _idaapi.AVR_clh
AVR_nop = _idaapi.AVR_nop
AVR_sleep = _idaapi.AVR_sleep
AVR_wdr = _idaapi.AVR_wdr
AVR_elpm = _idaapi.AVR_elpm
AVR_espm = _idaapi.AVR_espm
AVR_fmul = _idaapi.AVR_fmul
AVR_fmuls = _idaapi.AVR_fmuls
AVR_fmulsu = _idaapi.AVR_fmulsu
AVR_movw = _idaapi.AVR_movw
AVR_muls = _idaapi.AVR_muls
AVR_mulsu = _idaapi.AVR_mulsu
AVR_spm = _idaapi.AVR_spm
AVR_last = _idaapi.AVR_last
MIPS_null = _idaapi.MIPS_null
MIPS_add = _idaapi.MIPS_add
MIPS_addu = _idaapi.MIPS_addu
MIPS_and = _idaapi.MIPS_and
MIPS_dadd = _idaapi.MIPS_dadd
MIPS_daddu = _idaapi.MIPS_daddu
MIPS_dsub = _idaapi.MIPS_dsub
MIPS_dsubu = _idaapi.MIPS_dsubu
MIPS_nor = _idaapi.MIPS_nor
MIPS_or = _idaapi.MIPS_or
MIPS_slt = _idaapi.MIPS_slt
MIPS_sltu = _idaapi.MIPS_sltu
MIPS_sub = _idaapi.MIPS_sub
MIPS_subu = _idaapi.MIPS_subu
MIPS_xor = _idaapi.MIPS_xor
MIPS_dsll = _idaapi.MIPS_dsll
MIPS_dsll32 = _idaapi.MIPS_dsll32
MIPS_dsra = _idaapi.MIPS_dsra
MIPS_dsra32 = _idaapi.MIPS_dsra32
MIPS_dsrl = _idaapi.MIPS_dsrl
MIPS_dsrl32 = _idaapi.MIPS_dsrl32
MIPS_sll = _idaapi.MIPS_sll
MIPS_sra = _idaapi.MIPS_sra
MIPS_srl = _idaapi.MIPS_srl
MIPS_dsllv = _idaapi.MIPS_dsllv
MIPS_dsrav = _idaapi.MIPS_dsrav
MIPS_dsrlv = _idaapi.MIPS_dsrlv
MIPS_sllv = _idaapi.MIPS_sllv
MIPS_srav = _idaapi.MIPS_srav
MIPS_srlv = _idaapi.MIPS_srlv
MIPS_addi = _idaapi.MIPS_addi
MIPS_addiu = _idaapi.MIPS_addiu
MIPS_daddi = _idaapi.MIPS_daddi
MIPS_daddiu = _idaapi.MIPS_daddiu
MIPS_slti = _idaapi.MIPS_slti
MIPS_sltiu = _idaapi.MIPS_sltiu
MIPS_andi = _idaapi.MIPS_andi
MIPS_ori = _idaapi.MIPS_ori
MIPS_xori = _idaapi.MIPS_xori
MIPS_teq = _idaapi.MIPS_teq
MIPS_tge = _idaapi.MIPS_tge
MIPS_tgeu = _idaapi.MIPS_tgeu
MIPS_tlt = _idaapi.MIPS_tlt
MIPS_tltu = _idaapi.MIPS_tltu
MIPS_tne = _idaapi.MIPS_tne
MIPS_cfc1 = _idaapi.MIPS_cfc1
MIPS_cfc2 = _idaapi.MIPS_cfc2
MIPS_ctc1 = _idaapi.MIPS_ctc1
MIPS_ctc2 = _idaapi.MIPS_ctc2
MIPS_dmfc0 = _idaapi.MIPS_dmfc0
MIPS_qmfc2 = _idaapi.MIPS_qmfc2
MIPS_dmtc0 = _idaapi.MIPS_dmtc0
MIPS_qmtc2 = _idaapi.MIPS_qmtc2
MIPS_mfc0 = _idaapi.MIPS_mfc0
MIPS_mfc1 = _idaapi.MIPS_mfc1
MIPS_mfc2 = _idaapi.MIPS_mfc2
MIPS_mtc0 = _idaapi.MIPS_mtc0
MIPS_mtc1 = _idaapi.MIPS_mtc1
MIPS_mtc2 = _idaapi.MIPS_mtc2
MIPS_teqi = _idaapi.MIPS_teqi
MIPS_tgei = _idaapi.MIPS_tgei
MIPS_tgeiu = _idaapi.MIPS_tgeiu
MIPS_tlti = _idaapi.MIPS_tlti
MIPS_tltiu = _idaapi.MIPS_tltiu
MIPS_tnei = _idaapi.MIPS_tnei
MIPS_ddiv = _idaapi.MIPS_ddiv
MIPS_ddivu = _idaapi.MIPS_ddivu
MIPS_div = _idaapi.MIPS_div
MIPS_divu = _idaapi.MIPS_divu
MIPS_dmult = _idaapi.MIPS_dmult
MIPS_dmultu = _idaapi.MIPS_dmultu
MIPS_mult = _idaapi.MIPS_mult
MIPS_multu = _idaapi.MIPS_multu
MIPS_mthi = _idaapi.MIPS_mthi
MIPS_mtlo = _idaapi.MIPS_mtlo
MIPS_mfhi = _idaapi.MIPS_mfhi
MIPS_mflo = _idaapi.MIPS_mflo
MIPS_cop0 = _idaapi.MIPS_cop0
MIPS_cop1 = _idaapi.MIPS_cop1
MIPS_cop2 = _idaapi.MIPS_cop2
MIPS_break = _idaapi.MIPS_break
MIPS_syscall = _idaapi.MIPS_syscall
MIPS_bc0f = _idaapi.MIPS_bc0f
MIPS_bc1f = _idaapi.MIPS_bc1f
MIPS_bc2f = _idaapi.MIPS_bc2f
MIPS_bc3f = _idaapi.MIPS_bc3f
MIPS_bc0fl = _idaapi.MIPS_bc0fl
MIPS_bc1fl = _idaapi.MIPS_bc1fl
MIPS_bc2fl = _idaapi.MIPS_bc2fl
MIPS_bc3fl = _idaapi.MIPS_bc3fl
MIPS_bc0t = _idaapi.MIPS_bc0t
MIPS_bc1t = _idaapi.MIPS_bc1t
MIPS_bc2t = _idaapi.MIPS_bc2t
MIPS_bc3t = _idaapi.MIPS_bc3t
MIPS_bc0tl = _idaapi.MIPS_bc0tl
MIPS_bc1tl = _idaapi.MIPS_bc1tl
MIPS_bc2tl = _idaapi.MIPS_bc2tl
MIPS_bc3tl = _idaapi.MIPS_bc3tl
MIPS_bgez = _idaapi.MIPS_bgez
MIPS_bgezal = _idaapi.MIPS_bgezal
MIPS_bgezall = _idaapi.MIPS_bgezall
MIPS_bgezl = _idaapi.MIPS_bgezl
MIPS_bgtz = _idaapi.MIPS_bgtz
MIPS_bgtzl = _idaapi.MIPS_bgtzl
MIPS_blez = _idaapi.MIPS_blez
MIPS_blezl = _idaapi.MIPS_blezl
MIPS_bltz = _idaapi.MIPS_bltz
MIPS_bltzal = _idaapi.MIPS_bltzal
MIPS_bltzall = _idaapi.MIPS_bltzall
MIPS_bltzl = _idaapi.MIPS_bltzl
MIPS_beq = _idaapi.MIPS_beq
MIPS_beql = _idaapi.MIPS_beql
MIPS_bne = _idaapi.MIPS_bne
MIPS_bnel = _idaapi.MIPS_bnel
MIPS_jalr = _idaapi.MIPS_jalr
MIPS_j = _idaapi.MIPS_j
MIPS_jr = _idaapi.MIPS_jr
MIPS_jal = _idaapi.MIPS_jal
MIPS_jalx = _idaapi.MIPS_jalx
MIPS_cache = _idaapi.MIPS_cache
MIPS_lb = _idaapi.MIPS_lb
MIPS_lbu = _idaapi.MIPS_lbu
MIPS_ldl = _idaapi.MIPS_ldl
MIPS_ldr = _idaapi.MIPS_ldr
MIPS_lwl = _idaapi.MIPS_lwl
MIPS_lwr = _idaapi.MIPS_lwr
MIPS_ld = _idaapi.MIPS_ld
MIPS_lld = _idaapi.MIPS_lld
MIPS_ldc1 = _idaapi.MIPS_ldc1
MIPS_ldc2 = _idaapi.MIPS_ldc2
MIPS_ll = _idaapi.MIPS_ll
MIPS_lw = _idaapi.MIPS_lw
MIPS_lwu = _idaapi.MIPS_lwu
MIPS_lh = _idaapi.MIPS_lh
MIPS_lhu = _idaapi.MIPS_lhu
MIPS_lui = _idaapi.MIPS_lui
MIPS_lwc1 = _idaapi.MIPS_lwc1
MIPS_lwc2 = _idaapi.MIPS_lwc2
MIPS_sb = _idaapi.MIPS_sb
MIPS_sdl = _idaapi.MIPS_sdl
MIPS_sdr = _idaapi.MIPS_sdr
MIPS_swl = _idaapi.MIPS_swl
MIPS_swr = _idaapi.MIPS_swr
MIPS_scd = _idaapi.MIPS_scd
MIPS_sd = _idaapi.MIPS_sd
MIPS_sdc1 = _idaapi.MIPS_sdc1
MIPS_sdc2 = _idaapi.MIPS_sdc2
MIPS_sc = _idaapi.MIPS_sc
MIPS_sw = _idaapi.MIPS_sw
MIPS_sh = _idaapi.MIPS_sh
MIPS_swc1 = _idaapi.MIPS_swc1
MIPS_swc2 = _idaapi.MIPS_swc2
MIPS_sync = _idaapi.MIPS_sync
MIPS_eret = _idaapi.MIPS_eret
MIPS_tlbp = _idaapi.MIPS_tlbp
MIPS_tlbr = _idaapi.MIPS_tlbr
MIPS_tlbwi = _idaapi.MIPS_tlbwi
MIPS_tlbwr = _idaapi.MIPS_tlbwr
MIPS_fadd = _idaapi.MIPS_fadd
MIPS_fsub = _idaapi.MIPS_fsub
MIPS_fmul = _idaapi.MIPS_fmul
MIPS_fdiv = _idaapi.MIPS_fdiv
MIPS_fabs = _idaapi.MIPS_fabs
MIPS_fcvt_s = _idaapi.MIPS_fcvt_s
MIPS_fcvt_d = _idaapi.MIPS_fcvt_d
MIPS_fcvt_w = _idaapi.MIPS_fcvt_w
MIPS_fcvt_l = _idaapi.MIPS_fcvt_l
MIPS_fround_l = _idaapi.MIPS_fround_l
MIPS_ftrunc_l = _idaapi.MIPS_ftrunc_l
MIPS_fceil_l = _idaapi.MIPS_fceil_l
MIPS_ffloor_l = _idaapi.MIPS_ffloor_l
MIPS_fround_w = _idaapi.MIPS_fround_w
MIPS_ftrunc_w = _idaapi.MIPS_ftrunc_w
MIPS_fceil_w = _idaapi.MIPS_fceil_w
MIPS_ffloor_w = _idaapi.MIPS_ffloor_w
MIPS_fmov = _idaapi.MIPS_fmov
MIPS_fneg = _idaapi.MIPS_fneg
MIPS_fsqrt = _idaapi.MIPS_fsqrt
MIPS_fc_f = _idaapi.MIPS_fc_f
MIPS_fc_un = _idaapi.MIPS_fc_un
MIPS_fc_eq = _idaapi.MIPS_fc_eq
MIPS_fc_ueq = _idaapi.MIPS_fc_ueq
MIPS_fc_olt = _idaapi.MIPS_fc_olt
MIPS_fc_ult = _idaapi.MIPS_fc_ult
MIPS_fc_ole = _idaapi.MIPS_fc_ole
MIPS_fc_ule = _idaapi.MIPS_fc_ule
MIPS_fc_sf = _idaapi.MIPS_fc_sf
MIPS_fc_ngle = _idaapi.MIPS_fc_ngle
MIPS_fc_seq = _idaapi.MIPS_fc_seq
MIPS_fc_ngl = _idaapi.MIPS_fc_ngl
MIPS_fc_lt = _idaapi.MIPS_fc_lt
MIPS_fc_nge = _idaapi.MIPS_fc_nge
MIPS_fc_le = _idaapi.MIPS_fc_le
MIPS_fc_ngt = _idaapi.MIPS_fc_ngt
MIPS_nop = _idaapi.MIPS_nop
MIPS_mov = _idaapi.MIPS_mov
MIPS_neg = _idaapi.MIPS_neg
MIPS_negu = _idaapi.MIPS_negu
MIPS_bnez = _idaapi.MIPS_bnez
MIPS_bnezl = _idaapi.MIPS_bnezl
MIPS_beqz = _idaapi.MIPS_beqz
MIPS_beqzl = _idaapi.MIPS_beqzl
MIPS_b = _idaapi.MIPS_b
MIPS_bal = _idaapi.MIPS_bal
MIPS_li = _idaapi.MIPS_li
MIPS_la = _idaapi.MIPS_la
MIPS_pref = _idaapi.MIPS_pref
MIPS_ldxc1 = _idaapi.MIPS_ldxc1
MIPS_lwxc1 = _idaapi.MIPS_lwxc1
MIPS_sdxc1 = _idaapi.MIPS_sdxc1
MIPS_swxc1 = _idaapi.MIPS_swxc1
MIPS_madd_s = _idaapi.MIPS_madd_s
MIPS_madd_d = _idaapi.MIPS_madd_d
MIPS_msub_s = _idaapi.MIPS_msub_s
MIPS_msub_d = _idaapi.MIPS_msub_d
MIPS_movf = _idaapi.MIPS_movf
MIPS_movt = _idaapi.MIPS_movt
MIPS_movn = _idaapi.MIPS_movn
MIPS_movz = _idaapi.MIPS_movz
MIPS_fmovf = _idaapi.MIPS_fmovf
MIPS_fmovt = _idaapi.MIPS_fmovt
MIPS_fmovn = _idaapi.MIPS_fmovn
MIPS_fmovz = _idaapi.MIPS_fmovz
MIPS_nmadd_s = _idaapi.MIPS_nmadd_s
MIPS_nmadd_d = _idaapi.MIPS_nmadd_d
MIPS_nmsub_s = _idaapi.MIPS_nmsub_s
MIPS_nmsub_d = _idaapi.MIPS_nmsub_d
MIPS_prefx = _idaapi.MIPS_prefx
MIPS_frecip = _idaapi.MIPS_frecip
MIPS_frsqrt = _idaapi.MIPS_frsqrt
MIPS_lbv = _idaapi.MIPS_lbv
MIPS_lsv = _idaapi.MIPS_lsv
MIPS_llv = _idaapi.MIPS_llv
MIPS_ldv = _idaapi.MIPS_ldv
MIPS_lqv = _idaapi.MIPS_lqv
MIPS_lrv = _idaapi.MIPS_lrv
MIPS_lpv = _idaapi.MIPS_lpv
MIPS_luv = _idaapi.MIPS_luv
MIPS_lhv = _idaapi.MIPS_lhv
MIPS_lfv = _idaapi.MIPS_lfv
MIPS_lwv = _idaapi.MIPS_lwv
MIPS_ltv = _idaapi.MIPS_ltv
MIPS_sbv = _idaapi.MIPS_sbv
MIPS_ssv = _idaapi.MIPS_ssv
MIPS_slv = _idaapi.MIPS_slv
MIPS_sdv = _idaapi.MIPS_sdv
MIPS_sqv = _idaapi.MIPS_sqv
MIPS_srv = _idaapi.MIPS_srv
MIPS_spv = _idaapi.MIPS_spv
MIPS_suv = _idaapi.MIPS_suv
MIPS_shv = _idaapi.MIPS_shv
MIPS_sfv = _idaapi.MIPS_sfv
MIPS_swv = _idaapi.MIPS_swv
MIPS_stv = _idaapi.MIPS_stv
MIPS_vmulf = _idaapi.MIPS_vmulf
MIPS_vmacf = _idaapi.MIPS_vmacf
MIPS_vmulu = _idaapi.MIPS_vmulu
MIPS_vmacu = _idaapi.MIPS_vmacu
MIPS_vrndp = _idaapi.MIPS_vrndp
MIPS_vrndn = _idaapi.MIPS_vrndn
MIPS_vmulq = _idaapi.MIPS_vmulq
MIPS_vmacq = _idaapi.MIPS_vmacq
MIPS_vmudh = _idaapi.MIPS_vmudh
MIPS_vmadh = _idaapi.MIPS_vmadh
MIPS_vmudm = _idaapi.MIPS_vmudm
MIPS_vmadm = _idaapi.MIPS_vmadm
MIPS_vmudn = _idaapi.MIPS_vmudn
MIPS_vmadn = _idaapi.MIPS_vmadn
MIPS_vmudl = _idaapi.MIPS_vmudl
MIPS_vmadl = _idaapi.MIPS_vmadl
MIPS_vadd = _idaapi.MIPS_vadd
MIPS_vsub = _idaapi.MIPS_vsub
MIPS_vsut = _idaapi.MIPS_vsut
MIPS_vabs = _idaapi.MIPS_vabs
MIPS_vaddc = _idaapi.MIPS_vaddc
MIPS_vsubc = _idaapi.MIPS_vsubc
MIPS_vaddb = _idaapi.MIPS_vaddb
MIPS_vsubb = _idaapi.MIPS_vsubb
MIPS_vaccb = _idaapi.MIPS_vaccb
MIPS_vsucb = _idaapi.MIPS_vsucb
MIPS_vsad = _idaapi.MIPS_vsad
MIPS_vsac = _idaapi.MIPS_vsac
MIPS_vsum = _idaapi.MIPS_vsum
MIPS_vsaw = _idaapi.MIPS_vsaw
MIPS_vlt = _idaapi.MIPS_vlt
MIPS_veq = _idaapi.MIPS_veq
MIPS_vne = _idaapi.MIPS_vne
MIPS_vge = _idaapi.MIPS_vge
MIPS_vcl = _idaapi.MIPS_vcl
MIPS_vch = _idaapi.MIPS_vch
MIPS_vcr = _idaapi.MIPS_vcr
MIPS_vmrg = _idaapi.MIPS_vmrg
MIPS_vand = _idaapi.MIPS_vand
MIPS_vnand = _idaapi.MIPS_vnand
MIPS_vor = _idaapi.MIPS_vor
MIPS_vnor = _idaapi.MIPS_vnor
MIPS_vxor = _idaapi.MIPS_vxor
MIPS_vnxor = _idaapi.MIPS_vnxor
MIPS_vnoop = _idaapi.MIPS_vnoop
MIPS_vmov = _idaapi.MIPS_vmov
MIPS_vrcp = _idaapi.MIPS_vrcp
MIPS_vrsq = _idaapi.MIPS_vrsq
MIPS_vrcph = _idaapi.MIPS_vrcph
MIPS_vrsqh = _idaapi.MIPS_vrsqh
MIPS_vrcpl = _idaapi.MIPS_vrcpl
MIPS_vrsql = _idaapi.MIPS_vrsql
MIPS_vinst = _idaapi.MIPS_vinst
MIPS_vextt = _idaapi.MIPS_vextt
MIPS_vinsq = _idaapi.MIPS_vinsq
MIPS_vextq = _idaapi.MIPS_vextq
MIPS_vinsn = _idaapi.MIPS_vinsn
MIPS_vextn = _idaapi.MIPS_vextn
MIPS_cfc0 = _idaapi.MIPS_cfc0
MIPS_R5900_first = _idaapi.MIPS_R5900_first
MIPS_ctc0 = _idaapi.MIPS_ctc0
MIPS_mtsa = _idaapi.MIPS_mtsa
MIPS_mfsa = _idaapi.MIPS_mfsa
MIPS_mtsab = _idaapi.MIPS_mtsab
MIPS_mtsah = _idaapi.MIPS_mtsah
MIPS_fadda = _idaapi.MIPS_fadda
MIPS_fsuba = _idaapi.MIPS_fsuba
MIPS_fmula = _idaapi.MIPS_fmula
MIPS_fmadda = _idaapi.MIPS_fmadda
MIPS_fmsuba = _idaapi.MIPS_fmsuba
MIPS_fmadd = _idaapi.MIPS_fmadd
MIPS_fmsub = _idaapi.MIPS_fmsub
MIPS_fmax = _idaapi.MIPS_fmax
MIPS_fmin = _idaapi.MIPS_fmin
MIPS_plzcw = _idaapi.MIPS_plzcw
MIPS_mthi1 = _idaapi.MIPS_mthi1
MIPS_mtlo1 = _idaapi.MIPS_mtlo1
MIPS_pmthl_lw = _idaapi.MIPS_pmthl_lw
MIPS_pmthi = _idaapi.MIPS_pmthi
MIPS_pmtlo = _idaapi.MIPS_pmtlo
MIPS_div1 = _idaapi.MIPS_div1
MIPS_divu1 = _idaapi.MIPS_divu1
MIPS_pdivw = _idaapi.MIPS_pdivw
MIPS_pdivuw = _idaapi.MIPS_pdivuw
MIPS_pdivbw = _idaapi.MIPS_pdivbw
MIPS_paddw = _idaapi.MIPS_paddw
MIPS_pmaddw = _idaapi.MIPS_pmaddw
MIPS_mult1 = _idaapi.MIPS_mult1
MIPS_multu1 = _idaapi.MIPS_multu1
MIPS_madd1 = _idaapi.MIPS_madd1
MIPS_maddu1 = _idaapi.MIPS_maddu1
MIPS_pmadduw = _idaapi.MIPS_pmadduw
MIPS_psubw = _idaapi.MIPS_psubw
MIPS_pcgtw = _idaapi.MIPS_pcgtw
MIPS_psllvw = _idaapi.MIPS_psllvw
MIPS_pceqw = _idaapi.MIPS_pceqw
MIPS_pmaxw = _idaapi.MIPS_pmaxw
MIPS_psrlvw = _idaapi.MIPS_psrlvw
MIPS_pminw = _idaapi.MIPS_pminw
MIPS_psravw = _idaapi.MIPS_psravw
MIPS_paddh = _idaapi.MIPS_paddh
MIPS_pmsubw = _idaapi.MIPS_pmsubw
MIPS_padsbh = _idaapi.MIPS_padsbh
MIPS_psubh = _idaapi.MIPS_psubh
MIPS_pcgth = _idaapi.MIPS_pcgth
MIPS_pceqh = _idaapi.MIPS_pceqh
MIPS_pmaxh = _idaapi.MIPS_pmaxh
MIPS_pminh = _idaapi.MIPS_pminh
MIPS_paddb = _idaapi.MIPS_paddb
MIPS_psubb = _idaapi.MIPS_psubb
MIPS_pcgtb = _idaapi.MIPS_pcgtb
MIPS_pinth = _idaapi.MIPS_pinth
MIPS_pceqb = _idaapi.MIPS_pceqb
MIPS_pintoh = _idaapi.MIPS_pintoh
MIPS_pmultw = _idaapi.MIPS_pmultw
MIPS_pmultuw = _idaapi.MIPS_pmultuw
MIPS_pcpyld = _idaapi.MIPS_pcpyld
MIPS_pcpyud = _idaapi.MIPS_pcpyud
MIPS_paddsw = _idaapi.MIPS_paddsw
MIPS_pmaddh = _idaapi.MIPS_pmaddh
MIPS_padduw = _idaapi.MIPS_padduw
MIPS_psubsw = _idaapi.MIPS_psubsw
MIPS_phmadh = _idaapi.MIPS_phmadh
MIPS_psubuw = _idaapi.MIPS_psubuw
MIPS_pextlw = _idaapi.MIPS_pextlw
MIPS_pand = _idaapi.MIPS_pand
MIPS_pextuw = _idaapi.MIPS_pextuw
MIPS_por = _idaapi.MIPS_por
MIPS_ppacw = _idaapi.MIPS_ppacw
MIPS_pxor = _idaapi.MIPS_pxor
MIPS_pnor = _idaapi.MIPS_pnor
MIPS_paddsh = _idaapi.MIPS_paddsh
MIPS_pmsubh = _idaapi.MIPS_pmsubh
MIPS_padduh = _idaapi.MIPS_padduh
MIPS_psubsh = _idaapi.MIPS_psubsh
MIPS_phmsbh = _idaapi.MIPS_phmsbh
MIPS_psubuh = _idaapi.MIPS_psubuh
MIPS_pextlh = _idaapi.MIPS_pextlh
MIPS_pextuh = _idaapi.MIPS_pextuh
MIPS_ppach = _idaapi.MIPS_ppach
MIPS_paddsb = _idaapi.MIPS_paddsb
MIPS_paddub = _idaapi.MIPS_paddub
MIPS_psubsb = _idaapi.MIPS_psubsb
MIPS_psubub = _idaapi.MIPS_psubub
MIPS_pextlb = _idaapi.MIPS_pextlb
MIPS_pextub = _idaapi.MIPS_pextub
MIPS_ppacb = _idaapi.MIPS_ppacb
MIPS_qfsrv = _idaapi.MIPS_qfsrv
MIPS_pmulth = _idaapi.MIPS_pmulth
MIPS_pabsw = _idaapi.MIPS_pabsw
MIPS_pabsh = _idaapi.MIPS_pabsh
MIPS_pexoh = _idaapi.MIPS_pexoh
MIPS_pexch = _idaapi.MIPS_pexch
MIPS_prevh = _idaapi.MIPS_prevh
MIPS_pcpyh = _idaapi.MIPS_pcpyh
MIPS_pext5 = _idaapi.MIPS_pext5
MIPS_pexow = _idaapi.MIPS_pexow
MIPS_pexcw = _idaapi.MIPS_pexcw
MIPS_ppac5 = _idaapi.MIPS_ppac5
MIPS_prot3w = _idaapi.MIPS_prot3w
MIPS_psllh = _idaapi.MIPS_psllh
MIPS_psrlh = _idaapi.MIPS_psrlh
MIPS_psrah = _idaapi.MIPS_psrah
MIPS_psllw = _idaapi.MIPS_psllw
MIPS_psrlw = _idaapi.MIPS_psrlw
MIPS_psraw = _idaapi.MIPS_psraw
MIPS_mfhi1 = _idaapi.MIPS_mfhi1
MIPS_mflo1 = _idaapi.MIPS_mflo1
MIPS_pmfhi = _idaapi.MIPS_pmfhi
MIPS_pmflo = _idaapi.MIPS_pmflo
MIPS_pmfhl = _idaapi.MIPS_pmfhl
MIPS_lq = _idaapi.MIPS_lq
MIPS_sq = _idaapi.MIPS_sq
MIPS_lqc2 = _idaapi.MIPS_lqc2
MIPS_sqc2 = _idaapi.MIPS_sqc2
MIPS_madd_r5900 = _idaapi.MIPS_madd_r5900
MIPS_maddu_r5900 = _idaapi.MIPS_maddu_r5900
MIPS_mult3 = _idaapi.MIPS_mult3
MIPS_multu3 = _idaapi.MIPS_multu3
MIPS_R5900_last = _idaapi.MIPS_R5900_last
MIPS16_first = _idaapi.MIPS16_first
MIPS16_addiu = _idaapi.MIPS16_addiu
MIPS16_addu = _idaapi.MIPS16_addu
MIPS16_and = _idaapi.MIPS16_and
MIPS16_b = _idaapi.MIPS16_b
MIPS16_beqz = _idaapi.MIPS16_beqz
MIPS16_bnez = _idaapi.MIPS16_bnez
MIPS16_break = _idaapi.MIPS16_break
MIPS16_bteqz = _idaapi.MIPS16_bteqz
MIPS16_btnez = _idaapi.MIPS16_btnez
MIPS16_cmp = _idaapi.MIPS16_cmp
MIPS16_cmpi = _idaapi.MIPS16_cmpi
MIPS16_daddiu = _idaapi.MIPS16_daddiu
MIPS16_daddu = _idaapi.MIPS16_daddu
MIPS16_ddiv = _idaapi.MIPS16_ddiv
MIPS16_ddivu = _idaapi.MIPS16_ddivu
MIPS16_div = _idaapi.MIPS16_div
MIPS16_divu = _idaapi.MIPS16_divu
MIPS16_dmult = _idaapi.MIPS16_dmult
MIPS16_dmultu = _idaapi.MIPS16_dmultu
MIPS16_dsll = _idaapi.MIPS16_dsll
MIPS16_dsllv = _idaapi.MIPS16_dsllv
MIPS16_dsra = _idaapi.MIPS16_dsra
MIPS16_dsrav = _idaapi.MIPS16_dsrav
MIPS16_dsrl = _idaapi.MIPS16_dsrl
MIPS16_dsrlv = _idaapi.MIPS16_dsrlv
MIPS16_dsubu = _idaapi.MIPS16_dsubu
MIPS16_extend = _idaapi.MIPS16_extend
MIPS16_jal = _idaapi.MIPS16_jal
MIPS16_jalr = _idaapi.MIPS16_jalr
MIPS16_jalx = _idaapi.MIPS16_jalx
MIPS16_jr = _idaapi.MIPS16_jr
MIPS16_lb = _idaapi.MIPS16_lb
MIPS16_lbu = _idaapi.MIPS16_lbu
MIPS16_ld = _idaapi.MIPS16_ld
MIPS16_lh = _idaapi.MIPS16_lh
MIPS16_lhu = _idaapi.MIPS16_lhu
MIPS16_li = _idaapi.MIPS16_li
MIPS16_lw = _idaapi.MIPS16_lw
MIPS16_lwu = _idaapi.MIPS16_lwu
MIPS16_mfhi = _idaapi.MIPS16_mfhi
MIPS16_mflo = _idaapi.MIPS16_mflo
MIPS16_move = _idaapi.MIPS16_move
MIPS16_mult = _idaapi.MIPS16_mult
MIPS16_multu = _idaapi.MIPS16_multu
MIPS16_neg = _idaapi.MIPS16_neg
MIPS16_not = _idaapi.MIPS16_not
MIPS16_or = _idaapi.MIPS16_or
MIPS16_sb = _idaapi.MIPS16_sb
MIPS16_sd = _idaapi.MIPS16_sd
MIPS16_sh = _idaapi.MIPS16_sh
MIPS16_sll = _idaapi.MIPS16_sll
MIPS16_sllv = _idaapi.MIPS16_sllv
MIPS16_slt = _idaapi.MIPS16_slt
MIPS16_slti = _idaapi.MIPS16_slti
MIPS16_sltiu = _idaapi.MIPS16_sltiu
MIPS16_sltu = _idaapi.MIPS16_sltu
MIPS16_sra = _idaapi.MIPS16_sra
MIPS16_srav = _idaapi.MIPS16_srav
MIPS16_srl = _idaapi.MIPS16_srl
MIPS16_srlv = _idaapi.MIPS16_srlv
MIPS16_subu = _idaapi.MIPS16_subu
MIPS16_sw = _idaapi.MIPS16_sw
MIPS16_xor = _idaapi.MIPS16_xor
MIPS16_dla = _idaapi.MIPS16_dla
MIPS16_la = _idaapi.MIPS16_la
MIPS16_nop = _idaapi.MIPS16_nop
MIPS16_last = _idaapi.MIPS16_last
MIPS_clo = _idaapi.MIPS_clo
MIPS_clz = _idaapi.MIPS_clz
MIPS_madd = _idaapi.MIPS_madd
MIPS_maddu = _idaapi.MIPS_maddu
MIPS_msub = _idaapi.MIPS_msub
MIPS_msubu = _idaapi.MIPS_msubu
MIPS_mul = _idaapi.MIPS_mul
MIPS_sdbbp = _idaapi.MIPS_sdbbp
MIPS_wait = _idaapi.MIPS_wait
MIPS_alnv_ps = _idaapi.MIPS_alnv_ps
MIPS_deret = _idaapi.MIPS_deret
MIPS_di = _idaapi.MIPS_di
MIPS_ehb = _idaapi.MIPS_ehb
MIPS_ei = _idaapi.MIPS_ei
MIPS_ext = _idaapi.MIPS_ext
MIPS_fcvt_ps = _idaapi.MIPS_fcvt_ps
MIPS_fcvt_s_pl = _idaapi.MIPS_fcvt_s_pl
MIPS_fcvt_s_pu = _idaapi.MIPS_fcvt_s_pu
MIPS_ins = _idaapi.MIPS_ins
MIPS_jalr_hb = _idaapi.MIPS_jalr_hb
MIPS_jr_hb = _idaapi.MIPS_jr_hb
MIPS_luxc1 = _idaapi.MIPS_luxc1
MIPS_madd_ps = _idaapi.MIPS_madd_ps
MIPS_mfhc1 = _idaapi.MIPS_mfhc1
MIPS_mfhc2 = _idaapi.MIPS_mfhc2
MIPS_msub_ps = _idaapi.MIPS_msub_ps
MIPS_mthc1 = _idaapi.MIPS_mthc1
MIPS_mthc2 = _idaapi.MIPS_mthc2
MIPS_nmadd_ps = _idaapi.MIPS_nmadd_ps
MIPS_nmsub_ps = _idaapi.MIPS_nmsub_ps
MIPS_pll = _idaapi.MIPS_pll
MIPS_plu = _idaapi.MIPS_plu
MIPS_pul = _idaapi.MIPS_pul
MIPS_puu = _idaapi.MIPS_puu
MIPS_rdhwr = _idaapi.MIPS_rdhwr
MIPS_rdpgpr = _idaapi.MIPS_rdpgpr
MIPS_rotr = _idaapi.MIPS_rotr
MIPS_rotrv = _idaapi.MIPS_rotrv
MIPS_seb = _idaapi.MIPS_seb
MIPS_seh = _idaapi.MIPS_seh
MIPS_suxc1 = _idaapi.MIPS_suxc1
MIPS_synci = _idaapi.MIPS_synci
MIPS_wrpgpr = _idaapi.MIPS_wrpgpr
MIPS_wsbh = _idaapi.MIPS_wsbh
MIPS_dmfc1 = _idaapi.MIPS_dmfc1
MIPS_dmtc1 = _idaapi.MIPS_dmtc1
MIPS_last = _idaapi.MIPS_last
H8_null = _idaapi.H8_null
H8_add = _idaapi.H8_add
H8_adds = _idaapi.H8_adds
H8_addx = _idaapi.H8_addx
H8_and = _idaapi.H8_and
H8_andc = _idaapi.H8_andc
H8_band = _idaapi.H8_band
H8_bra = _idaapi.H8_bra
H8_brn = _idaapi.H8_brn
H8_bhi = _idaapi.H8_bhi
H8_bls = _idaapi.H8_bls
H8_bcc = _idaapi.H8_bcc
H8_bcs = _idaapi.H8_bcs
H8_bne = _idaapi.H8_bne
H8_beq = _idaapi.H8_beq
H8_bvc = _idaapi.H8_bvc
H8_bvs = _idaapi.H8_bvs
H8_bpl = _idaapi.H8_bpl
H8_bmi = _idaapi.H8_bmi
H8_bge = _idaapi.H8_bge
H8_blt = _idaapi.H8_blt
H8_bgt = _idaapi.H8_bgt
H8_ble = _idaapi.H8_ble
H8_bclr = _idaapi.H8_bclr
H8_biand = _idaapi.H8_biand
H8_bild = _idaapi.H8_bild
H8_bior = _idaapi.H8_bior
H8_bist = _idaapi.H8_bist
H8_bixor = _idaapi.H8_bixor
H8_bld = _idaapi.H8_bld
H8_bnot = _idaapi.H8_bnot
H8_bor = _idaapi.H8_bor
H8_bset = _idaapi.H8_bset
H8_bsr = _idaapi.H8_bsr
H8_bst = _idaapi.H8_bst
H8_btst = _idaapi.H8_btst
H8_bxor = _idaapi.H8_bxor
H8_clrmac = _idaapi.H8_clrmac
H8_cmp = _idaapi.H8_cmp
H8_daa = _idaapi.H8_daa
H8_das = _idaapi.H8_das
H8_dec = _idaapi.H8_dec
H8_divxs = _idaapi.H8_divxs
H8_divxu = _idaapi.H8_divxu
H8_eepmov = _idaapi.H8_eepmov
H8_exts = _idaapi.H8_exts
H8_extu = _idaapi.H8_extu
H8_inc = _idaapi.H8_inc
H8_jmp = _idaapi.H8_jmp
H8_jsr = _idaapi.H8_jsr
H8_ldc = _idaapi.H8_ldc
H8_ldm = _idaapi.H8_ldm
H8_ldmac = _idaapi.H8_ldmac
H8_mac = _idaapi.H8_mac
H8_mov = _idaapi.H8_mov
H8_movfpe = _idaapi.H8_movfpe
H8_movtpe = _idaapi.H8_movtpe
H8_mulxs = _idaapi.H8_mulxs
H8_mulxu = _idaapi.H8_mulxu
H8_neg = _idaapi.H8_neg
H8_nop = _idaapi.H8_nop
H8_not = _idaapi.H8_not
H8_or = _idaapi.H8_or
H8_orc = _idaapi.H8_orc
H8_pop = _idaapi.H8_pop
H8_push = _idaapi.H8_push
H8_rotl = _idaapi.H8_rotl
H8_rotr = _idaapi.H8_rotr
H8_rotxl = _idaapi.H8_rotxl
H8_rotxr = _idaapi.H8_rotxr
H8_rte = _idaapi.H8_rte
H8_rts = _idaapi.H8_rts
H8_shal = _idaapi.H8_shal
H8_shar = _idaapi.H8_shar
H8_shll = _idaapi.H8_shll
H8_shlr = _idaapi.H8_shlr
H8_sleep = _idaapi.H8_sleep
H8_stc = _idaapi.H8_stc
H8_stm = _idaapi.H8_stm
H8_stmac = _idaapi.H8_stmac
H8_sub = _idaapi.H8_sub
H8_subs = _idaapi.H8_subs
H8_subx = _idaapi.H8_subx
H8_tas = _idaapi.H8_tas
H8_trapa = _idaapi.H8_trapa
H8_xor = _idaapi.H8_xor
H8_xorc = _idaapi.H8_xorc
H8_last = _idaapi.H8_last
PIC_null = _idaapi.PIC_null
PIC_addwf = _idaapi.PIC_addwf
PIC_andwf = _idaapi.PIC_andwf
PIC_clrf = _idaapi.PIC_clrf
PIC_clrw = _idaapi.PIC_clrw
PIC_comf = _idaapi.PIC_comf
PIC_decf = _idaapi.PIC_decf
PIC_decfsz = _idaapi.PIC_decfsz
PIC_incf = _idaapi.PIC_incf
PIC_incfsz = _idaapi.PIC_incfsz
PIC_iorwf = _idaapi.PIC_iorwf
PIC_movf = _idaapi.PIC_movf
PIC_movwf = _idaapi.PIC_movwf
PIC_nop = _idaapi.PIC_nop
PIC_rlf = _idaapi.PIC_rlf
PIC_rrf = _idaapi.PIC_rrf
PIC_subwf = _idaapi.PIC_subwf
PIC_swapf = _idaapi.PIC_swapf
PIC_xorwf = _idaapi.PIC_xorwf
PIC_bcf = _idaapi.PIC_bcf
PIC_bsf = _idaapi.PIC_bsf
PIC_btfsc = _idaapi.PIC_btfsc
PIC_btfss = _idaapi.PIC_btfss
PIC_addlw = _idaapi.PIC_addlw
PIC_andlw = _idaapi.PIC_andlw
PIC_call = _idaapi.PIC_call
PIC_clrwdt = _idaapi.PIC_clrwdt
PIC_goto = _idaapi.PIC_goto
PIC_iorlw = _idaapi.PIC_iorlw
PIC_movlw = _idaapi.PIC_movlw
PIC_retfie = _idaapi.PIC_retfie
PIC_retlw = _idaapi.PIC_retlw
PIC_return = _idaapi.PIC_return
PIC_sleep = _idaapi.PIC_sleep
PIC_sublw = _idaapi.PIC_sublw
PIC_xorlw = _idaapi.PIC_xorlw
PIC_option = _idaapi.PIC_option
PIC_tris = _idaapi.PIC_tris
PIC_movfw = _idaapi.PIC_movfw
PIC_tstf = _idaapi.PIC_tstf
PIC_negf = _idaapi.PIC_negf
PIC_b = _idaapi.PIC_b
PIC_clrc = _idaapi.PIC_clrc
PIC_clrdc = _idaapi.PIC_clrdc
PIC_clrz = _idaapi.PIC_clrz
PIC_setc = _idaapi.PIC_setc
PIC_setdc = _idaapi.PIC_setdc
PIC_setz = _idaapi.PIC_setz
PIC_skpc = _idaapi.PIC_skpc
PIC_skpdc = _idaapi.PIC_skpdc
PIC_skpnc = _idaapi.PIC_skpnc
PIC_skpndc = _idaapi.PIC_skpndc
PIC_skpnz = _idaapi.PIC_skpnz
PIC_skpz = _idaapi.PIC_skpz
PIC_bc = _idaapi.PIC_bc
PIC_bdc = _idaapi.PIC_bdc
PIC_bnc = _idaapi.PIC_bnc
PIC_bndc = _idaapi.PIC_bndc
PIC_bnz = _idaapi.PIC_bnz
PIC_bz = _idaapi.PIC_bz
PIC_addcf = _idaapi.PIC_addcf
PIC_adddcf = _idaapi.PIC_adddcf
PIC_subcf = _idaapi.PIC_subcf
PIC_addwf3 = _idaapi.PIC_addwf3
PIC_addwfc3 = _idaapi.PIC_addwfc3
PIC_andwf3 = _idaapi.PIC_andwf3
PIC_clrf2 = _idaapi.PIC_clrf2
PIC_comf3 = _idaapi.PIC_comf3
PIC_cpfseq2 = _idaapi.PIC_cpfseq2
PIC_cpfsgt2 = _idaapi.PIC_cpfsgt2
PIC_cpfslt2 = _idaapi.PIC_cpfslt2
PIC_decf3 = _idaapi.PIC_decf3
PIC_decfsz3 = _idaapi.PIC_decfsz3
PIC_dcfsnz3 = _idaapi.PIC_dcfsnz3
PIC_incf3 = _idaapi.PIC_incf3
PIC_incfsz3 = _idaapi.PIC_incfsz3
PIC_infsnz3 = _idaapi.PIC_infsnz3
PIC_iorwf3 = _idaapi.PIC_iorwf3
PIC_movf3 = _idaapi.PIC_movf3
PIC_movff2 = _idaapi.PIC_movff2
PIC_movwf2 = _idaapi.PIC_movwf2
PIC_mulwf2 = _idaapi.PIC_mulwf2
PIC_negf2 = _idaapi.PIC_negf2
PIC_rlcf3 = _idaapi.PIC_rlcf3
PIC_rlncf3 = _idaapi.PIC_rlncf3
PIC_rrcf3 = _idaapi.PIC_rrcf3
PIC_rrncf3 = _idaapi.PIC_rrncf3
PIC_setf2 = _idaapi.PIC_setf2
PIC_subfwb3 = _idaapi.PIC_subfwb3
PIC_subwf3 = _idaapi.PIC_subwf3
PIC_subwfb3 = _idaapi.PIC_subwfb3
PIC_swapf3 = _idaapi.PIC_swapf3
PIC_tstfsz2 = _idaapi.PIC_tstfsz2
PIC_xorwf3 = _idaapi.PIC_xorwf3
PIC_bcf3 = _idaapi.PIC_bcf3
PIC_bsf3 = _idaapi.PIC_bsf3
PIC_btfsc3 = _idaapi.PIC_btfsc3
PIC_btfss3 = _idaapi.PIC_btfss3
PIC_btg3 = _idaapi.PIC_btg3
PIC_bc1 = _idaapi.PIC_bc1
PIC_bn1 = _idaapi.PIC_bn1
PIC_bnc1 = _idaapi.PIC_bnc1
PIC_bnn1 = _idaapi.PIC_bnn1
PIC_bnov1 = _idaapi.PIC_bnov1
PIC_bnz1 = _idaapi.PIC_bnz1
PIC_bov1 = _idaapi.PIC_bov1
PIC_bra1 = _idaapi.PIC_bra1
PIC_bz1 = _idaapi.PIC_bz1
PIC_call2 = _idaapi.PIC_call2
PIC_daw0 = _idaapi.PIC_daw0
PIC_pop0 = _idaapi.PIC_pop0
PIC_push0 = _idaapi.PIC_push0
PIC_rcall1 = _idaapi.PIC_rcall1
PIC_reset0 = _idaapi.PIC_reset0
PIC_retfie1 = _idaapi.PIC_retfie1
PIC_return1 = _idaapi.PIC_return1
PIC_lfsr2 = _idaapi.PIC_lfsr2
PIC_movlb1 = _idaapi.PIC_movlb1
PIC_mullw1 = _idaapi.PIC_mullw1
PIC_tblrd0 = _idaapi.PIC_tblrd0
PIC_tblrd0p = _idaapi.PIC_tblrd0p
PIC_tblrd0m = _idaapi.PIC_tblrd0m
PIC_tblrdp0 = _idaapi.PIC_tblrdp0
PIC_tblwt0 = _idaapi.PIC_tblwt0
PIC_tblwt0p = _idaapi.PIC_tblwt0p
PIC_tblwt0m = _idaapi.PIC_tblwt0m
PIC_tblwtp0 = _idaapi.PIC_tblwtp0
PIC_last = _idaapi.PIC_last
SPARC_null = _idaapi.SPARC_null
SPARC_add = _idaapi.SPARC_add
SPARC_addcc = _idaapi.SPARC_addcc
SPARC_addc = _idaapi.SPARC_addc
SPARC_addccc = _idaapi.SPARC_addccc
SPARC_and = _idaapi.SPARC_and
SPARC_andcc = _idaapi.SPARC_andcc
SPARC_andn = _idaapi.SPARC_andn
SPARC_andncc = _idaapi.SPARC_andncc
SPARC_b = _idaapi.SPARC_b
SPARC_bp = _idaapi.SPARC_bp
SPARC_bpr = _idaapi.SPARC_bpr
SPARC_call = _idaapi.SPARC_call
SPARC_casa = _idaapi.SPARC_casa
SPARC_casxa = _idaapi.SPARC_casxa
SPARC_done = _idaapi.SPARC_done
SPARC_fabs = _idaapi.SPARC_fabs
SPARC_fadd = _idaapi.SPARC_fadd
SPARC_fbp = _idaapi.SPARC_fbp
SPARC_fb = _idaapi.SPARC_fb
SPARC_fcmp = _idaapi.SPARC_fcmp
SPARC_fcmpe = _idaapi.SPARC_fcmpe
SPARC_fdiv = _idaapi.SPARC_fdiv
SPARC_fdmulq = _idaapi.SPARC_fdmulq
SPARC_flush = _idaapi.SPARC_flush
SPARC_flushw = _idaapi.SPARC_flushw
SPARC_fmov = _idaapi.SPARC_fmov
SPARC_fmovcc = _idaapi.SPARC_fmovcc
SPARC_fmovr = _idaapi.SPARC_fmovr
SPARC_fmul = _idaapi.SPARC_fmul
SPARC_fneg = _idaapi.SPARC_fneg
SPARC_fsmuld = _idaapi.SPARC_fsmuld
SPARC_fsqrt = _idaapi.SPARC_fsqrt
SPARC_fsub = _idaapi.SPARC_fsub
SPARC_fstox = _idaapi.SPARC_fstox
SPARC_fdtox = _idaapi.SPARC_fdtox
SPARC_fqtox = _idaapi.SPARC_fqtox
SPARC_fxtos = _idaapi.SPARC_fxtos
SPARC_fxtod = _idaapi.SPARC_fxtod
SPARC_fxtoq = _idaapi.SPARC_fxtoq
SPARC_fitos = _idaapi.SPARC_fitos
SPARC_fdtos = _idaapi.SPARC_fdtos
SPARC_fqtos = _idaapi.SPARC_fqtos
SPARC_fitod = _idaapi.SPARC_fitod
SPARC_fstod = _idaapi.SPARC_fstod
SPARC_fqtod = _idaapi.SPARC_fqtod
SPARC_fitoq = _idaapi.SPARC_fitoq
SPARC_fstoq = _idaapi.SPARC_fstoq
SPARC_fdtoq = _idaapi.SPARC_fdtoq
SPARC_fstoi = _idaapi.SPARC_fstoi
SPARC_fdtoi = _idaapi.SPARC_fdtoi
SPARC_fqtoi = _idaapi.SPARC_fqtoi
SPARC_illtrap = _idaapi.SPARC_illtrap
SPARC_impdep1 = _idaapi.SPARC_impdep1
SPARC_impdep2 = _idaapi.SPARC_impdep2
SPARC_jmpl = _idaapi.SPARC_jmpl
SPARC_ldd = _idaapi.SPARC_ldd
SPARC_ldda = _idaapi.SPARC_ldda
SPARC_lddf = _idaapi.SPARC_lddf
SPARC_lddfa = _idaapi.SPARC_lddfa
SPARC_ldf = _idaapi.SPARC_ldf
SPARC_ldfa = _idaapi.SPARC_ldfa
SPARC_ldfsr = _idaapi.SPARC_ldfsr
SPARC_ldqf = _idaapi.SPARC_ldqf
SPARC_ldqfa = _idaapi.SPARC_ldqfa
SPARC_ldsb = _idaapi.SPARC_ldsb
SPARC_ldsba = _idaapi.SPARC_ldsba
SPARC_ldsh = _idaapi.SPARC_ldsh
SPARC_ldsha = _idaapi.SPARC_ldsha
SPARC_ldstub = _idaapi.SPARC_ldstub
SPARC_ldstuba = _idaapi.SPARC_ldstuba
SPARC_ldsw = _idaapi.SPARC_ldsw
SPARC_ldswa = _idaapi.SPARC_ldswa
SPARC_ldub = _idaapi.SPARC_ldub
SPARC_lduba = _idaapi.SPARC_lduba
SPARC_lduh = _idaapi.SPARC_lduh
SPARC_lduha = _idaapi.SPARC_lduha
SPARC_lduw = _idaapi.SPARC_lduw
SPARC_lduwa = _idaapi.SPARC_lduwa
SPARC_ldx = _idaapi.SPARC_ldx
SPARC_ldxa = _idaapi.SPARC_ldxa
SPARC_ldxfsr = _idaapi.SPARC_ldxfsr
SPARC_membar = _idaapi.SPARC_membar
SPARC_mov = _idaapi.SPARC_mov
SPARC_movr = _idaapi.SPARC_movr
SPARC_mulscc = _idaapi.SPARC_mulscc
SPARC_mulx = _idaapi.SPARC_mulx
SPARC_nop = _idaapi.SPARC_nop
SPARC_or = _idaapi.SPARC_or
SPARC_orcc = _idaapi.SPARC_orcc
SPARC_orn = _idaapi.SPARC_orn
SPARC_orncc = _idaapi.SPARC_orncc
SPARC_popc = _idaapi.SPARC_popc
SPARC_prefetch = _idaapi.SPARC_prefetch
SPARC_prefetcha = _idaapi.SPARC_prefetcha
SPARC_rd = _idaapi.SPARC_rd
SPARC_rdpr = _idaapi.SPARC_rdpr
SPARC_restore = _idaapi.SPARC_restore
SPARC_restored = _idaapi.SPARC_restored
SPARC_retry = _idaapi.SPARC_retry
SPARC_return = _idaapi.SPARC_return
SPARC_save = _idaapi.SPARC_save
SPARC_saved = _idaapi.SPARC_saved
SPARC_sdiv = _idaapi.SPARC_sdiv
SPARC_sdivcc = _idaapi.SPARC_sdivcc
SPARC_sdivx = _idaapi.SPARC_sdivx
SPARC_sethi = _idaapi.SPARC_sethi
SPARC_sir = _idaapi.SPARC_sir
SPARC_sll = _idaapi.SPARC_sll
SPARC_sllx = _idaapi.SPARC_sllx
SPARC_smul = _idaapi.SPARC_smul
SPARC_smulcc = _idaapi.SPARC_smulcc
SPARC_sra = _idaapi.SPARC_sra
SPARC_srax = _idaapi.SPARC_srax
SPARC_srl = _idaapi.SPARC_srl
SPARC_srlx = _idaapi.SPARC_srlx
SPARC_stb = _idaapi.SPARC_stb
SPARC_stba = _idaapi.SPARC_stba
SPARC_stbar = _idaapi.SPARC_stbar
SPARC_std = _idaapi.SPARC_std
SPARC_stda = _idaapi.SPARC_stda
SPARC_stdf = _idaapi.SPARC_stdf
SPARC_stdfa = _idaapi.SPARC_stdfa
SPARC_stf = _idaapi.SPARC_stf
SPARC_stfa = _idaapi.SPARC_stfa
SPARC_stfsr = _idaapi.SPARC_stfsr
SPARC_sth = _idaapi.SPARC_sth
SPARC_stha = _idaapi.SPARC_stha
SPARC_stqf = _idaapi.SPARC_stqf
SPARC_stqfa = _idaapi.SPARC_stqfa
SPARC_stw = _idaapi.SPARC_stw
SPARC_stwa = _idaapi.SPARC_stwa
SPARC_stx = _idaapi.SPARC_stx
SPARC_stxa = _idaapi.SPARC_stxa
SPARC_stxfsr = _idaapi.SPARC_stxfsr
SPARC_sub = _idaapi.SPARC_sub
SPARC_subcc = _idaapi.SPARC_subcc
SPARC_subc = _idaapi.SPARC_subc
SPARC_subccc = _idaapi.SPARC_subccc
SPARC_swap = _idaapi.SPARC_swap
SPARC_swapa = _idaapi.SPARC_swapa
SPARC_taddcc = _idaapi.SPARC_taddcc
SPARC_taddcctv = _idaapi.SPARC_taddcctv
SPARC_tsubcc = _idaapi.SPARC_tsubcc
SPARC_tsubcctv = _idaapi.SPARC_tsubcctv
SPARC_t = _idaapi.SPARC_t
SPARC_udiv = _idaapi.SPARC_udiv
SPARC_udivcc = _idaapi.SPARC_udivcc
SPARC_udivx = _idaapi.SPARC_udivx
SPARC_umul = _idaapi.SPARC_umul
SPARC_umulcc = _idaapi.SPARC_umulcc
SPARC_wr = _idaapi.SPARC_wr
SPARC_wrpr = _idaapi.SPARC_wrpr
SPARC_xnor = _idaapi.SPARC_xnor
SPARC_xnorcc = _idaapi.SPARC_xnorcc
SPARC_xor = _idaapi.SPARC_xor
SPARC_xorcc = _idaapi.SPARC_xorcc
SPARC_cmp = _idaapi.SPARC_cmp
SPARC_jmp = _idaapi.SPARC_jmp
SPARC_iprefetch = _idaapi.SPARC_iprefetch
SPARC_tst = _idaapi.SPARC_tst
SPARC_ret = _idaapi.SPARC_ret
SPARC_retl = _idaapi.SPARC_retl
SPARC_setuw = _idaapi.SPARC_setuw
SPARC_setsw = _idaapi.SPARC_setsw
SPARC_setx = _idaapi.SPARC_setx
SPARC_signx = _idaapi.SPARC_signx
SPARC_not = _idaapi.SPARC_not
SPARC_neg = _idaapi.SPARC_neg
SPARC_cas = _idaapi.SPARC_cas
SPARC_casl = _idaapi.SPARC_casl
SPARC_casx = _idaapi.SPARC_casx
SPARC_casxl = _idaapi.SPARC_casxl
SPARC_inc = _idaapi.SPARC_inc
SPARC_inccc = _idaapi.SPARC_inccc
SPARC_dec = _idaapi.SPARC_dec
SPARC_deccc = _idaapi.SPARC_deccc
SPARC_btst = _idaapi.SPARC_btst
SPARC_bset = _idaapi.SPARC_bset
SPARC_bclr = _idaapi.SPARC_bclr
SPARC_btog = _idaapi.SPARC_btog
SPARC_clr = _idaapi.SPARC_clr
SPARC_clrb = _idaapi.SPARC_clrb
SPARC_clrh = _idaapi.SPARC_clrh
SPARC_clrx = _idaapi.SPARC_clrx
SPARC_clruw = _idaapi.SPARC_clruw
SPARC_pseudo_mov = _idaapi.SPARC_pseudo_mov
SPARC_alignaddress = _idaapi.SPARC_alignaddress
SPARC_array = _idaapi.SPARC_array
SPARC_edge = _idaapi.SPARC_edge
SPARC_faligndata = _idaapi.SPARC_faligndata
SPARC_fandnot1 = _idaapi.SPARC_fandnot1
SPARC_fandnot2 = _idaapi.SPARC_fandnot2
SPARC_fand = _idaapi.SPARC_fand
SPARC_fcmpeq = _idaapi.SPARC_fcmpeq
SPARC_fcmpgt = _idaapi.SPARC_fcmpgt
SPARC_fcmple = _idaapi.SPARC_fcmple
SPARC_fcmpne = _idaapi.SPARC_fcmpne
SPARC_fexpand = _idaapi.SPARC_fexpand
SPARC_fmul8sux16 = _idaapi.SPARC_fmul8sux16
SPARC_fmul8ulx16 = _idaapi.SPARC_fmul8ulx16
SPARC_fmul8x16 = _idaapi.SPARC_fmul8x16
SPARC_fmul8x16al = _idaapi.SPARC_fmul8x16al
SPARC_fmul8x16au = _idaapi.SPARC_fmul8x16au
SPARC_fmuld8sux16 = _idaapi.SPARC_fmuld8sux16
SPARC_fmuld8ulx16 = _idaapi.SPARC_fmuld8ulx16
SPARC_fnand = _idaapi.SPARC_fnand
SPARC_fnor = _idaapi.SPARC_fnor
SPARC_fnot1 = _idaapi.SPARC_fnot1
SPARC_fnot2 = _idaapi.SPARC_fnot2
SPARC_fone = _idaapi.SPARC_fone
SPARC_fornot1 = _idaapi.SPARC_fornot1
SPARC_fornot2 = _idaapi.SPARC_fornot2
SPARC_for = _idaapi.SPARC_for
SPARC_fpackfix = _idaapi.SPARC_fpackfix
SPARC_fpack = _idaapi.SPARC_fpack
SPARC_fpadd = _idaapi.SPARC_fpadd
SPARC_fpmerge = _idaapi.SPARC_fpmerge
SPARC_fpsub = _idaapi.SPARC_fpsub
SPARC_fsrc1 = _idaapi.SPARC_fsrc1
SPARC_fsrc2 = _idaapi.SPARC_fsrc2
SPARC_fxnor = _idaapi.SPARC_fxnor
SPARC_fxor = _idaapi.SPARC_fxor
SPARC_fzero = _idaapi.SPARC_fzero
SPARC_pdist = _idaapi.SPARC_pdist
SPARC_shutdown = _idaapi.SPARC_shutdown
SPARC_rett = _idaapi.SPARC_rett
SPARC_last = _idaapi.SPARC_last
HPPA_null = _idaapi.HPPA_null
HPPA_add = _idaapi.HPPA_add
HPPA_addb = _idaapi.HPPA_addb
HPPA_addi = _idaapi.HPPA_addi
HPPA_addib = _idaapi.HPPA_addib
HPPA_addil = _idaapi.HPPA_addil
HPPA_and = _idaapi.HPPA_and
HPPA_andcm = _idaapi.HPPA_andcm
HPPA_b = _idaapi.HPPA_b
HPPA_bb = _idaapi.HPPA_bb
HPPA_be = _idaapi.HPPA_be
HPPA_blr = _idaapi.HPPA_blr
HPPA_break = _idaapi.HPPA_break
HPPA_bv = _idaapi.HPPA_bv
HPPA_bve = _idaapi.HPPA_bve
HPPA_cldd = _idaapi.HPPA_cldd
HPPA_cldw = _idaapi.HPPA_cldw
HPPA_clrbts = _idaapi.HPPA_clrbts
HPPA_cmpb = _idaapi.HPPA_cmpb
HPPA_cmpclr = _idaapi.HPPA_cmpclr
HPPA_cmpib = _idaapi.HPPA_cmpib
HPPA_cmpiclr = _idaapi.HPPA_cmpiclr
HPPA_copr = _idaapi.HPPA_copr
HPPA_cstd = _idaapi.HPPA_cstd
HPPA_cstw = _idaapi.HPPA_cstw
HPPA_dcor = _idaapi.HPPA_dcor
HPPA_depd = _idaapi.HPPA_depd
HPPA_depdi = _idaapi.HPPA_depdi
HPPA_depw = _idaapi.HPPA_depw
HPPA_depwi = _idaapi.HPPA_depwi
HPPA_diag = _idaapi.HPPA_diag
HPPA_ds = _idaapi.HPPA_ds
HPPA_extrd = _idaapi.HPPA_extrd
HPPA_extrw = _idaapi.HPPA_extrw
HPPA_fdc = _idaapi.HPPA_fdc
HPPA_fdce = _idaapi.HPPA_fdce
HPPA_fic = _idaapi.HPPA_fic
HPPA_fice = _idaapi.HPPA_fice
HPPA_hadd = _idaapi.HPPA_hadd
HPPA_havg = _idaapi.HPPA_havg
HPPA_hshl = _idaapi.HPPA_hshl
HPPA_hshladd = _idaapi.HPPA_hshladd
HPPA_hshr = _idaapi.HPPA_hshr
HPPA_hshradd = _idaapi.HPPA_hshradd
HPPA_hsub = _idaapi.HPPA_hsub
HPPA_idtlbt = _idaapi.HPPA_idtlbt
HPPA_iitlbt = _idaapi.HPPA_iitlbt
HPPA_lci = _idaapi.HPPA_lci
HPPA_ldb = _idaapi.HPPA_ldb
HPPA_ldcd = _idaapi.HPPA_ldcd
HPPA_ldcw = _idaapi.HPPA_ldcw
HPPA_ldd = _idaapi.HPPA_ldd
HPPA_ldda = _idaapi.HPPA_ldda
HPPA_ldh = _idaapi.HPPA_ldh
HPPA_ldil = _idaapi.HPPA_ldil
HPPA_ldo = _idaapi.HPPA_ldo
HPPA_ldsid = _idaapi.HPPA_ldsid
HPPA_ldw = _idaapi.HPPA_ldw
HPPA_ldwa = _idaapi.HPPA_ldwa
HPPA_lpa = _idaapi.HPPA_lpa
HPPA_mfctl = _idaapi.HPPA_mfctl
HPPA_mfia = _idaapi.HPPA_mfia
HPPA_mfsp = _idaapi.HPPA_mfsp
HPPA_mixh = _idaapi.HPPA_mixh
HPPA_mixw = _idaapi.HPPA_mixw
HPPA_movb = _idaapi.HPPA_movb
HPPA_movib = _idaapi.HPPA_movib
HPPA_mtctl = _idaapi.HPPA_mtctl
HPPA_mtsarcm = _idaapi.HPPA_mtsarcm
HPPA_mtsm = _idaapi.HPPA_mtsm
HPPA_mtsp = _idaapi.HPPA_mtsp
HPPA_or = _idaapi.HPPA_or
HPPA_pdc = _idaapi.HPPA_pdc
HPPA_pdtlb = _idaapi.HPPA_pdtlb
HPPA_pdtlbe = _idaapi.HPPA_pdtlbe
HPPA_permh = _idaapi.HPPA_permh
HPPA_pitlb = _idaapi.HPPA_pitlb
HPPA_pitlbe = _idaapi.HPPA_pitlbe
HPPA_popbts = _idaapi.HPPA_popbts
HPPA_probe = _idaapi.HPPA_probe
HPPA_probei = _idaapi.HPPA_probei
HPPA_pushbts = _idaapi.HPPA_pushbts
HPPA_pushnom = _idaapi.HPPA_pushnom
HPPA_rfi = _idaapi.HPPA_rfi
HPPA_rsm = _idaapi.HPPA_rsm
HPPA_shladd = _idaapi.HPPA_shladd
HPPA_shrpd = _idaapi.HPPA_shrpd
HPPA_shrpw = _idaapi.HPPA_shrpw
HPPA_spop0 = _idaapi.HPPA_spop0
HPPA_spop1 = _idaapi.HPPA_spop1
HPPA_spop2 = _idaapi.HPPA_spop2
HPPA_spop3 = _idaapi.HPPA_spop3
HPPA_ssm = _idaapi.HPPA_ssm
HPPA_stb = _idaapi.HPPA_stb
HPPA_stby = _idaapi.HPPA_stby
HPPA_std = _idaapi.HPPA_std
HPPA_stda = _idaapi.HPPA_stda
HPPA_stdby = _idaapi.HPPA_stdby
HPPA_sth = _idaapi.HPPA_sth
HPPA_stw = _idaapi.HPPA_stw
HPPA_stwa = _idaapi.HPPA_stwa
HPPA_sub = _idaapi.HPPA_sub
HPPA_subi = _idaapi.HPPA_subi
HPPA_sync = _idaapi.HPPA_sync
HPPA_syncdma = _idaapi.HPPA_syncdma
HPPA_uaddcm = _idaapi.HPPA_uaddcm
HPPA_uxor = _idaapi.HPPA_uxor
HPPA_xor = _idaapi.HPPA_xor
HPPA_fabs = _idaapi.HPPA_fabs
HPPA_fadd = _idaapi.HPPA_fadd
HPPA_fcmp = _idaapi.HPPA_fcmp
HPPA_fcnv = _idaapi.HPPA_fcnv
HPPA_fcpy = _idaapi.HPPA_fcpy
HPPA_fdiv = _idaapi.HPPA_fdiv
HPPA_fid = _idaapi.HPPA_fid
HPPA_fldd = _idaapi.HPPA_fldd
HPPA_fldw = _idaapi.HPPA_fldw
HPPA_fmpy = _idaapi.HPPA_fmpy
HPPA_fmpyadd = _idaapi.HPPA_fmpyadd
HPPA_fmpyfadd = _idaapi.HPPA_fmpyfadd
HPPA_fmpynfadd = _idaapi.HPPA_fmpynfadd
HPPA_fmpysub = _idaapi.HPPA_fmpysub
HPPA_fneg = _idaapi.HPPA_fneg
HPPA_fnegabs = _idaapi.HPPA_fnegabs
HPPA_frem = _idaapi.HPPA_frem
HPPA_frnd = _idaapi.HPPA_frnd
HPPA_fsqrt = _idaapi.HPPA_fsqrt
HPPA_fstd = _idaapi.HPPA_fstd
HPPA_fstw = _idaapi.HPPA_fstw
HPPA_fsub = _idaapi.HPPA_fsub
HPPA_ftest = _idaapi.HPPA_ftest
HPPA_xmpyu = _idaapi.HPPA_xmpyu
HPPA_pmdis = _idaapi.HPPA_pmdis
HPPA_pmenb = _idaapi.HPPA_pmenb
HPPA_call = _idaapi.HPPA_call
HPPA_ret = _idaapi.HPPA_ret
HPPA_shld = _idaapi.HPPA_shld
HPPA_shlw = _idaapi.HPPA_shlw
HPPA_shrd = _idaapi.HPPA_shrd
HPPA_shrw = _idaapi.HPPA_shrw
HPPA_ldi = _idaapi.HPPA_ldi
HPPA_copy = _idaapi.HPPA_copy
HPPA_mtsar = _idaapi.HPPA_mtsar
HPPA_nop = _idaapi.HPPA_nop
HPPA_last = _idaapi.HPPA_last
H8500_null = _idaapi.H8500_null
H8500_mov_g = _idaapi.H8500_mov_g
H8500_mov_e = _idaapi.H8500_mov_e
H8500_mov_i = _idaapi.H8500_mov_i
H8500_mov_f = _idaapi.H8500_mov_f
H8500_mov_l = _idaapi.H8500_mov_l
H8500_mov_s = _idaapi.H8500_mov_s
H8500_ldm = _idaapi.H8500_ldm
H8500_stm = _idaapi.H8500_stm
H8500_xch = _idaapi.H8500_xch
H8500_swap = _idaapi.H8500_swap
H8500_movtpe = _idaapi.H8500_movtpe
H8500_movfpe = _idaapi.H8500_movfpe
H8500_add_g = _idaapi.H8500_add_g
H8500_add_q = _idaapi.H8500_add_q
H8500_sub = _idaapi.H8500_sub
H8500_adds = _idaapi.H8500_adds
H8500_subs = _idaapi.H8500_subs
H8500_addx = _idaapi.H8500_addx
H8500_subx = _idaapi.H8500_subx
H8500_dadd = _idaapi.H8500_dadd
H8500_dsub = _idaapi.H8500_dsub
H8500_mulxu = _idaapi.H8500_mulxu
H8500_divxu = _idaapi.H8500_divxu
H8500_cmp_g = _idaapi.H8500_cmp_g
H8500_cmp_e = _idaapi.H8500_cmp_e
H8500_cmp_i = _idaapi.H8500_cmp_i
H8500_exts = _idaapi.H8500_exts
H8500_extu = _idaapi.H8500_extu
H8500_tst = _idaapi.H8500_tst
H8500_neg = _idaapi.H8500_neg
H8500_clr = _idaapi.H8500_clr
H8500_tas = _idaapi.H8500_tas
H8500_and = _idaapi.H8500_and
H8500_or = _idaapi.H8500_or
H8500_xor = _idaapi.H8500_xor
H8500_not = _idaapi.H8500_not
H8500_shal = _idaapi.H8500_shal
H8500_shar = _idaapi.H8500_shar
H8500_shll = _idaapi.H8500_shll
H8500_shlr = _idaapi.H8500_shlr
H8500_rotl = _idaapi.H8500_rotl
H8500_rotr = _idaapi.H8500_rotr
H8500_rotxl = _idaapi.H8500_rotxl
H8500_rotxr = _idaapi.H8500_rotxr
H8500_bset = _idaapi.H8500_bset
H8500_bclr = _idaapi.H8500_bclr
H8500_bnot = _idaapi.H8500_bnot
H8500_btst = _idaapi.H8500_btst
H8500_bra = _idaapi.H8500_bra
H8500_brn = _idaapi.H8500_brn
H8500_bhi = _idaapi.H8500_bhi
H8500_bls = _idaapi.H8500_bls
H8500_bcc = _idaapi.H8500_bcc
H8500_bcs = _idaapi.H8500_bcs
H8500_bne = _idaapi.H8500_bne
H8500_beq = _idaapi.H8500_beq
H8500_bvc = _idaapi.H8500_bvc
H8500_bvs = _idaapi.H8500_bvs
H8500_bpl = _idaapi.H8500_bpl
H8500_bmi = _idaapi.H8500_bmi
H8500_bge = _idaapi.H8500_bge
H8500_blt = _idaapi.H8500_blt
H8500_bgt = _idaapi.H8500_bgt
H8500_ble = _idaapi.H8500_ble
H8500_jmp = _idaapi.H8500_jmp
H8500_pjmp = _idaapi.H8500_pjmp
H8500_bsr = _idaapi.H8500_bsr
H8500_jsr = _idaapi.H8500_jsr
H8500_pjsr = _idaapi.H8500_pjsr
H8500_rts = _idaapi.H8500_rts
H8500_prts = _idaapi.H8500_prts
H8500_rtd = _idaapi.H8500_rtd
H8500_prtd = _idaapi.H8500_prtd
H8500_scb = _idaapi.H8500_scb
H8500_trapa = _idaapi.H8500_trapa
H8500_trap_vs = _idaapi.H8500_trap_vs
H8500_rte = _idaapi.H8500_rte
H8500_link = _idaapi.H8500_link
H8500_unlk = _idaapi.H8500_unlk
H8500_sleep = _idaapi.H8500_sleep
H8500_ldc = _idaapi.H8500_ldc
H8500_stc = _idaapi.H8500_stc
H8500_andc = _idaapi.H8500_andc
H8500_orc = _idaapi.H8500_orc
H8500_xorc = _idaapi.H8500_xorc
H8500_nop = _idaapi.H8500_nop
H8500_bpt = _idaapi.H8500_bpt
H8500_last = _idaapi.H8500_last
DSP56_null = _idaapi.DSP56_null
DSP56_abs = _idaapi.DSP56_abs
DSP56_adc = _idaapi.DSP56_adc
DSP56_add = _idaapi.DSP56_add
DSP56_addl = _idaapi.DSP56_addl
DSP56_addr = _idaapi.DSP56_addr
DSP56_and = _idaapi.DSP56_and
DSP56_andi = _idaapi.DSP56_andi
DSP56_asl = _idaapi.DSP56_asl
DSP56_asl4 = _idaapi.DSP56_asl4
DSP56_asr = _idaapi.DSP56_asr
DSP56_asr4 = _idaapi.DSP56_asr4
DSP56_asr16 = _idaapi.DSP56_asr16
DSP56_bfchg = _idaapi.DSP56_bfchg
DSP56_bfclr = _idaapi.DSP56_bfclr
DSP56_bfset = _idaapi.DSP56_bfset
DSP56_bftsth = _idaapi.DSP56_bftsth
DSP56_bftstl = _idaapi.DSP56_bftstl
DSP56_bcc = _idaapi.DSP56_bcc
DSP56_bchg = _idaapi.DSP56_bchg
DSP56_bclr = _idaapi.DSP56_bclr
DSP56_bra = _idaapi.DSP56_bra
DSP56_brclr = _idaapi.DSP56_brclr
DSP56_brkcc = _idaapi.DSP56_brkcc
DSP56_brset = _idaapi.DSP56_brset
DSP56_bscc = _idaapi.DSP56_bscc
DSP56_bsclr = _idaapi.DSP56_bsclr
DSP56_bset = _idaapi.DSP56_bset
DSP56_bsr = _idaapi.DSP56_bsr
DSP56_bsset = _idaapi.DSP56_bsset
DSP56_btst = _idaapi.DSP56_btst
DSP56_chkaau = _idaapi.DSP56_chkaau
DSP56_clb = _idaapi.DSP56_clb
DSP56_clr = _idaapi.DSP56_clr
DSP56_clr24 = _idaapi.DSP56_clr24
DSP56_cmp = _idaapi.DSP56_cmp
DSP56_cmpm = _idaapi.DSP56_cmpm
DSP56_cmpu = _idaapi.DSP56_cmpu
DSP56_debug = _idaapi.DSP56_debug
DSP56_debugcc = _idaapi.DSP56_debugcc
DSP56_dec = _idaapi.DSP56_dec
DSP56_dec24 = _idaapi.DSP56_dec24
DSP56_div = _idaapi.DSP56_div
DSP56_dmac = _idaapi.DSP56_dmac
DSP56_do = _idaapi.DSP56_do
DSP56_do_f = _idaapi.DSP56_do_f
DSP56_dor = _idaapi.DSP56_dor
DSP56_dor_f = _idaapi.DSP56_dor_f
DSP56_enddo = _idaapi.DSP56_enddo
DSP56_eor = _idaapi.DSP56_eor
DSP56_extract = _idaapi.DSP56_extract
DSP56_extractu = _idaapi.DSP56_extractu
DSP56_ext = _idaapi.DSP56_ext
DSP56_ill = _idaapi.DSP56_ill
DSP56_imac = _idaapi.DSP56_imac
DSP56_impy = _idaapi.DSP56_impy
DSP56_inc = _idaapi.DSP56_inc
DSP56_inc24 = _idaapi.DSP56_inc24
DSP56_insert = _idaapi.DSP56_insert
DSP56_jcc = _idaapi.DSP56_jcc
DSP56_jclr = _idaapi.DSP56_jclr
DSP56_jmp = _idaapi.DSP56_jmp
DSP56_jscc = _idaapi.DSP56_jscc
DSP56_jsclr = _idaapi.DSP56_jsclr
DSP56_jset = _idaapi.DSP56_jset
DSP56_jsr = _idaapi.DSP56_jsr
DSP56_jsset = _idaapi.DSP56_jsset
DSP56_lra = _idaapi.DSP56_lra
DSP56_lsl = _idaapi.DSP56_lsl
DSP56_lsr = _idaapi.DSP56_lsr
DSP56_lua = _idaapi.DSP56_lua
DSP56_lea = _idaapi.DSP56_lea
DSP56_mac = _idaapi.DSP56_mac
DSP56_maci = _idaapi.DSP56_maci
DSP56_mac_s_u = _idaapi.DSP56_mac_s_u
DSP56_macr = _idaapi.DSP56_macr
DSP56_macri = _idaapi.DSP56_macri
DSP56_max = _idaapi.DSP56_max
DSP56_maxm = _idaapi.DSP56_maxm
DSP56_merge = _idaapi.DSP56_merge
DSP56_move = _idaapi.DSP56_move
DSP56_movec = _idaapi.DSP56_movec
DSP56_movei = _idaapi.DSP56_movei
DSP56_movem = _idaapi.DSP56_movem
DSP56_movep = _idaapi.DSP56_movep
DSP56_moves = _idaapi.DSP56_moves
DSP56_mpy = _idaapi.DSP56_mpy
DSP56_mpyi = _idaapi.DSP56_mpyi
DSP56_mpy_s_u = _idaapi.DSP56_mpy_s_u
DSP56_mpyr = _idaapi.DSP56_mpyr
DSP56_mpyri = _idaapi.DSP56_mpyri
DSP56_neg = _idaapi.DSP56_neg
DSP56_negc = _idaapi.DSP56_negc
DSP56_nop = _idaapi.DSP56_nop
DSP56_norm = _idaapi.DSP56_norm
DSP56_normf = _idaapi.DSP56_normf
DSP56_not = _idaapi.DSP56_not
DSP56_or = _idaapi.DSP56_or
DSP56_ori = _idaapi.DSP56_ori
DSP56_pflush = _idaapi.DSP56_pflush
DSP56_pflushun = _idaapi.DSP56_pflushun
DSP56_pfree = _idaapi.DSP56_pfree
DSP56_plock = _idaapi.DSP56_plock
DSP56_plockr = _idaapi.DSP56_plockr
DSP56_punlock = _idaapi.DSP56_punlock
DSP56_punlockr = _idaapi.DSP56_punlockr
DSP56_rep = _idaapi.DSP56_rep
DSP56_repcc = _idaapi.DSP56_repcc
DSP56_reset = _idaapi.DSP56_reset
DSP56_rnd = _idaapi.DSP56_rnd
DSP56_rol = _idaapi.DSP56_rol
DSP56_ror = _idaapi.DSP56_ror
DSP56_rti = _idaapi.DSP56_rti
DSP56_rts = _idaapi.DSP56_rts
DSP56_sbc = _idaapi.DSP56_sbc
DSP56_stop = _idaapi.DSP56_stop
DSP56_sub = _idaapi.DSP56_sub
DSP56_subl = _idaapi.DSP56_subl
DSP56_subr = _idaapi.DSP56_subr
DSP56_swap = _idaapi.DSP56_swap
DSP56_tcc = _idaapi.DSP56_tcc
DSP56_tfr = _idaapi.DSP56_tfr
DSP56_tfr2 = _idaapi.DSP56_tfr2
DSP56_tfr3 = _idaapi.DSP56_tfr3
DSP56_trap = _idaapi.DSP56_trap
DSP56_trapcc = _idaapi.DSP56_trapcc
DSP56_tst = _idaapi.DSP56_tst
DSP56_tst2 = _idaapi.DSP56_tst2
DSP56_vsl = _idaapi.DSP56_vsl
DSP56_wait = _idaapi.DSP56_wait
DSP56_zero = _idaapi.DSP56_zero
DSP56_swi = _idaapi.DSP56_swi
DSP56_pmov = _idaapi.DSP56_pmov
DSP56_last = _idaapi.DSP56_last
C166_null = _idaapi.C166_null
C166_add = _idaapi.C166_add
C166_addb = _idaapi.C166_addb
C166_addc = _idaapi.C166_addc
C166_addcb = _idaapi.C166_addcb
C166_and = _idaapi.C166_and
C166_andb = _idaapi.C166_andb
C166_ashr = _idaapi.C166_ashr
C166_atomic = _idaapi.C166_atomic
C166_band = _idaapi.C166_band
C166_bclr = _idaapi.C166_bclr
C166_bcmp = _idaapi.C166_bcmp
C166_bfldh = _idaapi.C166_bfldh
C166_bfldl = _idaapi.C166_bfldl
C166_bmov = _idaapi.C166_bmov
C166_bmovn = _idaapi.C166_bmovn
C166_bor = _idaapi.C166_bor
C166_bset = _idaapi.C166_bset
C166_bxor = _idaapi.C166_bxor
C166_calla = _idaapi.C166_calla
C166_calli = _idaapi.C166_calli
C166_callr = _idaapi.C166_callr
C166_calls = _idaapi.C166_calls
C166_cmp = _idaapi.C166_cmp
C166_cmpb = _idaapi.C166_cmpb
C166_cmpd1 = _idaapi.C166_cmpd1
C166_cmpd2 = _idaapi.C166_cmpd2
C166_cmpi1 = _idaapi.C166_cmpi1
C166_cmpi2 = _idaapi.C166_cmpi2
C166_cpl = _idaapi.C166_cpl
C166_cplb = _idaapi.C166_cplb
C166_diswdt = _idaapi.C166_diswdt
C166_div = _idaapi.C166_div
C166_divl = _idaapi.C166_divl
C166_divlu = _idaapi.C166_divlu
C166_divu = _idaapi.C166_divu
C166_einit = _idaapi.C166_einit
C166_extr = _idaapi.C166_extr
C166_extp = _idaapi.C166_extp
C166_extpr = _idaapi.C166_extpr
C166_exts = _idaapi.C166_exts
C166_extsr = _idaapi.C166_extsr
C166_idle = _idaapi.C166_idle
C166_jb = _idaapi.C166_jb
C166_jbc = _idaapi.C166_jbc
C166_jmpa = _idaapi.C166_jmpa
C166_jmpi = _idaapi.C166_jmpi
C166_jmpr = _idaapi.C166_jmpr
C166_jmps = _idaapi.C166_jmps
C166_jnb = _idaapi.C166_jnb
C166_jnbs = _idaapi.C166_jnbs
C166_mov = _idaapi.C166_mov
C166_movb = _idaapi.C166_movb
C166_movbs = _idaapi.C166_movbs
C166_movbz = _idaapi.C166_movbz
C166_mul = _idaapi.C166_mul
C166_mulu = _idaapi.C166_mulu
C166_neg = _idaapi.C166_neg
C166_negb = _idaapi.C166_negb
C166_nop = _idaapi.C166_nop
C166_or = _idaapi.C166_or
C166_orb = _idaapi.C166_orb
C166_pcall = _idaapi.C166_pcall
C166_pop = _idaapi.C166_pop
C166_prior = _idaapi.C166_prior
C166_push = _idaapi.C166_push
C166_pwrdn = _idaapi.C166_pwrdn
C166_ret = _idaapi.C166_ret
C166_reti = _idaapi.C166_reti
C166_retp = _idaapi.C166_retp
C166_rets = _idaapi.C166_rets
C166_rol = _idaapi.C166_rol
C166_ror = _idaapi.C166_ror
C166_scxt = _idaapi.C166_scxt
C166_shl = _idaapi.C166_shl
C166_shr = _idaapi.C166_shr
C166_srst = _idaapi.C166_srst
C166_srvwdt = _idaapi.C166_srvwdt
C166_sub = _idaapi.C166_sub
C166_subb = _idaapi.C166_subb
C166_subc = _idaapi.C166_subc
C166_subcb = _idaapi.C166_subcb
C166_trap = _idaapi.C166_trap
C166_xor = _idaapi.C166_xor
C166_xorb = _idaapi.C166_xorb
ST10_CoABS = _idaapi.ST10_CoABS
ST10_CoADD = _idaapi.ST10_CoADD
ST10_CoASHR = _idaapi.ST10_CoASHR
ST10_CoCMP = _idaapi.ST10_CoCMP
ST10_CoLOAD = _idaapi.ST10_CoLOAD
ST10_CoMAC = _idaapi.ST10_CoMAC
ST10_CoMACM = _idaapi.ST10_CoMACM
ST10_CoMAX = _idaapi.ST10_CoMAX
ST10_CoMIN = _idaapi.ST10_CoMIN
ST10_CoMOV = _idaapi.ST10_CoMOV
ST10_CoMUL = _idaapi.ST10_CoMUL
ST10_CoNEG = _idaapi.ST10_CoNEG
ST10_CoNOP = _idaapi.ST10_CoNOP
ST10_CoRND = _idaapi.ST10_CoRND
ST10_CoSHL = _idaapi.ST10_CoSHL
ST10_CoSHR = _idaapi.ST10_CoSHR
ST10_CoSTORE = _idaapi.ST10_CoSTORE
ST10_CoSUB = _idaapi.ST10_CoSUB
C166_last = _idaapi.C166_last
ST20_null = _idaapi.ST20_null
ST20_adc = _idaapi.ST20_adc
ST20_add = _idaapi.ST20_add
ST20_addc = _idaapi.ST20_addc
ST20_ajw = _idaapi.ST20_ajw
ST20_and = _idaapi.ST20_and
ST20_arot = _idaapi.ST20_arot
ST20_ashr = _idaapi.ST20_ashr
ST20_biquad = _idaapi.ST20_biquad
ST20_bitld = _idaapi.ST20_bitld
ST20_bitmask = _idaapi.ST20_bitmask
ST20_bitst = _idaapi.ST20_bitst
ST20_breakpoint = _idaapi.ST20_breakpoint
ST20_cj = _idaapi.ST20_cj
ST20_dequeue = _idaapi.ST20_dequeue
ST20_divstep = _idaapi.ST20_divstep
ST20_dup = _idaapi.ST20_dup
ST20_ecall = _idaapi.ST20_ecall
ST20_enqueue = _idaapi.ST20_enqueue
ST20_eqc = _idaapi.ST20_eqc
ST20_eret = _idaapi.ST20_eret
ST20_fcall = _idaapi.ST20_fcall
ST20_gajw = _idaapi.ST20_gajw
ST20_gt = _idaapi.ST20_gt
ST20_gtu = _idaapi.ST20_gtu
ST20_io = _idaapi.ST20_io
ST20_j = _idaapi.ST20_j
ST20_jab = _idaapi.ST20_jab
ST20_lbinc = _idaapi.ST20_lbinc
ST20_ldc = _idaapi.ST20_ldc
ST20_ldl = _idaapi.ST20_ldl
ST20_ldlp = _idaapi.ST20_ldlp
ST20_ldnl = _idaapi.ST20_ldnl
ST20_ldnlp = _idaapi.ST20_ldnlp
ST20_ldpi = _idaapi.ST20_ldpi
ST20_ldprodid = _idaapi.ST20_ldprodid
ST20_ldtdesc = _idaapi.ST20_ldtdesc
ST20_lsinc = _idaapi.ST20_lsinc
ST20_lsxinc = _idaapi.ST20_lsxinc
ST20_lwinc = _idaapi.ST20_lwinc
ST20_mac = _idaapi.ST20_mac
ST20_mul = _idaapi.ST20_mul
ST20_nfix = _idaapi.ST20_nfix
ST20_nop = _idaapi.ST20_nop
ST20_not = _idaapi.ST20_not
ST20_opr = _idaapi.ST20_opr
ST20_or = _idaapi.ST20_or
ST20_order = _idaapi.ST20_order
ST20_orderu = _idaapi.ST20_orderu
ST20_pfix = _idaapi.ST20_pfix
ST20_rev = _idaapi.ST20_rev
ST20_rmw = _idaapi.ST20_rmw
ST20_rot = _idaapi.ST20_rot
ST20_run = _idaapi.ST20_run
ST20_saturate = _idaapi.ST20_saturate
ST20_sbinc = _idaapi.ST20_sbinc
ST20_shl = _idaapi.ST20_shl
ST20_shr = _idaapi.ST20_shr
ST20_signal = _idaapi.ST20_signal
ST20_smacinit = _idaapi.ST20_smacinit
ST20_smacloop = _idaapi.ST20_smacloop
ST20_smul = _idaapi.ST20_smul
ST20_ssinc = _idaapi.ST20_ssinc
ST20_statusclr = _idaapi.ST20_statusclr
ST20_statusset = _idaapi.ST20_statusset
ST20_statustst = _idaapi.ST20_statustst
ST20_stl = _idaapi.ST20_stl
ST20_stnl = _idaapi.ST20_stnl
ST20_stop = _idaapi.ST20_stop
ST20_sub = _idaapi.ST20_sub
ST20_subc = _idaapi.ST20_subc
ST20_swap32 = _idaapi.ST20_swap32
ST20_swinc = _idaapi.ST20_swinc
ST20_timeslice = _idaapi.ST20_timeslice
ST20_umac = _idaapi.ST20_umac
ST20_unsign = _idaapi.ST20_unsign
ST20_wait = _idaapi.ST20_wait
ST20_wsub = _idaapi.ST20_wsub
ST20_xbword = _idaapi.ST20_xbword
ST20_xor = _idaapi.ST20_xor
ST20_xsword = _idaapi.ST20_xsword
ST20_alt = _idaapi.ST20_alt
ST20_altend = _idaapi.ST20_altend
ST20_altwt = _idaapi.ST20_altwt
ST20_bcnt = _idaapi.ST20_bcnt
ST20_bitcnt = _idaapi.ST20_bitcnt
ST20_bitrevnbits = _idaapi.ST20_bitrevnbits
ST20_bitrevword = _idaapi.ST20_bitrevword
ST20_bsub = _idaapi.ST20_bsub
ST20_call = _idaapi.ST20_call
ST20_causeerror = _idaapi.ST20_causeerror
ST20_cb = _idaapi.ST20_cb
ST20_cbu = _idaapi.ST20_cbu
ST20_ccnt1 = _idaapi.ST20_ccnt1
ST20_cflerr = _idaapi.ST20_cflerr
ST20_cir = _idaapi.ST20_cir
ST20_ciru = _idaapi.ST20_ciru
ST20_clockdis = _idaapi.ST20_clockdis
ST20_clockenb = _idaapi.ST20_clockenb
ST20_clrhalterr = _idaapi.ST20_clrhalterr
ST20_crcbyte = _idaapi.ST20_crcbyte
ST20_crcword = _idaapi.ST20_crcword
ST20_cs = _idaapi.ST20_cs
ST20_csngl = _idaapi.ST20_csngl
ST20_csu = _idaapi.ST20_csu
ST20_csub0 = _idaapi.ST20_csub0
ST20_cword = _idaapi.ST20_cword
ST20_devlb = _idaapi.ST20_devlb
ST20_devls = _idaapi.ST20_devls
ST20_devlw = _idaapi.ST20_devlw
ST20_devmove = _idaapi.ST20_devmove
ST20_devsb = _idaapi.ST20_devsb
ST20_devss = _idaapi.ST20_devss
ST20_devsw = _idaapi.ST20_devsw
ST20_diff = _idaapi.ST20_diff
ST20_disc = _idaapi.ST20_disc
ST20_diss = _idaapi.ST20_diss
ST20_dist = _idaapi.ST20_dist
ST20_div = _idaapi.ST20_div
ST20_enbc = _idaapi.ST20_enbc
ST20_enbs = _idaapi.ST20_enbs
ST20_enbt = _idaapi.ST20_enbt
ST20_endp = _idaapi.ST20_endp
ST20_fmul = _idaapi.ST20_fmul
ST20_fptesterr = _idaapi.ST20_fptesterr
ST20_gcall = _idaapi.ST20_gcall
ST20_gintdis = _idaapi.ST20_gintdis
ST20_gintenb = _idaapi.ST20_gintenb
ST20_in = _idaapi.ST20_in
ST20_insertqueue = _idaapi.ST20_insertqueue
ST20_intdis = _idaapi.ST20_intdis
ST20_intenb = _idaapi.ST20_intenb
ST20_iret = _idaapi.ST20_iret
ST20_ladd = _idaapi.ST20_ladd
ST20_lb = _idaapi.ST20_lb
ST20_lbx = _idaapi.ST20_lbx
ST20_ldclock = _idaapi.ST20_ldclock
ST20_lddevid = _idaapi.ST20_lddevid
ST20_ldiff = _idaapi.ST20_ldiff
ST20_ldinf = _idaapi.ST20_ldinf
ST20_ldiv = _idaapi.ST20_ldiv
ST20_ldmemstartval = _idaapi.ST20_ldmemstartval
ST20_ldpri = _idaapi.ST20_ldpri
ST20_ldshadow = _idaapi.ST20_ldshadow
ST20_ldtimer = _idaapi.ST20_ldtimer
ST20_ldtraph = _idaapi.ST20_ldtraph
ST20_ldtrapped = _idaapi.ST20_ldtrapped
ST20_lend = _idaapi.ST20_lend
ST20_lmul = _idaapi.ST20_lmul
ST20_ls = _idaapi.ST20_ls
ST20_lshl = _idaapi.ST20_lshl
ST20_lshr = _idaapi.ST20_lshr
ST20_lsub = _idaapi.ST20_lsub
ST20_lsum = _idaapi.ST20_lsum
ST20_lsx = _idaapi.ST20_lsx
ST20_mint = _idaapi.ST20_mint
ST20_move = _idaapi.ST20_move
ST20_move2dall = _idaapi.ST20_move2dall
ST20_move2dinit = _idaapi.ST20_move2dinit
ST20_move2dnonzero = _idaapi.ST20_move2dnonzero
ST20_move2dzero = _idaapi.ST20_move2dzero
ST20_norm = _idaapi.ST20_norm
ST20_out = _idaapi.ST20_out
ST20_outbyte = _idaapi.ST20_outbyte
ST20_outword = _idaapi.ST20_outword
ST20_pop = _idaapi.ST20_pop
ST20_postnormsn = _idaapi.ST20_postnormsn
ST20_prod = _idaapi.ST20_prod
ST20_reboot = _idaapi.ST20_reboot
ST20_rem = _idaapi.ST20_rem
ST20_resetch = _idaapi.ST20_resetch
ST20_restart = _idaapi.ST20_restart
ST20_ret = _idaapi.ST20_ret
ST20_roundsn = _idaapi.ST20_roundsn
ST20_runp = _idaapi.ST20_runp
ST20_satadd = _idaapi.ST20_satadd
ST20_satmul = _idaapi.ST20_satmul
ST20_satsub = _idaapi.ST20_satsub
ST20_saveh = _idaapi.ST20_saveh
ST20_savel = _idaapi.ST20_savel
ST20_sb = _idaapi.ST20_sb
ST20_seterr = _idaapi.ST20_seterr
ST20_sethalterr = _idaapi.ST20_sethalterr
ST20_settimeslice = _idaapi.ST20_settimeslice
ST20_slmul = _idaapi.ST20_slmul
ST20_ss = _idaapi.ST20_ss
ST20_ssub = _idaapi.ST20_ssub
ST20_startp = _idaapi.ST20_startp
ST20_stclock = _idaapi.ST20_stclock
ST20_sthb = _idaapi.ST20_sthb
ST20_sthf = _idaapi.ST20_sthf
ST20_stlb = _idaapi.ST20_stlb
ST20_stlf = _idaapi.ST20_stlf
ST20_stoperr = _idaapi.ST20_stoperr
ST20_stopp = _idaapi.ST20_stopp
ST20_stshadow = _idaapi.ST20_stshadow
ST20_sttimer = _idaapi.ST20_sttimer
ST20_sttraph = _idaapi.ST20_sttraph
ST20_sttrapped = _idaapi.ST20_sttrapped
ST20_sulmul = _idaapi.ST20_sulmul
ST20_sum = _idaapi.ST20_sum
ST20_swapqueue = _idaapi.ST20_swapqueue
ST20_swaptimer = _idaapi.ST20_swaptimer
ST20_talt = _idaapi.ST20_talt
ST20_taltwt = _idaapi.ST20_taltwt
ST20_testerr = _idaapi.ST20_testerr
ST20_testhalterr = _idaapi.ST20_testhalterr
ST20_testpranal = _idaapi.ST20_testpranal
ST20_tin = _idaapi.ST20_tin
ST20_trapdis = _idaapi.ST20_trapdis
ST20_trapenb = _idaapi.ST20_trapenb
ST20_tret = _idaapi.ST20_tret
ST20_unpacksn = _idaapi.ST20_unpacksn
ST20_wcnt = _idaapi.ST20_wcnt
ST20_wsubdb = _idaapi.ST20_wsubdb
ST20_xdble = _idaapi.ST20_xdble
ST20_xword = _idaapi.ST20_xword
ST20_last = _idaapi.ST20_last
ST7_null = _idaapi.ST7_null
ST7_adc = _idaapi.ST7_adc
ST7_add = _idaapi.ST7_add
ST7_and = _idaapi.ST7_and
ST7_bcp = _idaapi.ST7_bcp
ST7_bres = _idaapi.ST7_bres
ST7_bset = _idaapi.ST7_bset
ST7_btjf = _idaapi.ST7_btjf
ST7_btjt = _idaapi.ST7_btjt
ST7_call = _idaapi.ST7_call
ST7_callr = _idaapi.ST7_callr
ST7_clr = _idaapi.ST7_clr
ST7_cp = _idaapi.ST7_cp
ST7_cpl = _idaapi.ST7_cpl
ST7_dec = _idaapi.ST7_dec
ST7_halt = _idaapi.ST7_halt
ST7_iret = _idaapi.ST7_iret
ST7_inc = _idaapi.ST7_inc
ST7_jp = _idaapi.ST7_jp
ST7_jra = _idaapi.ST7_jra
ST7_jrt = _idaapi.ST7_jrt
ST7_jrf = _idaapi.ST7_jrf
ST7_jrih = _idaapi.ST7_jrih
ST7_jril = _idaapi.ST7_jril
ST7_jrh = _idaapi.ST7_jrh
ST7_jrnh = _idaapi.ST7_jrnh
ST7_jrm = _idaapi.ST7_jrm
ST7_jrnm = _idaapi.ST7_jrnm
ST7_jrmi = _idaapi.ST7_jrmi
ST7_jrpl = _idaapi.ST7_jrpl
ST7_jreq = _idaapi.ST7_jreq
ST7_jrne = _idaapi.ST7_jrne
ST7_jrc = _idaapi.ST7_jrc
ST7_jrnc = _idaapi.ST7_jrnc
ST7_jrult = _idaapi.ST7_jrult
ST7_jruge = _idaapi.ST7_jruge
ST7_jrugt = _idaapi.ST7_jrugt
ST7_jrule = _idaapi.ST7_jrule
ST7_ld = _idaapi.ST7_ld
ST7_mul = _idaapi.ST7_mul
ST7_neg = _idaapi.ST7_neg
ST7_nop = _idaapi.ST7_nop
ST7_or = _idaapi.ST7_or
ST7_pop = _idaapi.ST7_pop
ST7_push = _idaapi.ST7_push
ST7_rcf = _idaapi.ST7_rcf
ST7_ret = _idaapi.ST7_ret
ST7_rim = _idaapi.ST7_rim
ST7_rlc = _idaapi.ST7_rlc
ST7_rrc = _idaapi.ST7_rrc
ST7_rsp = _idaapi.ST7_rsp
ST7_sbc = _idaapi.ST7_sbc
ST7_scf = _idaapi.ST7_scf
ST7_sim = _idaapi.ST7_sim
ST7_sla = _idaapi.ST7_sla
ST7_sll = _idaapi.ST7_sll
ST7_srl = _idaapi.ST7_srl
ST7_sra = _idaapi.ST7_sra
ST7_sub = _idaapi.ST7_sub
ST7_swap = _idaapi.ST7_swap
ST7_tnz = _idaapi.ST7_tnz
ST7_trap = _idaapi.ST7_trap
ST7_wfi = _idaapi.ST7_wfi
ST7_xor = _idaapi.ST7_xor
ST7_last = _idaapi.ST7_last
IA64_null = _idaapi.IA64_null
IA64_0 = _idaapi.IA64_0
IA64_1 = _idaapi.IA64_1
IA64_a = _idaapi.IA64_a
IA64_acq = _idaapi.IA64_acq
IA64_add = _idaapi.IA64_add
IA64_addl = _idaapi.IA64_addl
IA64_addp4 = _idaapi.IA64_addp4
IA64_adds = _idaapi.IA64_adds
IA64_alloc = _idaapi.IA64_alloc
IA64_and = _idaapi.IA64_and
IA64_andcm = _idaapi.IA64_andcm
IA64_b = _idaapi.IA64_b
IA64_bias = _idaapi.IA64_bias
IA64_br = _idaapi.IA64_br
IA64_break = _idaapi.IA64_break
IA64_brl = _idaapi.IA64_brl
IA64_brp = _idaapi.IA64_brp
IA64_bsw = _idaapi.IA64_bsw
IA64_c = _idaapi.IA64_c
IA64_call = _idaapi.IA64_call
IA64_cexit = _idaapi.IA64_cexit
IA64_chk = _idaapi.IA64_chk
IA64_cloop = _idaapi.IA64_cloop
IA64_clr = _idaapi.IA64_clr
IA64_clrrrb = _idaapi.IA64_clrrrb
IA64_cmp = _idaapi.IA64_cmp
IA64_cmp4 = _idaapi.IA64_cmp4
IA64_cmpxchg1 = _idaapi.IA64_cmpxchg1
IA64_cmpxchg2 = _idaapi.IA64_cmpxchg2
IA64_cmpxchg4 = _idaapi.IA64_cmpxchg4
IA64_cmpxchg8 = _idaapi.IA64_cmpxchg8
IA64_cond = _idaapi.IA64_cond
IA64_cover = _idaapi.IA64_cover
IA64_ctop = _idaapi.IA64_ctop
IA64_czx1 = _idaapi.IA64_czx1
IA64_czx2 = _idaapi.IA64_czx2
IA64_d = _idaapi.IA64_d
IA64_dep = _idaapi.IA64_dep
IA64_dpnt = _idaapi.IA64_dpnt
IA64_dptk = _idaapi.IA64_dptk
IA64_e = _idaapi.IA64_e
IA64_epc = _idaapi.IA64_epc
IA64_eq = _idaapi.IA64_eq
IA64_excl = _idaapi.IA64_excl
IA64_exit = _idaapi.IA64_exit
IA64_exp = _idaapi.IA64_exp
IA64_extr = _idaapi.IA64_extr
IA64_f = _idaapi.IA64_f
IA64_fabs = _idaapi.IA64_fabs
IA64_fadd = _idaapi.IA64_fadd
IA64_famax = _idaapi.IA64_famax
IA64_famin = _idaapi.IA64_famin
IA64_fand = _idaapi.IA64_fand
IA64_fandcm = _idaapi.IA64_fandcm
IA64_fault = _idaapi.IA64_fault
IA64_fc = _idaapi.IA64_fc
IA64_fchkf = _idaapi.IA64_fchkf
IA64_fclass = _idaapi.IA64_fclass
IA64_fclrf = _idaapi.IA64_fclrf
IA64_fcmp = _idaapi.IA64_fcmp
IA64_fcvt = _idaapi.IA64_fcvt
IA64_fetchadd4 = _idaapi.IA64_fetchadd4
IA64_fetchadd8 = _idaapi.IA64_fetchadd8
IA64_few = _idaapi.IA64_few
IA64_fill = _idaapi.IA64_fill
IA64_flushrs = _idaapi.IA64_flushrs
IA64_fma = _idaapi.IA64_fma
IA64_fmax = _idaapi.IA64_fmax
IA64_fmerge = _idaapi.IA64_fmerge
IA64_fmin = _idaapi.IA64_fmin
IA64_fmix = _idaapi.IA64_fmix
IA64_fmpy = _idaapi.IA64_fmpy
IA64_fms = _idaapi.IA64_fms
IA64_fneg = _idaapi.IA64_fneg
IA64_fnegabs = _idaapi.IA64_fnegabs
IA64_fnma = _idaapi.IA64_fnma
IA64_fnmpy = _idaapi.IA64_fnmpy
IA64_fnorm = _idaapi.IA64_fnorm
IA64_for = _idaapi.IA64_for
IA64_fpabs = _idaapi.IA64_fpabs
IA64_fpack = _idaapi.IA64_fpack
IA64_fpamax = _idaapi.IA64_fpamax
IA64_fpamin = _idaapi.IA64_fpamin
IA64_fpcmp = _idaapi.IA64_fpcmp
IA64_fpcvt = _idaapi.IA64_fpcvt
IA64_fpma = _idaapi.IA64_fpma
IA64_fpmax = _idaapi.IA64_fpmax
IA64_fpmerge = _idaapi.IA64_fpmerge
IA64_fpmin = _idaapi.IA64_fpmin
IA64_fpmpy = _idaapi.IA64_fpmpy
IA64_fpms = _idaapi.IA64_fpms
IA64_fpneg = _idaapi.IA64_fpneg
IA64_fpnegabs = _idaapi.IA64_fpnegabs
IA64_fpnma = _idaapi.IA64_fpnma
IA64_fpnmpy = _idaapi.IA64_fpnmpy
IA64_fprcpa = _idaapi.IA64_fprcpa
IA64_fprsqrta = _idaapi.IA64_fprsqrta
IA64_frcpa = _idaapi.IA64_frcpa
IA64_frsqrta = _idaapi.IA64_frsqrta
IA64_fselect = _idaapi.IA64_fselect
IA64_fsetc = _idaapi.IA64_fsetc
IA64_fsub = _idaapi.IA64_fsub
IA64_fswap = _idaapi.IA64_fswap
IA64_fsxt = _idaapi.IA64_fsxt
IA64_fwb = _idaapi.IA64_fwb
IA64_fx = _idaapi.IA64_fx
IA64_fxor = _idaapi.IA64_fxor
IA64_fxu = _idaapi.IA64_fxu
IA64_g = _idaapi.IA64_g
IA64_ga = _idaapi.IA64_ga
IA64_ge = _idaapi.IA64_ge
IA64_getf = _idaapi.IA64_getf
IA64_geu = _idaapi.IA64_geu
IA64_gt = _idaapi.IA64_gt
IA64_gtu = _idaapi.IA64_gtu
IA64_h = _idaapi.IA64_h
IA64_hu = _idaapi.IA64_hu
IA64_i = _idaapi.IA64_i
IA64_ia = _idaapi.IA64_ia
IA64_imp = _idaapi.IA64_imp
IA64_invala = _idaapi.IA64_invala
IA64_itc = _idaapi.IA64_itc
IA64_itr = _idaapi.IA64_itr
IA64_l = _idaapi.IA64_l
IA64_ld1 = _idaapi.IA64_ld1
IA64_ld2 = _idaapi.IA64_ld2
IA64_ld4 = _idaapi.IA64_ld4
IA64_ld8 = _idaapi.IA64_ld8
IA64_ldf = _idaapi.IA64_ldf
IA64_ldf8 = _idaapi.IA64_ldf8
IA64_ldfd = _idaapi.IA64_ldfd
IA64_ldfe = _idaapi.IA64_ldfe
IA64_ldfp8 = _idaapi.IA64_ldfp8
IA64_ldfpd = _idaapi.IA64_ldfpd
IA64_ldfps = _idaapi.IA64_ldfps
IA64_ldfs = _idaapi.IA64_ldfs
IA64_le = _idaapi.IA64_le
IA64_leu = _idaapi.IA64_leu
IA64_lfetch = _idaapi.IA64_lfetch
IA64_loadrs = _idaapi.IA64_loadrs
IA64_loop = _idaapi.IA64_loop
IA64_lr = _idaapi.IA64_lr
IA64_lt = _idaapi.IA64_lt
IA64_ltu = _idaapi.IA64_ltu
IA64_lu = _idaapi.IA64_lu
IA64_m = _idaapi.IA64_m
IA64_many = _idaapi.IA64_many
IA64_mf = _idaapi.IA64_mf
IA64_mix1 = _idaapi.IA64_mix1
IA64_mix2 = _idaapi.IA64_mix2
IA64_mix4 = _idaapi.IA64_mix4
IA64_mov = _idaapi.IA64_mov
IA64_movl = _idaapi.IA64_movl
IA64_mux1 = _idaapi.IA64_mux1
IA64_mux2 = _idaapi.IA64_mux2
IA64_nc = _idaapi.IA64_nc
IA64_ne = _idaapi.IA64_ne
IA64_neq = _idaapi.IA64_neq
IA64_nge = _idaapi.IA64_nge
IA64_ngt = _idaapi.IA64_ngt
IA64_nl = _idaapi.IA64_nl
IA64_nle = _idaapi.IA64_nle
IA64_nlt = _idaapi.IA64_nlt
IA64_nm = _idaapi.IA64_nm
IA64_nop = _idaapi.IA64_nop
IA64_nr = _idaapi.IA64_nr
IA64_ns = _idaapi.IA64_ns
IA64_nt1 = _idaapi.IA64_nt1
IA64_nt2 = _idaapi.IA64_nt2
IA64_nta = _idaapi.IA64_nta
IA64_nz = _idaapi.IA64_nz
IA64_or = _idaapi.IA64_or
IA64_orcm = _idaapi.IA64_orcm
IA64_ord = _idaapi.IA64_ord
IA64_pack2 = _idaapi.IA64_pack2
IA64_pack4 = _idaapi.IA64_pack4
IA64_padd1 = _idaapi.IA64_padd1
IA64_padd2 = _idaapi.IA64_padd2
IA64_padd4 = _idaapi.IA64_padd4
IA64_pavg1 = _idaapi.IA64_pavg1
IA64_pavg2 = _idaapi.IA64_pavg2
IA64_pavgsub1 = _idaapi.IA64_pavgsub1
IA64_pavgsub2 = _idaapi.IA64_pavgsub2
IA64_pcmp1 = _idaapi.IA64_pcmp1
IA64_pcmp2 = _idaapi.IA64_pcmp2
IA64_pcmp4 = _idaapi.IA64_pcmp4
IA64_pmax1 = _idaapi.IA64_pmax1
IA64_pmax2 = _idaapi.IA64_pmax2
IA64_pmin1 = _idaapi.IA64_pmin1
IA64_pmin2 = _idaapi.IA64_pmin2
IA64_pmpy2 = _idaapi.IA64_pmpy2
IA64_pmpyshr2 = _idaapi.IA64_pmpyshr2
IA64_popcnt = _idaapi.IA64_popcnt
IA64_pr = _idaapi.IA64_pr
IA64_probe = _idaapi.IA64_probe
IA64_psad1 = _idaapi.IA64_psad1
IA64_pshl2 = _idaapi.IA64_pshl2
IA64_pshl4 = _idaapi.IA64_pshl4
IA64_pshladd2 = _idaapi.IA64_pshladd2
IA64_pshr2 = _idaapi.IA64_pshr2
IA64_pshr4 = _idaapi.IA64_pshr4
IA64_pshradd2 = _idaapi.IA64_pshradd2
IA64_psub1 = _idaapi.IA64_psub1
IA64_psub2 = _idaapi.IA64_psub2
IA64_psub4 = _idaapi.IA64_psub4
IA64_ptc = _idaapi.IA64_ptc
IA64_ptr = _idaapi.IA64_ptr
IA64_r = _idaapi.IA64_r
IA64_raz = _idaapi.IA64_raz
IA64_rel = _idaapi.IA64_rel
IA64_ret = _idaapi.IA64_ret
IA64_rfi = _idaapi.IA64_rfi
IA64_rsm = _idaapi.IA64_rsm
IA64_rum = _idaapi.IA64_rum
IA64_rw = _idaapi.IA64_rw
IA64_s = _idaapi.IA64_s
IA64_s0 = _idaapi.IA64_s0
IA64_s1 = _idaapi.IA64_s1
IA64_s2 = _idaapi.IA64_s2
IA64_s3 = _idaapi.IA64_s3
IA64_sa = _idaapi.IA64_sa
IA64_se = _idaapi.IA64_se
IA64_setf = _idaapi.IA64_setf
IA64_shl = _idaapi.IA64_shl
IA64_shladd = _idaapi.IA64_shladd
IA64_shladdp4 = _idaapi.IA64_shladdp4
IA64_shr = _idaapi.IA64_shr
IA64_shrp = _idaapi.IA64_shrp
IA64_sig = _idaapi.IA64_sig
IA64_spill = _idaapi.IA64_spill
IA64_spnt = _idaapi.IA64_spnt
IA64_sptk = _idaapi.IA64_sptk
IA64_srlz = _idaapi.IA64_srlz
IA64_ssm = _idaapi.IA64_ssm
IA64_sss = _idaapi.IA64_sss
IA64_st1 = _idaapi.IA64_st1
IA64_st2 = _idaapi.IA64_st2
IA64_st4 = _idaapi.IA64_st4
IA64_st8 = _idaapi.IA64_st8
IA64_stf = _idaapi.IA64_stf
IA64_stf8 = _idaapi.IA64_stf8
IA64_stfd = _idaapi.IA64_stfd
IA64_stfe = _idaapi.IA64_stfe
IA64_stfs = _idaapi.IA64_stfs
IA64_sub = _idaapi.IA64_sub
IA64_sum = _idaapi.IA64_sum
IA64_sxt1 = _idaapi.IA64_sxt1
IA64_sxt2 = _idaapi.IA64_sxt2
IA64_sxt4 = _idaapi.IA64_sxt4
IA64_sync = _idaapi.IA64_sync
IA64_tak = _idaapi.IA64_tak
IA64_tbit = _idaapi.IA64_tbit
IA64_thash = _idaapi.IA64_thash
IA64_tnat = _idaapi.IA64_tnat
IA64_tpa = _idaapi.IA64_tpa
IA64_trunc = _idaapi.IA64_trunc
IA64_ttag = _idaapi.IA64_ttag
IA64_u = _idaapi.IA64_u
IA64_unc = _idaapi.IA64_unc
IA64_unord = _idaapi.IA64_unord
IA64_unpack1 = _idaapi.IA64_unpack1
IA64_unpack2 = _idaapi.IA64_unpack2
IA64_unpack4 = _idaapi.IA64_unpack4
IA64_uss = _idaapi.IA64_uss
IA64_uus = _idaapi.IA64_uus
IA64_uuu = _idaapi.IA64_uuu
IA64_w = _idaapi.IA64_w
IA64_wexit = _idaapi.IA64_wexit
IA64_wtop = _idaapi.IA64_wtop
IA64_x = _idaapi.IA64_x
IA64_xchg1 = _idaapi.IA64_xchg1
IA64_xchg2 = _idaapi.IA64_xchg2
IA64_xchg4 = _idaapi.IA64_xchg4
IA64_xchg8 = _idaapi.IA64_xchg8
IA64_xf = _idaapi.IA64_xf
IA64_xma = _idaapi.IA64_xma
IA64_xmpy = _idaapi.IA64_xmpy
IA64_xor = _idaapi.IA64_xor
IA64_xuf = _idaapi.IA64_xuf
IA64_z = _idaapi.IA64_z
IA64_zxt1 = _idaapi.IA64_zxt1
IA64_zxt2 = _idaapi.IA64_zxt2
IA64_zxt4 = _idaapi.IA64_zxt4
IA64_last = _idaapi.IA64_last
NET_null = _idaapi.NET_null
NET_add = _idaapi.NET_add
NET_add_ovf = _idaapi.NET_add_ovf
NET_add_ovf_un = _idaapi.NET_add_ovf_un
NET_and = _idaapi.NET_and
NET_ann_arg = _idaapi.NET_ann_arg
NET_ann_call = _idaapi.NET_ann_call
NET_ann_catch = _idaapi.NET_ann_catch
NET_ann_data = _idaapi.NET_ann_data
NET_ann_data_s = _idaapi.NET_ann_data_s
NET_ann_dead = _idaapi.NET_ann_dead
NET_ann_def = _idaapi.NET_ann_def
NET_ann_hoisted = _idaapi.NET_ann_hoisted
NET_ann_hoisted_call = _idaapi.NET_ann_hoisted_call
NET_ann_lab = _idaapi.NET_ann_lab
NET_ann_live = _idaapi.NET_ann_live
NET_ann_phi = _idaapi.NET_ann_phi
NET_ann_ref = _idaapi.NET_ann_ref
NET_ann_ref_s = _idaapi.NET_ann_ref_s
NET_arglist = _idaapi.NET_arglist
NET_beq = _idaapi.NET_beq
NET_beq_s = _idaapi.NET_beq_s
NET_bge = _idaapi.NET_bge
NET_bge_s = _idaapi.NET_bge_s
NET_bge_un = _idaapi.NET_bge_un
NET_bge_un_s = _idaapi.NET_bge_un_s
NET_bgt = _idaapi.NET_bgt
NET_bgt_s = _idaapi.NET_bgt_s
NET_bgt_un = _idaapi.NET_bgt_un
NET_bgt_un_s = _idaapi.NET_bgt_un_s
NET_ble = _idaapi.NET_ble
NET_ble_s = _idaapi.NET_ble_s
NET_ble_un = _idaapi.NET_ble_un
NET_ble_un_s = _idaapi.NET_ble_un_s
NET_blt = _idaapi.NET_blt
NET_blt_s = _idaapi.NET_blt_s
NET_blt_un = _idaapi.NET_blt_un
NET_blt_un_s = _idaapi.NET_blt_un_s
NET_bne_un = _idaapi.NET_bne_un
NET_bne_un_s = _idaapi.NET_bne_un_s
NET_box = _idaapi.NET_box
NET_br = _idaapi.NET_br
NET_br_s = _idaapi.NET_br_s
NET_break = _idaapi.NET_break
NET_brfalse = _idaapi.NET_brfalse
NET_brfalse_s = _idaapi.NET_brfalse_s
NET_brtrue = _idaapi.NET_brtrue
NET_brtrue_s = _idaapi.NET_brtrue_s
NET_call = _idaapi.NET_call
NET_calli = _idaapi.NET_calli
NET_callvirt = _idaapi.NET_callvirt
NET_castclass = _idaapi.NET_castclass
NET_ceq = _idaapi.NET_ceq
NET_cgt = _idaapi.NET_cgt
NET_cgt_un = _idaapi.NET_cgt_un
NET_ckfinite = _idaapi.NET_ckfinite
NET_clt = _idaapi.NET_clt
NET_clt_un = _idaapi.NET_clt_un
NET_conv_i = _idaapi.NET_conv_i
NET_conv_i1 = _idaapi.NET_conv_i1
NET_conv_i2 = _idaapi.NET_conv_i2
NET_conv_i4 = _idaapi.NET_conv_i4
NET_conv_i8 = _idaapi.NET_conv_i8
NET_conv_ovf_i = _idaapi.NET_conv_ovf_i
NET_conv_ovf_i1 = _idaapi.NET_conv_ovf_i1
NET_conv_ovf_i1_un = _idaapi.NET_conv_ovf_i1_un
NET_conv_ovf_i2 = _idaapi.NET_conv_ovf_i2
NET_conv_ovf_i2_un = _idaapi.NET_conv_ovf_i2_un
NET_conv_ovf_i4 = _idaapi.NET_conv_ovf_i4
NET_conv_ovf_i4_un = _idaapi.NET_conv_ovf_i4_un
NET_conv_ovf_i8 = _idaapi.NET_conv_ovf_i8
NET_conv_ovf_i8_un = _idaapi.NET_conv_ovf_i8_un
NET_conv_ovf_i_un = _idaapi.NET_conv_ovf_i_un
NET_conv_ovf_u = _idaapi.NET_conv_ovf_u
NET_conv_ovf_u1 = _idaapi.NET_conv_ovf_u1
NET_conv_ovf_u1_un = _idaapi.NET_conv_ovf_u1_un
NET_conv_ovf_u2 = _idaapi.NET_conv_ovf_u2
NET_conv_ovf_u2_un = _idaapi.NET_conv_ovf_u2_un
NET_conv_ovf_u4 = _idaapi.NET_conv_ovf_u4
NET_conv_ovf_u4_un = _idaapi.NET_conv_ovf_u4_un
NET_conv_ovf_u8 = _idaapi.NET_conv_ovf_u8
NET_conv_ovf_u8_un = _idaapi.NET_conv_ovf_u8_un
NET_conv_ovf_u_un = _idaapi.NET_conv_ovf_u_un
NET_conv_r4 = _idaapi.NET_conv_r4
NET_conv_r8 = _idaapi.NET_conv_r8
NET_conv_r_un = _idaapi.NET_conv_r_un
NET_conv_u = _idaapi.NET_conv_u
NET_conv_u1 = _idaapi.NET_conv_u1
NET_conv_u2 = _idaapi.NET_conv_u2
NET_conv_u4 = _idaapi.NET_conv_u4
NET_conv_u8 = _idaapi.NET_conv_u8
NET_cpblk = _idaapi.NET_cpblk
NET_cpobj = _idaapi.NET_cpobj
NET_div = _idaapi.NET_div
NET_div_un = _idaapi.NET_div_un
NET_dup = _idaapi.NET_dup
NET_endfilter = _idaapi.NET_endfilter
NET_endfinally = _idaapi.NET_endfinally
NET_initblk = _idaapi.NET_initblk
NET_initobj = _idaapi.NET_initobj
NET_isinst = _idaapi.NET_isinst
NET_jmp = _idaapi.NET_jmp
NET_ldarg = _idaapi.NET_ldarg
NET_ldarg_0 = _idaapi.NET_ldarg_0
NET_ldarg_1 = _idaapi.NET_ldarg_1
NET_ldarg_2 = _idaapi.NET_ldarg_2
NET_ldarg_3 = _idaapi.NET_ldarg_3
NET_ldarg_s = _idaapi.NET_ldarg_s
NET_ldarga = _idaapi.NET_ldarga
NET_ldarga_s = _idaapi.NET_ldarga_s
NET_ldc_i4 = _idaapi.NET_ldc_i4
NET_ldc_i4_0 = _idaapi.NET_ldc_i4_0
NET_ldc_i4_1 = _idaapi.NET_ldc_i4_1
NET_ldc_i4_2 = _idaapi.NET_ldc_i4_2
NET_ldc_i4_3 = _idaapi.NET_ldc_i4_3
NET_ldc_i4_4 = _idaapi.NET_ldc_i4_4
NET_ldc_i4_5 = _idaapi.NET_ldc_i4_5
NET_ldc_i4_6 = _idaapi.NET_ldc_i4_6
NET_ldc_i4_7 = _idaapi.NET_ldc_i4_7
NET_ldc_i4_8 = _idaapi.NET_ldc_i4_8
NET_ldc_i4_m1 = _idaapi.NET_ldc_i4_m1
NET_ldc_i4_s = _idaapi.NET_ldc_i4_s
NET_ldc_i8 = _idaapi.NET_ldc_i8
NET_ldc_r4 = _idaapi.NET_ldc_r4
NET_ldc_r8 = _idaapi.NET_ldc_r8
NET_ldelem_i = _idaapi.NET_ldelem_i
NET_ldelem_i1 = _idaapi.NET_ldelem_i1
NET_ldelem_i2 = _idaapi.NET_ldelem_i2
NET_ldelem_i4 = _idaapi.NET_ldelem_i4
NET_ldelem_i8 = _idaapi.NET_ldelem_i8
NET_ldelem_r4 = _idaapi.NET_ldelem_r4
NET_ldelem_r8 = _idaapi.NET_ldelem_r8
NET_ldelem_ref = _idaapi.NET_ldelem_ref
NET_ldelem_u1 = _idaapi.NET_ldelem_u1
NET_ldelem_u2 = _idaapi.NET_ldelem_u2
NET_ldelem_u4 = _idaapi.NET_ldelem_u4
NET_ldelema = _idaapi.NET_ldelema
NET_ldfld = _idaapi.NET_ldfld
NET_ldflda = _idaapi.NET_ldflda
NET_ldftn = _idaapi.NET_ldftn
NET_ldind_i = _idaapi.NET_ldind_i
NET_ldind_i1 = _idaapi.NET_ldind_i1
NET_ldind_i2 = _idaapi.NET_ldind_i2
NET_ldind_i4 = _idaapi.NET_ldind_i4
NET_ldind_i8 = _idaapi.NET_ldind_i8
NET_ldind_r4 = _idaapi.NET_ldind_r4
NET_ldind_r8 = _idaapi.NET_ldind_r8
NET_ldind_ref = _idaapi.NET_ldind_ref
NET_ldind_u1 = _idaapi.NET_ldind_u1
NET_ldind_u2 = _idaapi.NET_ldind_u2
NET_ldind_u4 = _idaapi.NET_ldind_u4
NET_ldlen = _idaapi.NET_ldlen
NET_ldloc = _idaapi.NET_ldloc
NET_ldloc_0 = _idaapi.NET_ldloc_0
NET_ldloc_1 = _idaapi.NET_ldloc_1
NET_ldloc_2 = _idaapi.NET_ldloc_2
NET_ldloc_3 = _idaapi.NET_ldloc_3
NET_ldloc_s = _idaapi.NET_ldloc_s
NET_ldloca = _idaapi.NET_ldloca
NET_ldloca_s = _idaapi.NET_ldloca_s
NET_ldnull = _idaapi.NET_ldnull
NET_ldobj = _idaapi.NET_ldobj
NET_ldsfld = _idaapi.NET_ldsfld
NET_ldsflda = _idaapi.NET_ldsflda
NET_ldstr = _idaapi.NET_ldstr
NET_ldtoken = _idaapi.NET_ldtoken
NET_ldvirtftn = _idaapi.NET_ldvirtftn
NET_leave = _idaapi.NET_leave
NET_leave_s = _idaapi.NET_leave_s
NET_localloc = _idaapi.NET_localloc
NET_mkrefany = _idaapi.NET_mkrefany
NET_mul = _idaapi.NET_mul
NET_mul_ovf = _idaapi.NET_mul_ovf
NET_mul_ovf_un = _idaapi.NET_mul_ovf_un
NET_neg = _idaapi.NET_neg
NET_newarr = _idaapi.NET_newarr
NET_newobj = _idaapi.NET_newobj
NET_nop = _idaapi.NET_nop
NET_not = _idaapi.NET_not
NET_or = _idaapi.NET_or
NET_pop = _idaapi.NET_pop
NET_refanytype = _idaapi.NET_refanytype
NET_refanyval = _idaapi.NET_refanyval
NET_rem = _idaapi.NET_rem
NET_rem_un = _idaapi.NET_rem_un
NET_ret = _idaapi.NET_ret
NET_rethrow = _idaapi.NET_rethrow
NET_shl = _idaapi.NET_shl
NET_shr = _idaapi.NET_shr
NET_shr_un = _idaapi.NET_shr_un
NET_sizeof = _idaapi.NET_sizeof
NET_starg = _idaapi.NET_starg
NET_starg_s = _idaapi.NET_starg_s
NET_stelem_i = _idaapi.NET_stelem_i
NET_stelem_i1 = _idaapi.NET_stelem_i1
NET_stelem_i2 = _idaapi.NET_stelem_i2
NET_stelem_i4 = _idaapi.NET_stelem_i4
NET_stelem_i8 = _idaapi.NET_stelem_i8
NET_stelem_r4 = _idaapi.NET_stelem_r4
NET_stelem_r8 = _idaapi.NET_stelem_r8
NET_stelem_ref = _idaapi.NET_stelem_ref
NET_stfld = _idaapi.NET_stfld
NET_stind_i = _idaapi.NET_stind_i
NET_stind_i1 = _idaapi.NET_stind_i1
NET_stind_i2 = _idaapi.NET_stind_i2
NET_stind_i4 = _idaapi.NET_stind_i4
NET_stind_i8 = _idaapi.NET_stind_i8
NET_stind_r4 = _idaapi.NET_stind_r4
NET_stind_r8 = _idaapi.NET_stind_r8
NET_stind_ref = _idaapi.NET_stind_ref
NET_stloc = _idaapi.NET_stloc
NET_stloc_0 = _idaapi.NET_stloc_0
NET_stloc_1 = _idaapi.NET_stloc_1
NET_stloc_2 = _idaapi.NET_stloc_2
NET_stloc_3 = _idaapi.NET_stloc_3
NET_stloc_s = _idaapi.NET_stloc_s
NET_stobj = _idaapi.NET_stobj
NET_stsfld = _idaapi.NET_stsfld
NET_sub = _idaapi.NET_sub
NET_sub_ovf = _idaapi.NET_sub_ovf
NET_sub_ovf_un = _idaapi.NET_sub_ovf_un
NET_switch = _idaapi.NET_switch
NET_tail_ = _idaapi.NET_tail_
NET_throw = _idaapi.NET_throw
NET_unaligned_ = _idaapi.NET_unaligned_
NET_unbox = _idaapi.NET_unbox
NET_volatile_ = _idaapi.NET_volatile_
NET_xor = _idaapi.NET_xor
NET_ldelem = _idaapi.NET_ldelem
NET_stelem = _idaapi.NET_stelem
NET_unbox_any = _idaapi.NET_unbox_any
NET_constrained_ = _idaapi.NET_constrained_
NET_no_ = _idaapi.NET_no_
NET_readonly_ = _idaapi.NET_readonly_
NET_last = _idaapi.NET_last
MC12_null = _idaapi.MC12_null
MC12_aba = _idaapi.MC12_aba
MC12_abx = _idaapi.MC12_abx
MC12_aby = _idaapi.MC12_aby
MC12_adca = _idaapi.MC12_adca
MC12_adcb = _idaapi.MC12_adcb
MC12_adda = _idaapi.MC12_adda
MC12_addb = _idaapi.MC12_addb
MC12_addd = _idaapi.MC12_addd
MC12_anda = _idaapi.MC12_anda
MC12_andb = _idaapi.MC12_andb
MC12_andcc = _idaapi.MC12_andcc
MC12_asl = _idaapi.MC12_asl
MC12_asla = _idaapi.MC12_asla
MC12_aslb = _idaapi.MC12_aslb
MC12_asld = _idaapi.MC12_asld
MC12_asr = _idaapi.MC12_asr
MC12_asra = _idaapi.MC12_asra
MC12_asrb = _idaapi.MC12_asrb
MC12_bcc = _idaapi.MC12_bcc
MC12_bclr = _idaapi.MC12_bclr
MC12_bcs = _idaapi.MC12_bcs
MC12_beq = _idaapi.MC12_beq
MC12_bge = _idaapi.MC12_bge
MC12_bgnd = _idaapi.MC12_bgnd
MC12_bgt = _idaapi.MC12_bgt
MC12_bhi = _idaapi.MC12_bhi
MC12_bhs = _idaapi.MC12_bhs
MC12_bita = _idaapi.MC12_bita
MC12_bitb = _idaapi.MC12_bitb
MC12_ble = _idaapi.MC12_ble
MC12_blo = _idaapi.MC12_blo
MC12_bls = _idaapi.MC12_bls
MC12_blt = _idaapi.MC12_blt
MC12_bmi = _idaapi.MC12_bmi
MC12_bne = _idaapi.MC12_bne
MC12_bpl = _idaapi.MC12_bpl
MC12_bra = _idaapi.MC12_bra
MC12_brclr = _idaapi.MC12_brclr
MC12_brn = _idaapi.MC12_brn
MC12_brset = _idaapi.MC12_brset
MC12_bset = _idaapi.MC12_bset
MC12_bsr = _idaapi.MC12_bsr
MC12_bvc = _idaapi.MC12_bvc
MC12_bvs = _idaapi.MC12_bvs
MC12_call = _idaapi.MC12_call
MC12_cba = _idaapi.MC12_cba
MC12_clc = _idaapi.MC12_clc
MC12_cli = _idaapi.MC12_cli
MC12_clr = _idaapi.MC12_clr
MC12_clra = _idaapi.MC12_clra
MC12_clrb = _idaapi.MC12_clrb
MC12_clv = _idaapi.MC12_clv
MC12_cmpa = _idaapi.MC12_cmpa
MC12_cmpb = _idaapi.MC12_cmpb
MC12_com = _idaapi.MC12_com
MC12_coma = _idaapi.MC12_coma
MC12_comb = _idaapi.MC12_comb
MC12_cpd = _idaapi.MC12_cpd
MC12_cps = _idaapi.MC12_cps
MC12_cpx = _idaapi.MC12_cpx
MC12_cpy = _idaapi.MC12_cpy
MC12_daa = _idaapi.MC12_daa
MC12_dbeq = _idaapi.MC12_dbeq
MC12_dbne = _idaapi.MC12_dbne
MC12_dec = _idaapi.MC12_dec
MC12_deca = _idaapi.MC12_deca
MC12_decb = _idaapi.MC12_decb
MC12_des = _idaapi.MC12_des
MC12_dex = _idaapi.MC12_dex
MC12_dey = _idaapi.MC12_dey
MC12_ediv = _idaapi.MC12_ediv
MC12_edivs = _idaapi.MC12_edivs
MC12_emacs = _idaapi.MC12_emacs
MC12_emaxd = _idaapi.MC12_emaxd
MC12_emaxm = _idaapi.MC12_emaxm
MC12_emind = _idaapi.MC12_emind
MC12_eminm = _idaapi.MC12_eminm
MC12_emul = _idaapi.MC12_emul
MC12_emuls = _idaapi.MC12_emuls
MC12_eora = _idaapi.MC12_eora
MC12_eorb = _idaapi.MC12_eorb
MC12_etbl = _idaapi.MC12_etbl
MC12_exg = _idaapi.MC12_exg
MC12_fdiv = _idaapi.MC12_fdiv
MC12_ibeq = _idaapi.MC12_ibeq
MC12_ibne = _idaapi.MC12_ibne
MC12_idiv = _idaapi.MC12_idiv
MC12_idivs = _idaapi.MC12_idivs
MC12_inc = _idaapi.MC12_inc
MC12_inca = _idaapi.MC12_inca
MC12_incb = _idaapi.MC12_incb
MC12_ins = _idaapi.MC12_ins
MC12_inx = _idaapi.MC12_inx
MC12_iny = _idaapi.MC12_iny
MC12_jmp = _idaapi.MC12_jmp
MC12_jsr = _idaapi.MC12_jsr
MC12_lbcc = _idaapi.MC12_lbcc
MC12_lbcs = _idaapi.MC12_lbcs
MC12_lbeq = _idaapi.MC12_lbeq
MC12_lbge = _idaapi.MC12_lbge
MC12_lbgt = _idaapi.MC12_lbgt
MC12_lbhi = _idaapi.MC12_lbhi
MC12_lbhs = _idaapi.MC12_lbhs
MC12_lble = _idaapi.MC12_lble
MC12_lblo = _idaapi.MC12_lblo
MC12_lbls = _idaapi.MC12_lbls
MC12_lblt = _idaapi.MC12_lblt
MC12_lbmi = _idaapi.MC12_lbmi
MC12_lbne = _idaapi.MC12_lbne
MC12_lbpl = _idaapi.MC12_lbpl
MC12_lbra = _idaapi.MC12_lbra
MC12_lbrn = _idaapi.MC12_lbrn
MC12_lbvc = _idaapi.MC12_lbvc
MC12_lbvs = _idaapi.MC12_lbvs
MC12_ldaa = _idaapi.MC12_ldaa
MC12_ldab = _idaapi.MC12_ldab
MC12_ldd = _idaapi.MC12_ldd
MC12_lds = _idaapi.MC12_lds
MC12_ldx = _idaapi.MC12_ldx
MC12_ldy = _idaapi.MC12_ldy
MC12_leas = _idaapi.MC12_leas
MC12_leax = _idaapi.MC12_leax
MC12_leay = _idaapi.MC12_leay
MC12_lsl = _idaapi.MC12_lsl
MC12_lsla = _idaapi.MC12_lsla
MC12_lslb = _idaapi.MC12_lslb
MC12_lsld = _idaapi.MC12_lsld
MC12_lsr = _idaapi.MC12_lsr
MC12_lsra = _idaapi.MC12_lsra
MC12_lsrb = _idaapi.MC12_lsrb
MC12_lsrd = _idaapi.MC12_lsrd
MC12_maxa = _idaapi.MC12_maxa
MC12_maxm = _idaapi.MC12_maxm
MC12_mem = _idaapi.MC12_mem
MC12_mina = _idaapi.MC12_mina
MC12_minm = _idaapi.MC12_minm
MC12_movb = _idaapi.MC12_movb
MC12_movw = _idaapi.MC12_movw
MC12_mul = _idaapi.MC12_mul
MC12_neg = _idaapi.MC12_neg
MC12_nega = _idaapi.MC12_nega
MC12_negb = _idaapi.MC12_negb
MC12_nop = _idaapi.MC12_nop
MC12_oraa = _idaapi.MC12_oraa
MC12_orab = _idaapi.MC12_orab
MC12_orcc = _idaapi.MC12_orcc
MC12_psha = _idaapi.MC12_psha
MC12_pshb = _idaapi.MC12_pshb
MC12_pshc = _idaapi.MC12_pshc
MC12_pshd = _idaapi.MC12_pshd
MC12_pshx = _idaapi.MC12_pshx
MC12_pshy = _idaapi.MC12_pshy
MC12_pula = _idaapi.MC12_pula
MC12_pulb = _idaapi.MC12_pulb
MC12_pulc = _idaapi.MC12_pulc
MC12_puld = _idaapi.MC12_puld
MC12_pulx = _idaapi.MC12_pulx
MC12_puly = _idaapi.MC12_puly
MC12_rev = _idaapi.MC12_rev
MC12_revw = _idaapi.MC12_revw
MC12_rol = _idaapi.MC12_rol
MC12_rola = _idaapi.MC12_rola
MC12_rolb = _idaapi.MC12_rolb
MC12_ror = _idaapi.MC12_ror
MC12_rora = _idaapi.MC12_rora
MC12_rorb = _idaapi.MC12_rorb
MC12_rtc = _idaapi.MC12_rtc
MC12_rti = _idaapi.MC12_rti
MC12_rts = _idaapi.MC12_rts
MC12_sba = _idaapi.MC12_sba
MC12_sbca = _idaapi.MC12_sbca
MC12_sbcb = _idaapi.MC12_sbcb
MC12_sec = _idaapi.MC12_sec
MC12_sei = _idaapi.MC12_sei
MC12_sev = _idaapi.MC12_sev
MC12_sex = _idaapi.MC12_sex
MC12_staa = _idaapi.MC12_staa
MC12_stab = _idaapi.MC12_stab
MC12_std = _idaapi.MC12_std
MC12_stop = _idaapi.MC12_stop
MC12_sts = _idaapi.MC12_sts
MC12_stx = _idaapi.MC12_stx
MC12_sty = _idaapi.MC12_sty
MC12_suba = _idaapi.MC12_suba
MC12_subb = _idaapi.MC12_subb
MC12_subd = _idaapi.MC12_subd
MC12_swi = _idaapi.MC12_swi
MC12_tab = _idaapi.MC12_tab
MC12_tap = _idaapi.MC12_tap
MC12_tba = _idaapi.MC12_tba
MC12_tbeq = _idaapi.MC12_tbeq
MC12_tbl = _idaapi.MC12_tbl
MC12_tbne = _idaapi.MC12_tbne
MC12_tfr = _idaapi.MC12_tfr
MC12_tpa = _idaapi.MC12_tpa
MC12_trap = _idaapi.MC12_trap
MC12_tst = _idaapi.MC12_tst
MC12_tsta = _idaapi.MC12_tsta
MC12_tstb = _idaapi.MC12_tstb
MC12_tsx = _idaapi.MC12_tsx
MC12_tsy = _idaapi.MC12_tsy
MC12_txs = _idaapi.MC12_txs
MC12_tys = _idaapi.MC12_tys
MC12_wai = _idaapi.MC12_wai
MC12_wav = _idaapi.MC12_wav
MC12_wavr = _idaapi.MC12_wavr
MC12_xgdx = _idaapi.MC12_xgdx
MC12_xgdy = _idaapi.MC12_xgdy
MC12_skip1 = _idaapi.MC12_skip1
MC12_skip2 = _idaapi.MC12_skip2
MC12X_addx = _idaapi.MC12X_addx
MC12X_addy = _idaapi.MC12X_addy
MC12X_aded = _idaapi.MC12X_aded
MC12X_adex = _idaapi.MC12X_adex
MC12X_adey = _idaapi.MC12X_adey
MC12X_andx = _idaapi.MC12X_andx
MC12X_andy = _idaapi.MC12X_andy
MC12X_aslw = _idaapi.MC12X_aslw
MC12X_aslx = _idaapi.MC12X_aslx
MC12X_asly = _idaapi.MC12X_asly
MC12X_asrw = _idaapi.MC12X_asrw
MC12X_asrx = _idaapi.MC12X_asrx
MC12X_asry = _idaapi.MC12X_asry
MC12X_bitx = _idaapi.MC12X_bitx
MC12X_bity = _idaapi.MC12X_bity
MC12X_btas = _idaapi.MC12X_btas
MC12X_clrw = _idaapi.MC12X_clrw
MC12X_clrx = _idaapi.MC12X_clrx
MC12X_clry = _idaapi.MC12X_clry
MC12X_comw = _idaapi.MC12X_comw
MC12X_comx = _idaapi.MC12X_comx
MC12X_comy = _idaapi.MC12X_comy
MC12X_cped = _idaapi.MC12X_cped
MC12X_cpes = _idaapi.MC12X_cpes
MC12X_cpex = _idaapi.MC12X_cpex
MC12X_cpey = _idaapi.MC12X_cpey
MC12X_decw = _idaapi.MC12X_decw
MC12X_decx = _idaapi.MC12X_decx
MC12X_decy = _idaapi.MC12X_decy
MC12X_eorx = _idaapi.MC12X_eorx
MC12X_eory = _idaapi.MC12X_eory
MC12X_gldaa = _idaapi.MC12X_gldaa
MC12X_gldab = _idaapi.MC12X_gldab
MC12X_gldd = _idaapi.MC12X_gldd
MC12X_glds = _idaapi.MC12X_glds
MC12X_gldx = _idaapi.MC12X_gldx
MC12X_gldy = _idaapi.MC12X_gldy
MC12X_gstaa = _idaapi.MC12X_gstaa
MC12X_gstab = _idaapi.MC12X_gstab
MC12X_gstd = _idaapi.MC12X_gstd
MC12X_gsts = _idaapi.MC12X_gsts
MC12X_gstx = _idaapi.MC12X_gstx
MC12X_gsty = _idaapi.MC12X_gsty
MC12X_incw = _idaapi.MC12X_incw
MC12X_incx = _idaapi.MC12X_incx
MC12X_incy = _idaapi.MC12X_incy
MC12X_lsrw = _idaapi.MC12X_lsrw
MC12X_lsrx = _idaapi.MC12X_lsrx
MC12X_lsry = _idaapi.MC12X_lsry
MC12X_negw = _idaapi.MC12X_negw
MC12X_negx = _idaapi.MC12X_negx
MC12X_negy = _idaapi.MC12X_negy
MC12X_orx = _idaapi.MC12X_orx
MC12X_ory = _idaapi.MC12X_ory
MC12X_pshcw = _idaapi.MC12X_pshcw
MC12X_pulcw = _idaapi.MC12X_pulcw
MC12X_rolw = _idaapi.MC12X_rolw
MC12X_rolx = _idaapi.MC12X_rolx
MC12X_roly = _idaapi.MC12X_roly
MC12X_rorw = _idaapi.MC12X_rorw
MC12X_rorx = _idaapi.MC12X_rorx
MC12X_rory = _idaapi.MC12X_rory
MC12X_sbed = _idaapi.MC12X_sbed
MC12X_sbex = _idaapi.MC12X_sbex
MC12X_sbey = _idaapi.MC12X_sbey
MC12X_subx = _idaapi.MC12X_subx
MC12X_suby = _idaapi.MC12X_suby
MC12X_tstw = _idaapi.MC12X_tstw
MC12X_tstx = _idaapi.MC12X_tstx
MC12X_tsty = _idaapi.MC12X_tsty
MC12X_sys = _idaapi.MC12X_sys
MC12XGATE_adc = _idaapi.MC12XGATE_adc
MC12XGATE_add = _idaapi.MC12XGATE_add
MC12XGATE_addh = _idaapi.MC12XGATE_addh
MC12XGATE_addl = _idaapi.MC12XGATE_addl
MC12XGATE_and = _idaapi.MC12XGATE_and
MC12XGATE_andh = _idaapi.MC12XGATE_andh
MC12XGATE_andl = _idaapi.MC12XGATE_andl
MC12XGATE_asr = _idaapi.MC12XGATE_asr
MC12XGATE_bcc = _idaapi.MC12XGATE_bcc
MC12XGATE_bcs = _idaapi.MC12XGATE_bcs
MC12XGATE_beq = _idaapi.MC12XGATE_beq
MC12XGATE_bfext = _idaapi.MC12XGATE_bfext
MC12XGATE_bffo = _idaapi.MC12XGATE_bffo
MC12XGATE_bfins = _idaapi.MC12XGATE_bfins
MC12XGATE_bfinsi = _idaapi.MC12XGATE_bfinsi
MC12XGATE_bfinsx = _idaapi.MC12XGATE_bfinsx
MC12XGATE_bge = _idaapi.MC12XGATE_bge
MC12XGATE_bgt = _idaapi.MC12XGATE_bgt
MC12XGATE_bhi = _idaapi.MC12XGATE_bhi
MC12XGATE_bhs = _idaapi.MC12XGATE_bhs
MC12XGATE_bith = _idaapi.MC12XGATE_bith
MC12XGATE_bitl = _idaapi.MC12XGATE_bitl
MC12XGATE_ble = _idaapi.MC12XGATE_ble
MC12XGATE_blo = _idaapi.MC12XGATE_blo
MC12XGATE_bls = _idaapi.MC12XGATE_bls
MC12XGATE_blt = _idaapi.MC12XGATE_blt
MC12XGATE_bmi = _idaapi.MC12XGATE_bmi
MC12XGATE_bne = _idaapi.MC12XGATE_bne
MC12XGATE_bpl = _idaapi.MC12XGATE_bpl
MC12XGATE_bra = _idaapi.MC12XGATE_bra
MC12XGATE_brk = _idaapi.MC12XGATE_brk
MC12XGATE_bvc = _idaapi.MC12XGATE_bvc
MC12XGATE_bvs = _idaapi.MC12XGATE_bvs
MC12XGATE_com = _idaapi.MC12XGATE_com
MC12XGATE_cmp = _idaapi.MC12XGATE_cmp
MC12XGATE_cmpl = _idaapi.MC12XGATE_cmpl
MC12XGATE_cpc = _idaapi.MC12XGATE_cpc
MC12XGATE_cpch = _idaapi.MC12XGATE_cpch
MC12XGATE_csem = _idaapi.MC12XGATE_csem
MC12XGATE_csl = _idaapi.MC12XGATE_csl
MC12XGATE_csr = _idaapi.MC12XGATE_csr
MC12XGATE_jal = _idaapi.MC12XGATE_jal
MC12XGATE_ldb = _idaapi.MC12XGATE_ldb
MC12XGATE_ldh = _idaapi.MC12XGATE_ldh
MC12XGATE_ldl = _idaapi.MC12XGATE_ldl
MC12XGATE_ldw = _idaapi.MC12XGATE_ldw
MC12XGATE_lsl = _idaapi.MC12XGATE_lsl
MC12XGATE_lsr = _idaapi.MC12XGATE_lsr
MC12XGATE_mov = _idaapi.MC12XGATE_mov
MC12XGATE_neg = _idaapi.MC12XGATE_neg
MC12XGATE_nop = _idaapi.MC12XGATE_nop
MC12XGATE_or = _idaapi.MC12XGATE_or
MC12XGATE_orh = _idaapi.MC12XGATE_orh
MC12XGATE_orl = _idaapi.MC12XGATE_orl
MC12XGATE_par = _idaapi.MC12XGATE_par
MC12XGATE_rol = _idaapi.MC12XGATE_rol
MC12XGATE_ror = _idaapi.MC12XGATE_ror
MC12XGATE_rts = _idaapi.MC12XGATE_rts
MC12XGATE_sbc = _idaapi.MC12XGATE_sbc
MC12XGATE_sex = _idaapi.MC12XGATE_sex
MC12XGATE_sif = _idaapi.MC12XGATE_sif
MC12XGATE_sssem = _idaapi.MC12XGATE_sssem
MC12XGATE_ssem = _idaapi.MC12XGATE_ssem
MC12XGATE_stb = _idaapi.MC12XGATE_stb
MC12XGATE_stw = _idaapi.MC12XGATE_stw
MC12XGATE_sub = _idaapi.MC12XGATE_sub
MC12XGATE_subh = _idaapi.MC12XGATE_subh
MC12XGATE_subl = _idaapi.MC12XGATE_subl
MC12XGATE_tst = _idaapi.MC12XGATE_tst
MC12XGATE_tfr = _idaapi.MC12XGATE_tfr
MC12XGATE_xnor = _idaapi.MC12XGATE_xnor
MC12XGATE_xnorh = _idaapi.MC12XGATE_xnorh
MC12XGATE_xnorl = _idaapi.MC12XGATE_xnorl
MC12_last = _idaapi.MC12_last
MC6816_null = _idaapi.MC6816_null
MC6816_ldaa = _idaapi.MC6816_ldaa
MC6816_ldab = _idaapi.MC6816_ldab
MC6816_ldd = _idaapi.MC6816_ldd
MC6816_lde = _idaapi.MC6816_lde
MC6816_lded = _idaapi.MC6816_lded
MC6816_movb = _idaapi.MC6816_movb
MC6816_movw = _idaapi.MC6816_movw
MC6816_staa = _idaapi.MC6816_staa
MC6816_stab = _idaapi.MC6816_stab
MC6816_std = _idaapi.MC6816_std
MC6816_ste = _idaapi.MC6816_ste
MC6816_sted = _idaapi.MC6816_sted
MC6816_tab = _idaapi.MC6816_tab
MC6816_tba = _idaapi.MC6816_tba
MC6816_tde = _idaapi.MC6816_tde
MC6816_ted = _idaapi.MC6816_ted
MC6816_xgab = _idaapi.MC6816_xgab
MC6816_xgde = _idaapi.MC6816_xgde
MC6816_aba = _idaapi.MC6816_aba
MC6816_adca = _idaapi.MC6816_adca
MC6816_adcb = _idaapi.MC6816_adcb
MC6816_adcd = _idaapi.MC6816_adcd
MC6816_adce = _idaapi.MC6816_adce
MC6816_adda = _idaapi.MC6816_adda
MC6816_addb = _idaapi.MC6816_addb
MC6816_addd = _idaapi.MC6816_addd
MC6816_adde = _idaapi.MC6816_adde
MC6816_ade = _idaapi.MC6816_ade
MC6816_sba = _idaapi.MC6816_sba
MC6816_sbca = _idaapi.MC6816_sbca
MC6816_sbcb = _idaapi.MC6816_sbcb
MC6816_sbcd = _idaapi.MC6816_sbcd
MC6816_sbce = _idaapi.MC6816_sbce
MC6816_sde = _idaapi.MC6816_sde
MC6816_suba = _idaapi.MC6816_suba
MC6816_subb = _idaapi.MC6816_subb
MC6816_subd = _idaapi.MC6816_subd
MC6816_sube = _idaapi.MC6816_sube
MC6816_daa = _idaapi.MC6816_daa
MC6816_sxt = _idaapi.MC6816_sxt
MC6816_cba = _idaapi.MC6816_cba
MC6816_cmpa = _idaapi.MC6816_cmpa
MC6816_cmpb = _idaapi.MC6816_cmpb
MC6816_cpd = _idaapi.MC6816_cpd
MC6816_cpe = _idaapi.MC6816_cpe
MC6816_tst = _idaapi.MC6816_tst
MC6816_tsta = _idaapi.MC6816_tsta
MC6816_tstb = _idaapi.MC6816_tstb
MC6816_tstd = _idaapi.MC6816_tstd
MC6816_tste = _idaapi.MC6816_tste
MC6816_tstw = _idaapi.MC6816_tstw
MC6816_ediv = _idaapi.MC6816_ediv
MC6816_edivs = _idaapi.MC6816_edivs
MC6816_emul = _idaapi.MC6816_emul
MC6816_emuls = _idaapi.MC6816_emuls
MC6816_fdiv = _idaapi.MC6816_fdiv
MC6816_fmuls = _idaapi.MC6816_fmuls
MC6816_idiv = _idaapi.MC6816_idiv
MC6816_mul = _idaapi.MC6816_mul
MC6816_dec = _idaapi.MC6816_dec
MC6816_deca = _idaapi.MC6816_deca
MC6816_decb = _idaapi.MC6816_decb
MC6816_decw = _idaapi.MC6816_decw
MC6816_inc = _idaapi.MC6816_inc
MC6816_inca = _idaapi.MC6816_inca
MC6816_incb = _idaapi.MC6816_incb
MC6816_incw = _idaapi.MC6816_incw
MC6816_clr = _idaapi.MC6816_clr
MC6816_clra = _idaapi.MC6816_clra
MC6816_clrb = _idaapi.MC6816_clrb
MC6816_clrd = _idaapi.MC6816_clrd
MC6816_clre = _idaapi.MC6816_clre
MC6816_clrw = _idaapi.MC6816_clrw
MC6816_com = _idaapi.MC6816_com
MC6816_coma = _idaapi.MC6816_coma
MC6816_comb = _idaapi.MC6816_comb
MC6816_comd = _idaapi.MC6816_comd
MC6816_come = _idaapi.MC6816_come
MC6816_comw = _idaapi.MC6816_comw
MC6816_neg = _idaapi.MC6816_neg
MC6816_nega = _idaapi.MC6816_nega
MC6816_negb = _idaapi.MC6816_negb
MC6816_negd = _idaapi.MC6816_negd
MC6816_nege = _idaapi.MC6816_nege
MC6816_negw = _idaapi.MC6816_negw
MC6816_anda = _idaapi.MC6816_anda
MC6816_andb = _idaapi.MC6816_andb
MC6816_andd = _idaapi.MC6816_andd
MC6816_ande = _idaapi.MC6816_ande
MC6816_eora = _idaapi.MC6816_eora
MC6816_eorb = _idaapi.MC6816_eorb
MC6816_eord = _idaapi.MC6816_eord
MC6816_eore = _idaapi.MC6816_eore
MC6816_oraa = _idaapi.MC6816_oraa
MC6816_orab = _idaapi.MC6816_orab
MC6816_ord = _idaapi.MC6816_ord
MC6816_ore = _idaapi.MC6816_ore
MC6816_bita = _idaapi.MC6816_bita
MC6816_bitb = _idaapi.MC6816_bitb
MC6816_bclr = _idaapi.MC6816_bclr
MC6816_bclrw = _idaapi.MC6816_bclrw
MC6816_bset = _idaapi.MC6816_bset
MC6816_bsetw = _idaapi.MC6816_bsetw
MC6816_lsr = _idaapi.MC6816_lsr
MC6816_lsra = _idaapi.MC6816_lsra
MC6816_lsrb = _idaapi.MC6816_lsrb
MC6816_lsrd = _idaapi.MC6816_lsrd
MC6816_lsre = _idaapi.MC6816_lsre
MC6816_lsrw = _idaapi.MC6816_lsrw
MC6816_asl = _idaapi.MC6816_asl
MC6816_asla = _idaapi.MC6816_asla
MC6816_aslb = _idaapi.MC6816_aslb
MC6816_asld = _idaapi.MC6816_asld
MC6816_asle = _idaapi.MC6816_asle
MC6816_aslw = _idaapi.MC6816_aslw
MC6816_asr = _idaapi.MC6816_asr
MC6816_asra = _idaapi.MC6816_asra
MC6816_asrb = _idaapi.MC6816_asrb
MC6816_asrd = _idaapi.MC6816_asrd
MC6816_asre = _idaapi.MC6816_asre
MC6816_asrw = _idaapi.MC6816_asrw
MC6816_rol = _idaapi.MC6816_rol
MC6816_rola = _idaapi.MC6816_rola
MC6816_rolb = _idaapi.MC6816_rolb
MC6816_rold = _idaapi.MC6816_rold
MC6816_role = _idaapi.MC6816_role
MC6816_rolw = _idaapi.MC6816_rolw
MC6816_ror = _idaapi.MC6816_ror
MC6816_rora = _idaapi.MC6816_rora
MC6816_rorb = _idaapi.MC6816_rorb
MC6816_rord = _idaapi.MC6816_rord
MC6816_rore = _idaapi.MC6816_rore
MC6816_rorw = _idaapi.MC6816_rorw
MC6816_bra = _idaapi.MC6816_bra
MC6816_brn = _idaapi.MC6816_brn
MC6816_bcc = _idaapi.MC6816_bcc
MC6816_bcs = _idaapi.MC6816_bcs
MC6816_beq = _idaapi.MC6816_beq
MC6816_bmi = _idaapi.MC6816_bmi
MC6816_bne = _idaapi.MC6816_bne
MC6816_bpl = _idaapi.MC6816_bpl
MC6816_bvc = _idaapi.MC6816_bvc
MC6816_bvs = _idaapi.MC6816_bvs
MC6816_bhi = _idaapi.MC6816_bhi
MC6816_bls = _idaapi.MC6816_bls
MC6816_bge = _idaapi.MC6816_bge
MC6816_bgt = _idaapi.MC6816_bgt
MC6816_ble = _idaapi.MC6816_ble
MC6816_blt = _idaapi.MC6816_blt
MC6816_lbra = _idaapi.MC6816_lbra
MC6816_lbrn = _idaapi.MC6816_lbrn
MC6816_lbcc = _idaapi.MC6816_lbcc
MC6816_lbcs = _idaapi.MC6816_lbcs
MC6816_lbeq = _idaapi.MC6816_lbeq
MC6816_lbev = _idaapi.MC6816_lbev
MC6816_lbmi = _idaapi.MC6816_lbmi
MC6816_lbmv = _idaapi.MC6816_lbmv
MC6816_lbne = _idaapi.MC6816_lbne
MC6816_lbpl = _idaapi.MC6816_lbpl
MC6816_lbvc = _idaapi.MC6816_lbvc
MC6816_lbvs = _idaapi.MC6816_lbvs
MC6816_lbhi = _idaapi.MC6816_lbhi
MC6816_lbls = _idaapi.MC6816_lbls
MC6816_lbge = _idaapi.MC6816_lbge
MC6816_lbgt = _idaapi.MC6816_lbgt
MC6816_lble = _idaapi.MC6816_lble
MC6816_lblt = _idaapi.MC6816_lblt
MC6816_brclr = _idaapi.MC6816_brclr
MC6816_brset = _idaapi.MC6816_brset
MC6816_jmp = _idaapi.MC6816_jmp
MC6816_bsr = _idaapi.MC6816_bsr
MC6816_jsr = _idaapi.MC6816_jsr
MC6816_lbsr = _idaapi.MC6816_lbsr
MC6816_rts = _idaapi.MC6816_rts
MC6816_rti = _idaapi.MC6816_rti
MC6816_swi = _idaapi.MC6816_swi
MC6816_abx = _idaapi.MC6816_abx
MC6816_aby = _idaapi.MC6816_aby
MC6816_abz = _idaapi.MC6816_abz
MC6816_adx = _idaapi.MC6816_adx
MC6816_ady = _idaapi.MC6816_ady
MC6816_adz = _idaapi.MC6816_adz
MC6816_aex = _idaapi.MC6816_aex
MC6816_aey = _idaapi.MC6816_aey
MC6816_aez = _idaapi.MC6816_aez
MC6816_aix = _idaapi.MC6816_aix
MC6816_aiy = _idaapi.MC6816_aiy
MC6816_aiz = _idaapi.MC6816_aiz
MC6816_cpx = _idaapi.MC6816_cpx
MC6816_cpy = _idaapi.MC6816_cpy
MC6816_cpz = _idaapi.MC6816_cpz
MC6816_ldx = _idaapi.MC6816_ldx
MC6816_ldy = _idaapi.MC6816_ldy
MC6816_ldz = _idaapi.MC6816_ldz
MC6816_stx = _idaapi.MC6816_stx
MC6816_sty = _idaapi.MC6816_sty
MC6816_stz = _idaapi.MC6816_stz
MC6816_tsx = _idaapi.MC6816_tsx
MC6816_tsy = _idaapi.MC6816_tsy
MC6816_tsz = _idaapi.MC6816_tsz
MC6816_txs = _idaapi.MC6816_txs
MC6816_txy = _idaapi.MC6816_txy
MC6816_txz = _idaapi.MC6816_txz
MC6816_tys = _idaapi.MC6816_tys
MC6816_tyx = _idaapi.MC6816_tyx
MC6816_tyz = _idaapi.MC6816_tyz
MC6816_tzs = _idaapi.MC6816_tzs
MC6816_tzx = _idaapi.MC6816_tzx
MC6816_tzy = _idaapi.MC6816_tzy
MC6816_xgdx = _idaapi.MC6816_xgdx
MC6816_xgdy = _idaapi.MC6816_xgdy
MC6816_xgdz = _idaapi.MC6816_xgdz
MC6816_xgex = _idaapi.MC6816_xgex
MC6816_xgey = _idaapi.MC6816_xgey
MC6816_xgez = _idaapi.MC6816_xgez
MC6816_tbek = _idaapi.MC6816_tbek
MC6816_tbsk = _idaapi.MC6816_tbsk
MC6816_tbxk = _idaapi.MC6816_tbxk
MC6816_tbyk = _idaapi.MC6816_tbyk
MC6816_tbzk = _idaapi.MC6816_tbzk
MC6816_tekb = _idaapi.MC6816_tekb
MC6816_tskb = _idaapi.MC6816_tskb
MC6816_txkb = _idaapi.MC6816_txkb
MC6816_tykb = _idaapi.MC6816_tykb
MC6816_tzkb = _idaapi.MC6816_tzkb
MC6816_ais = _idaapi.MC6816_ais
MC6816_cps = _idaapi.MC6816_cps
MC6816_lds = _idaapi.MC6816_lds
MC6816_sts = _idaapi.MC6816_sts
MC6816_psha = _idaapi.MC6816_psha
MC6816_pshb = _idaapi.MC6816_pshb
MC6816_pshm = _idaapi.MC6816_pshm
MC6816_pula = _idaapi.MC6816_pula
MC6816_pulb = _idaapi.MC6816_pulb
MC6816_pulm = _idaapi.MC6816_pulm
MC6816_andp = _idaapi.MC6816_andp
MC6816_orp = _idaapi.MC6816_orp
MC6816_tap = _idaapi.MC6816_tap
MC6816_tdp = _idaapi.MC6816_tdp
MC6816_tpa = _idaapi.MC6816_tpa
MC6816_tpd = _idaapi.MC6816_tpd
MC6816_ace = _idaapi.MC6816_ace
MC6816_aced = _idaapi.MC6816_aced
MC6816_aslm = _idaapi.MC6816_aslm
MC6816_asrm = _idaapi.MC6816_asrm
MC6816_clrm = _idaapi.MC6816_clrm
MC6816_ldhi = _idaapi.MC6816_ldhi
MC6816_mac = _idaapi.MC6816_mac
MC6816_pshmac = _idaapi.MC6816_pshmac
MC6816_pulmac = _idaapi.MC6816_pulmac
MC6816_rmac = _idaapi.MC6816_rmac
MC6816_tdmsk = _idaapi.MC6816_tdmsk
MC6816_tedm = _idaapi.MC6816_tedm
MC6816_tem = _idaapi.MC6816_tem
MC6816_tmer = _idaapi.MC6816_tmer
MC6816_tmet = _idaapi.MC6816_tmet
MC6816_tmxed = _idaapi.MC6816_tmxed
MC6816_lpstop = _idaapi.MC6816_lpstop
MC6816_wai = _idaapi.MC6816_wai
MC6816_bgnd = _idaapi.MC6816_bgnd
MC6816_nop = _idaapi.MC6816_nop
MC6816_last = _idaapi.MC6816_last
I960_null = _idaapi.I960_null
I960_addc = _idaapi.I960_addc
I960_addi = _idaapi.I960_addi
I960_addo = _idaapi.I960_addo
I960_alterbit = _idaapi.I960_alterbit
I960_and = _idaapi.I960_and
I960_andnot = _idaapi.I960_andnot
I960_atadd = _idaapi.I960_atadd
I960_atmod = _idaapi.I960_atmod
I960_b = _idaapi.I960_b
I960_bal = _idaapi.I960_bal
I960_balx = _idaapi.I960_balx
I960_bbc = _idaapi.I960_bbc
I960_bbs = _idaapi.I960_bbs
I960_bno = _idaapi.I960_bno
I960_bg = _idaapi.I960_bg
I960_be = _idaapi.I960_be
I960_bge = _idaapi.I960_bge
I960_bl = _idaapi.I960_bl
I960_bne = _idaapi.I960_bne
I960_ble = _idaapi.I960_ble
I960_bo = _idaapi.I960_bo
I960_bx = _idaapi.I960_bx
I960_call = _idaapi.I960_call
I960_calls = _idaapi.I960_calls
I960_callx = _idaapi.I960_callx
I960_chkbit = _idaapi.I960_chkbit
I960_clrbit = _idaapi.I960_clrbit
I960_cmpdeci = _idaapi.I960_cmpdeci
I960_cmpdeco = _idaapi.I960_cmpdeco
I960_cmpi = _idaapi.I960_cmpi
I960_cmpibno = _idaapi.I960_cmpibno
I960_cmpibg = _idaapi.I960_cmpibg
I960_cmpibe = _idaapi.I960_cmpibe
I960_cmpibge = _idaapi.I960_cmpibge
I960_cmpibl = _idaapi.I960_cmpibl
I960_cmpibne = _idaapi.I960_cmpibne
I960_cmpible = _idaapi.I960_cmpible
I960_cmpibo = _idaapi.I960_cmpibo
I960_cmpinci = _idaapi.I960_cmpinci
I960_cmpinco = _idaapi.I960_cmpinco
I960_cmpo = _idaapi.I960_cmpo
I960_cmpobg = _idaapi.I960_cmpobg
I960_cmpobe = _idaapi.I960_cmpobe
I960_cmpobge = _idaapi.I960_cmpobge
I960_cmpobl = _idaapi.I960_cmpobl
I960_cmpobne = _idaapi.I960_cmpobne
I960_cmpoble = _idaapi.I960_cmpoble
I960_concmpi = _idaapi.I960_concmpi
I960_concmpo = _idaapi.I960_concmpo
I960_divi = _idaapi.I960_divi
I960_divo = _idaapi.I960_divo
I960_ediv = _idaapi.I960_ediv
I960_emul = _idaapi.I960_emul
I960_eshro = _idaapi.I960_eshro
I960_extract = _idaapi.I960_extract
I960_faultno = _idaapi.I960_faultno
I960_faultg = _idaapi.I960_faultg
I960_faulte = _idaapi.I960_faulte
I960_faultge = _idaapi.I960_faultge
I960_faultl = _idaapi.I960_faultl
I960_faultne = _idaapi.I960_faultne
I960_faultle = _idaapi.I960_faultle
I960_faulto = _idaapi.I960_faulto
I960_flushreg = _idaapi.I960_flushreg
I960_fmark = _idaapi.I960_fmark
I960_ld = _idaapi.I960_ld
I960_lda = _idaapi.I960_lda
I960_ldib = _idaapi.I960_ldib
I960_ldis = _idaapi.I960_ldis
I960_ldl = _idaapi.I960_ldl
I960_ldob = _idaapi.I960_ldob
I960_ldos = _idaapi.I960_ldos
I960_ldq = _idaapi.I960_ldq
I960_ldt = _idaapi.I960_ldt
I960_mark = _idaapi.I960_mark
I960_modac = _idaapi.I960_modac
I960_modi = _idaapi.I960_modi
I960_modify = _idaapi.I960_modify
I960_modpc = _idaapi.I960_modpc
I960_modtc = _idaapi.I960_modtc
I960_mov = _idaapi.I960_mov
I960_movl = _idaapi.I960_movl
I960_movq = _idaapi.I960_movq
I960_movt = _idaapi.I960_movt
I960_muli = _idaapi.I960_muli
I960_mulo = _idaapi.I960_mulo
I960_nand = _idaapi.I960_nand
I960_nor = _idaapi.I960_nor
I960_not = _idaapi.I960_not
I960_notand = _idaapi.I960_notand
I960_notbit = _idaapi.I960_notbit
I960_notor = _idaapi.I960_notor
I960_or = _idaapi.I960_or
I960_ornot = _idaapi.I960_ornot
I960_remi = _idaapi.I960_remi
I960_remo = _idaapi.I960_remo
I960_ret = _idaapi.I960_ret
I960_rotate = _idaapi.I960_rotate
I960_scanbit = _idaapi.I960_scanbit
I960_scanbyte = _idaapi.I960_scanbyte
I960_setbit = _idaapi.I960_setbit
I960_shli = _idaapi.I960_shli
I960_shlo = _idaapi.I960_shlo
I960_shrdi = _idaapi.I960_shrdi
I960_shri = _idaapi.I960_shri
I960_shro = _idaapi.I960_shro
I960_spanbit = _idaapi.I960_spanbit
I960_st = _idaapi.I960_st
I960_stib = _idaapi.I960_stib
I960_stis = _idaapi.I960_stis
I960_stl = _idaapi.I960_stl
I960_stob = _idaapi.I960_stob
I960_stos = _idaapi.I960_stos
I960_stq = _idaapi.I960_stq
I960_stt = _idaapi.I960_stt
I960_subc = _idaapi.I960_subc
I960_subi = _idaapi.I960_subi
I960_subo = _idaapi.I960_subo
I960_syncf = _idaapi.I960_syncf
I960_testno = _idaapi.I960_testno
I960_testg = _idaapi.I960_testg
I960_teste = _idaapi.I960_teste
I960_testge = _idaapi.I960_testge
I960_testl = _idaapi.I960_testl
I960_testne = _idaapi.I960_testne
I960_testle = _idaapi.I960_testle
I960_testo = _idaapi.I960_testo
I960_xnor = _idaapi.I960_xnor
I960_xor = _idaapi.I960_xor
I960_sdma = _idaapi.I960_sdma
I960_sysctl = _idaapi.I960_sysctl
I960_udma = _idaapi.I960_udma
I960_dcinva = _idaapi.I960_dcinva
I960_cmpob = _idaapi.I960_cmpob
I960_cmpib = _idaapi.I960_cmpib
I960_cmpos = _idaapi.I960_cmpos
I960_cmpis = _idaapi.I960_cmpis
I960_bswap = _idaapi.I960_bswap
I960_intdis = _idaapi.I960_intdis
I960_inten = _idaapi.I960_inten
I960_synmov = _idaapi.I960_synmov
I960_synmovl = _idaapi.I960_synmovl
I960_synmovq = _idaapi.I960_synmovq
I960_cmpstr = _idaapi.I960_cmpstr
I960_movqstr = _idaapi.I960_movqstr
I960_movstr = _idaapi.I960_movstr
I960_inspacc = _idaapi.I960_inspacc
I960_ldphy = _idaapi.I960_ldphy
I960_synld = _idaapi.I960_synld
I960_fill = _idaapi.I960_fill
I960_daddc = _idaapi.I960_daddc
I960_dsubc = _idaapi.I960_dsubc
I960_dmovt = _idaapi.I960_dmovt
I960_condrec = _idaapi.I960_condrec
I960_receive = _idaapi.I960_receive
I960_intctl = _idaapi.I960_intctl
I960_icctl = _idaapi.I960_icctl
I960_dcctl = _idaapi.I960_dcctl
I960_halt = _idaapi.I960_halt
I960_send = _idaapi.I960_send
I960_sendserv = _idaapi.I960_sendserv
I960_resumprcs = _idaapi.I960_resumprcs
I960_schedprcs = _idaapi.I960_schedprcs
I960_saveprcs = _idaapi.I960_saveprcs
I960_condwait = _idaapi.I960_condwait
I960_wait = _idaapi.I960_wait
I960_signal = _idaapi.I960_signal
I960_ldtime = _idaapi.I960_ldtime
I960_addono = _idaapi.I960_addono
I960_addino = _idaapi.I960_addino
I960_subono = _idaapi.I960_subono
I960_subino = _idaapi.I960_subino
I960_selno = _idaapi.I960_selno
I960_addog = _idaapi.I960_addog
I960_addig = _idaapi.I960_addig
I960_subog = _idaapi.I960_subog
I960_subig = _idaapi.I960_subig
I960_selg = _idaapi.I960_selg
I960_addoe = _idaapi.I960_addoe
I960_addie = _idaapi.I960_addie
I960_suboe = _idaapi.I960_suboe
I960_subie = _idaapi.I960_subie
I960_sele = _idaapi.I960_sele
I960_addoge = _idaapi.I960_addoge
I960_addige = _idaapi.I960_addige
I960_suboge = _idaapi.I960_suboge
I960_subige = _idaapi.I960_subige
I960_selge = _idaapi.I960_selge
I960_addol = _idaapi.I960_addol
I960_addil = _idaapi.I960_addil
I960_subol = _idaapi.I960_subol
I960_subil = _idaapi.I960_subil
I960_sell = _idaapi.I960_sell
I960_addone = _idaapi.I960_addone
I960_addine = _idaapi.I960_addine
I960_subone = _idaapi.I960_subone
I960_subine = _idaapi.I960_subine
I960_selne = _idaapi.I960_selne
I960_addole = _idaapi.I960_addole
I960_addile = _idaapi.I960_addile
I960_subole = _idaapi.I960_subole
I960_subile = _idaapi.I960_subile
I960_selle = _idaapi.I960_selle
I960_addoo = _idaapi.I960_addoo
I960_addio = _idaapi.I960_addio
I960_suboo = _idaapi.I960_suboo
I960_subio = _idaapi.I960_subio
I960_selo = _idaapi.I960_selo
I960_faddr = _idaapi.I960_faddr
I960_fp_first = _idaapi.I960_fp_first
I960_faddrl = _idaapi.I960_faddrl
I960_fatanr = _idaapi.I960_fatanr
I960_fatanrl = _idaapi.I960_fatanrl
I960_fclassr = _idaapi.I960_fclassr
I960_fclassrl = _idaapi.I960_fclassrl
I960_fcmpor = _idaapi.I960_fcmpor
I960_fcmporl = _idaapi.I960_fcmporl
I960_fcmpr = _idaapi.I960_fcmpr
I960_fcmprl = _idaapi.I960_fcmprl
I960_fcosr = _idaapi.I960_fcosr
I960_fcosrl = _idaapi.I960_fcosrl
I960_fcpyrsre = _idaapi.I960_fcpyrsre
I960_fcpysre = _idaapi.I960_fcpysre
I960_fcvtilr = _idaapi.I960_fcvtilr
I960_fcvtir = _idaapi.I960_fcvtir
I960_fcvtri = _idaapi.I960_fcvtri
I960_fcvtril = _idaapi.I960_fcvtril
I960_fcvtzri = _idaapi.I960_fcvtzri
I960_fcvtzril = _idaapi.I960_fcvtzril
I960_fdivr = _idaapi.I960_fdivr
I960_fdivrl = _idaapi.I960_fdivrl
I960_fexpr = _idaapi.I960_fexpr
I960_fexprl = _idaapi.I960_fexprl
I960_flogbnr = _idaapi.I960_flogbnr
I960_flogbnrl = _idaapi.I960_flogbnrl
I960_flogepr = _idaapi.I960_flogepr
I960_flogeprl = _idaapi.I960_flogeprl
I960_flogr = _idaapi.I960_flogr
I960_flogrl = _idaapi.I960_flogrl
I960_fmovr = _idaapi.I960_fmovr
I960_fmovre = _idaapi.I960_fmovre
I960_fmovrl = _idaapi.I960_fmovrl
I960_fmulr = _idaapi.I960_fmulr
I960_fmulrl = _idaapi.I960_fmulrl
I960_fremr = _idaapi.I960_fremr
I960_fremrl = _idaapi.I960_fremrl
I960_froundr = _idaapi.I960_froundr
I960_froundrl = _idaapi.I960_froundrl
I960_fscaler = _idaapi.I960_fscaler
I960_fscalerl = _idaapi.I960_fscalerl
I960_fsinr = _idaapi.I960_fsinr
I960_fsinrl = _idaapi.I960_fsinrl
I960_fsqrtr = _idaapi.I960_fsqrtr
I960_fsqrtrl = _idaapi.I960_fsqrtrl
I960_fsubr = _idaapi.I960_fsubr
I960_fsubrl = _idaapi.I960_fsubrl
I960_ftanr = _idaapi.I960_ftanr
I960_ftanrl = _idaapi.I960_ftanrl
I960_fp_last = _idaapi.I960_fp_last
I960_last = _idaapi.I960_last
F2MC_null = _idaapi.F2MC_null
F2MC_mov = _idaapi.F2MC_mov
F2MC_movn = _idaapi.F2MC_movn
F2MC_movx = _idaapi.F2MC_movx
F2MC_xch = _idaapi.F2MC_xch
F2MC_movw = _idaapi.F2MC_movw
F2MC_xchw = _idaapi.F2MC_xchw
F2MC_movl = _idaapi.F2MC_movl
F2MC_add = _idaapi.F2MC_add
F2MC_addc1 = _idaapi.F2MC_addc1
F2MC_addc2 = _idaapi.F2MC_addc2
F2MC_adddc = _idaapi.F2MC_adddc
F2MC_sub = _idaapi.F2MC_sub
F2MC_subc1 = _idaapi.F2MC_subc1
F2MC_subc2 = _idaapi.F2MC_subc2
F2MC_subdc = _idaapi.F2MC_subdc
F2MC_addw1 = _idaapi.F2MC_addw1
F2MC_addw2 = _idaapi.F2MC_addw2
F2MC_addcw = _idaapi.F2MC_addcw
F2MC_subw1 = _idaapi.F2MC_subw1
F2MC_subw2 = _idaapi.F2MC_subw2
F2MC_subcw = _idaapi.F2MC_subcw
F2MC_addl = _idaapi.F2MC_addl
F2MC_subl = _idaapi.F2MC_subl
F2MC_inc = _idaapi.F2MC_inc
F2MC_dec = _idaapi.F2MC_dec
F2MC_incw = _idaapi.F2MC_incw
F2MC_decw = _idaapi.F2MC_decw
F2MC_incl = _idaapi.F2MC_incl
F2MC_decl = _idaapi.F2MC_decl
F2MC_cmp1 = _idaapi.F2MC_cmp1
F2MC_cmp2 = _idaapi.F2MC_cmp2
F2MC_cmpw1 = _idaapi.F2MC_cmpw1
F2MC_cmpw2 = _idaapi.F2MC_cmpw2
F2MC_cmpl = _idaapi.F2MC_cmpl
F2MC_divu1 = _idaapi.F2MC_divu1
F2MC_divu2 = _idaapi.F2MC_divu2
F2MC_divuw = _idaapi.F2MC_divuw
F2MC_mulu1 = _idaapi.F2MC_mulu1
F2MC_mulu2 = _idaapi.F2MC_mulu2
F2MC_muluw1 = _idaapi.F2MC_muluw1
F2MC_muluw2 = _idaapi.F2MC_muluw2
F2MC_div1 = _idaapi.F2MC_div1
F2MC_div2 = _idaapi.F2MC_div2
F2MC_divw = _idaapi.F2MC_divw
F2MC_mul1 = _idaapi.F2MC_mul1
F2MC_mul2 = _idaapi.F2MC_mul2
F2MC_mulw1 = _idaapi.F2MC_mulw1
F2MC_mulw2 = _idaapi.F2MC_mulw2
F2MC_and = _idaapi.F2MC_and
F2MC_or = _idaapi.F2MC_or
F2MC_xor = _idaapi.F2MC_xor
F2MC_not = _idaapi.F2MC_not
F2MC_andw1 = _idaapi.F2MC_andw1
F2MC_andw2 = _idaapi.F2MC_andw2
F2MC_orw1 = _idaapi.F2MC_orw1
F2MC_orw2 = _idaapi.F2MC_orw2
F2MC_xorw1 = _idaapi.F2MC_xorw1
F2MC_xorw2 = _idaapi.F2MC_xorw2
F2MC_notw = _idaapi.F2MC_notw
F2MC_andl = _idaapi.F2MC_andl
F2MC_orl = _idaapi.F2MC_orl
F2MC_xorl = _idaapi.F2MC_xorl
F2MC_neg = _idaapi.F2MC_neg
F2MC_negw = _idaapi.F2MC_negw
F2MC_nrml = _idaapi.F2MC_nrml
F2MC_rorc = _idaapi.F2MC_rorc
F2MC_rolc = _idaapi.F2MC_rolc
F2MC_asr = _idaapi.F2MC_asr
F2MC_lsr = _idaapi.F2MC_lsr
F2MC_lsl = _idaapi.F2MC_lsl
F2MC_asrw1 = _idaapi.F2MC_asrw1
F2MC_asrw2 = _idaapi.F2MC_asrw2
F2MC_lsrw1 = _idaapi.F2MC_lsrw1
F2MC_lsrw2 = _idaapi.F2MC_lsrw2
F2MC_lslw1 = _idaapi.F2MC_lslw1
F2MC_lslw2 = _idaapi.F2MC_lslw2
F2MC_asrl = _idaapi.F2MC_asrl
F2MC_lsrl = _idaapi.F2MC_lsrl
F2MC_lsll = _idaapi.F2MC_lsll
F2MC_bz = _idaapi.F2MC_bz
F2MC_bnz = _idaapi.F2MC_bnz
F2MC_bc = _idaapi.F2MC_bc
F2MC_bnc = _idaapi.F2MC_bnc
F2MC_bn = _idaapi.F2MC_bn
F2MC_bp = _idaapi.F2MC_bp
F2MC_bv = _idaapi.F2MC_bv
F2MC_bnv = _idaapi.F2MC_bnv
F2MC_bt = _idaapi.F2MC_bt
F2MC_bnt = _idaapi.F2MC_bnt
F2MC_blt = _idaapi.F2MC_blt
F2MC_bge = _idaapi.F2MC_bge
F2MC_ble = _idaapi.F2MC_ble
F2MC_bgt = _idaapi.F2MC_bgt
F2MC_bls = _idaapi.F2MC_bls
F2MC_bhi = _idaapi.F2MC_bhi
F2MC_bra = _idaapi.F2MC_bra
F2MC_jmp = _idaapi.F2MC_jmp
F2MC_jmpp = _idaapi.F2MC_jmpp
F2MC_call = _idaapi.F2MC_call
F2MC_callv = _idaapi.F2MC_callv
F2MC_callp = _idaapi.F2MC_callp
F2MC_cbne = _idaapi.F2MC_cbne
F2MC_cwbne = _idaapi.F2MC_cwbne
F2MC_dbnz = _idaapi.F2MC_dbnz
F2MC_dwbnz = _idaapi.F2MC_dwbnz
F2MC_int = _idaapi.F2MC_int
F2MC_intp = _idaapi.F2MC_intp
F2MC_int9 = _idaapi.F2MC_int9
F2MC_reti = _idaapi.F2MC_reti
F2MC_link = _idaapi.F2MC_link
F2MC_unlink = _idaapi.F2MC_unlink
F2MC_ret = _idaapi.F2MC_ret
F2MC_retp = _idaapi.F2MC_retp
F2MC_pushw = _idaapi.F2MC_pushw
F2MC_popw = _idaapi.F2MC_popw
F2MC_jctx = _idaapi.F2MC_jctx
F2MC_movea = _idaapi.F2MC_movea
F2MC_addsp = _idaapi.F2MC_addsp
F2MC_nop = _idaapi.F2MC_nop
F2MC_adb = _idaapi.F2MC_adb
F2MC_dtb = _idaapi.F2MC_dtb
F2MC_pcb = _idaapi.F2MC_pcb
F2MC_spb = _idaapi.F2MC_spb
F2MC_ncc = _idaapi.F2MC_ncc
F2MC_cmr = _idaapi.F2MC_cmr
F2MC_movb = _idaapi.F2MC_movb
F2MC_setb = _idaapi.F2MC_setb
F2MC_clrb = _idaapi.F2MC_clrb
F2MC_bbc = _idaapi.F2MC_bbc
F2MC_bbs = _idaapi.F2MC_bbs
F2MC_sbbs = _idaapi.F2MC_sbbs
F2MC_wbts = _idaapi.F2MC_wbts
F2MC_wbtc = _idaapi.F2MC_wbtc
F2MC_swap = _idaapi.F2MC_swap
F2MC_swapw = _idaapi.F2MC_swapw
F2MC_ext = _idaapi.F2MC_ext
F2MC_extw = _idaapi.F2MC_extw
F2MC_zext = _idaapi.F2MC_zext
F2MC_zextw = _idaapi.F2MC_zextw
F2MC_movsi = _idaapi.F2MC_movsi
F2MC_movsd = _idaapi.F2MC_movsd
F2MC_sceqi = _idaapi.F2MC_sceqi
F2MC_sceqd = _idaapi.F2MC_sceqd
F2MC_filsi = _idaapi.F2MC_filsi
F2MC_movswi = _idaapi.F2MC_movswi
F2MC_movswd = _idaapi.F2MC_movswd
F2MC_scweqi = _idaapi.F2MC_scweqi
F2MC_scweqd = _idaapi.F2MC_scweqd
F2MC_filswi = _idaapi.F2MC_filswi
F2MC_bz16 = _idaapi.F2MC_bz16
F2MC_bnz16 = _idaapi.F2MC_bnz16
F2MC_bc16 = _idaapi.F2MC_bc16
F2MC_bnc16 = _idaapi.F2MC_bnc16
F2MC_bn16 = _idaapi.F2MC_bn16
F2MC_bp16 = _idaapi.F2MC_bp16
F2MC_bv16 = _idaapi.F2MC_bv16
F2MC_bnv16 = _idaapi.F2MC_bnv16
F2MC_bt16 = _idaapi.F2MC_bt16
F2MC_bnt16 = _idaapi.F2MC_bnt16
F2MC_blt16 = _idaapi.F2MC_blt16
F2MC_bge16 = _idaapi.F2MC_bge16
F2MC_ble16 = _idaapi.F2MC_ble16
F2MC_bgt16 = _idaapi.F2MC_bgt16
F2MC_bls16 = _idaapi.F2MC_bls16
F2MC_bhi16 = _idaapi.F2MC_bhi16
F2MC_cbne16 = _idaapi.F2MC_cbne16
F2MC_cwbne16 = _idaapi.F2MC_cwbne16
F2MC_dbnz16 = _idaapi.F2MC_dbnz16
F2MC_dwbnz16 = _idaapi.F2MC_dwbnz16
F2MC_bbc16 = _idaapi.F2MC_bbc16
F2MC_bbs16 = _idaapi.F2MC_bbs16
F2MC_sbbs16 = _idaapi.F2MC_sbbs16
F2MC_last = _idaapi.F2MC_last
TMS320C3X_null = _idaapi.TMS320C3X_null
TMS320C3X_ABSF = _idaapi.TMS320C3X_ABSF
TMS320C3X_ABSI = _idaapi.TMS320C3X_ABSI
TMS320C3X_ADDC = _idaapi.TMS320C3X_ADDC
TMS320C3X_ADDF = _idaapi.TMS320C3X_ADDF
TMS320C3X_ADDI = _idaapi.TMS320C3X_ADDI
TMS320C3X_AND = _idaapi.TMS320C3X_AND
TMS320C3X_ANDN = _idaapi.TMS320C3X_ANDN
TMS320C3X_ASH = _idaapi.TMS320C3X_ASH
TMS320C3X_CMPF = _idaapi.TMS320C3X_CMPF
TMS320C3X_CMPI = _idaapi.TMS320C3X_CMPI
TMS320C3X_FIX = _idaapi.TMS320C3X_FIX
TMS320C3X_FLOAT = _idaapi.TMS320C3X_FLOAT
TMS320C3X_IDLE = _idaapi.TMS320C3X_IDLE
TMS320C3X_IDLE2 = _idaapi.TMS320C3X_IDLE2
TMS320C3X_LDE = _idaapi.TMS320C3X_LDE
TMS320C3X_LDF = _idaapi.TMS320C3X_LDF
TMS320C3X_LDFI = _idaapi.TMS320C3X_LDFI
TMS320C3X_LDI = _idaapi.TMS320C3X_LDI
TMS320C3X_LDII = _idaapi.TMS320C3X_LDII
TMS320C3X_LDM = _idaapi.TMS320C3X_LDM
TMS320C3X_LSH = _idaapi.TMS320C3X_LSH
TMS320C3X_MPYF = _idaapi.TMS320C3X_MPYF
TMS320C3X_MPYI = _idaapi.TMS320C3X_MPYI
TMS320C3X_NEGB = _idaapi.TMS320C3X_NEGB
TMS320C3X_NEGF = _idaapi.TMS320C3X_NEGF
TMS320C3X_NEGI = _idaapi.TMS320C3X_NEGI
TMS320C3X_NOP = _idaapi.TMS320C3X_NOP
TMS320C3X_NORM = _idaapi.TMS320C3X_NORM
TMS320C3X_NOT = _idaapi.TMS320C3X_NOT
TMS320C3X_POP = _idaapi.TMS320C3X_POP
TMS320C3X_POPF = _idaapi.TMS320C3X_POPF
TMS320C3X_PUSH = _idaapi.TMS320C3X_PUSH
TMS320C3X_PUSHF = _idaapi.TMS320C3X_PUSHF
TMS320C3X_OR = _idaapi.TMS320C3X_OR
TMS320C3X_LOPOWER = _idaapi.TMS320C3X_LOPOWER
TMS320C3X_MAXSPEED = _idaapi.TMS320C3X_MAXSPEED
TMS320C3X_RND = _idaapi.TMS320C3X_RND
TMS320C3X_ROL = _idaapi.TMS320C3X_ROL
TMS320C3X_ROLC = _idaapi.TMS320C3X_ROLC
TMS320C3X_ROR = _idaapi.TMS320C3X_ROR
TMS320C3X_RORC = _idaapi.TMS320C3X_RORC
TMS320C3X_RPTS = _idaapi.TMS320C3X_RPTS
TMS320C3X_STF = _idaapi.TMS320C3X_STF
TMS320C3X_STFI = _idaapi.TMS320C3X_STFI
TMS320C3X_STI = _idaapi.TMS320C3X_STI
TMS320C3X_STII = _idaapi.TMS320C3X_STII
TMS320C3X_SIGI = _idaapi.TMS320C3X_SIGI
TMS320C3X_SUBB = _idaapi.TMS320C3X_SUBB
TMS320C3X_SUBC = _idaapi.TMS320C3X_SUBC
TMS320C3X_SUBF = _idaapi.TMS320C3X_SUBF
TMS320C3X_SUBI = _idaapi.TMS320C3X_SUBI
TMS320C3X_SUBRB = _idaapi.TMS320C3X_SUBRB
TMS320C3X_SUBRF = _idaapi.TMS320C3X_SUBRF
TMS320C3X_SUBRI = _idaapi.TMS320C3X_SUBRI
TMS320C3X_TSTB = _idaapi.TMS320C3X_TSTB
TMS320C3X_XOR = _idaapi.TMS320C3X_XOR
TMS320C3X_IACK = _idaapi.TMS320C3X_IACK
TMS320C3X_ADDC3 = _idaapi.TMS320C3X_ADDC3
TMS320C3X_ADDF3 = _idaapi.TMS320C3X_ADDF3
TMS320C3X_ADDI3 = _idaapi.TMS320C3X_ADDI3
TMS320C3X_AND3 = _idaapi.TMS320C3X_AND3
TMS320C3X_ANDN3 = _idaapi.TMS320C3X_ANDN3
TMS320C3X_ASH3 = _idaapi.TMS320C3X_ASH3
TMS320C3X_CMPF3 = _idaapi.TMS320C3X_CMPF3
TMS320C3X_CMPI3 = _idaapi.TMS320C3X_CMPI3
TMS320C3X_LSH3 = _idaapi.TMS320C3X_LSH3
TMS320C3X_MPYF3 = _idaapi.TMS320C3X_MPYF3
TMS320C3X_MPYI3 = _idaapi.TMS320C3X_MPYI3
TMS320C3X_OR3 = _idaapi.TMS320C3X_OR3
TMS320C3X_SUBB3 = _idaapi.TMS320C3X_SUBB3
TMS320C3X_SUBF3 = _idaapi.TMS320C3X_SUBF3
TMS320C3X_SUBI3 = _idaapi.TMS320C3X_SUBI3
TMS320C3X_TSTB3 = _idaapi.TMS320C3X_TSTB3
TMS320C3X_XOR3 = _idaapi.TMS320C3X_XOR3
TMS320C3X_LDFcond = _idaapi.TMS320C3X_LDFcond
TMS320C3X_LDIcond = _idaapi.TMS320C3X_LDIcond
TMS320C3X_BR = _idaapi.TMS320C3X_BR
TMS320C3X_BRD = _idaapi.TMS320C3X_BRD
TMS320C3X_CALL = _idaapi.TMS320C3X_CALL
TMS320C3X_RPTB = _idaapi.TMS320C3X_RPTB
TMS320C3X_SWI = _idaapi.TMS320C3X_SWI
TMS320C3X_Bcond = _idaapi.TMS320C3X_Bcond
TMS320C3X_DBcond = _idaapi.TMS320C3X_DBcond
TMS320C3X_CALLcond = _idaapi.TMS320C3X_CALLcond
TMS320C3X_TRAPcond = _idaapi.TMS320C3X_TRAPcond
TMS320C3X_RETIcond = _idaapi.TMS320C3X_RETIcond
TMS320C3X_RETScond = _idaapi.TMS320C3X_RETScond
TMS320C3X_RETIU = _idaapi.TMS320C3X_RETIU
TMS320C3X_RETSU = _idaapi.TMS320C3X_RETSU
TMS320C3X_NONE = _idaapi.TMS320C3X_NONE
TMS320C3X_MV_IDX = _idaapi.TMS320C3X_MV_IDX
TMS320C3X_last = _idaapi.TMS320C3X_last
TMS320C54_null = _idaapi.TMS320C54_null
TMS320C54_add1 = _idaapi.TMS320C54_add1
TMS320C54_add2 = _idaapi.TMS320C54_add2
TMS320C54_add3 = _idaapi.TMS320C54_add3
TMS320C54_addc = _idaapi.TMS320C54_addc
TMS320C54_addm = _idaapi.TMS320C54_addm
TMS320C54_adds = _idaapi.TMS320C54_adds
TMS320C54_sub1 = _idaapi.TMS320C54_sub1
TMS320C54_sub2 = _idaapi.TMS320C54_sub2
TMS320C54_sub3 = _idaapi.TMS320C54_sub3
TMS320C54_subb = _idaapi.TMS320C54_subb
TMS320C54_subc = _idaapi.TMS320C54_subc
TMS320C54_subs = _idaapi.TMS320C54_subs
TMS320C54_mpy2 = _idaapi.TMS320C54_mpy2
TMS320C54_mpy3 = _idaapi.TMS320C54_mpy3
TMS320C54_mpyr2 = _idaapi.TMS320C54_mpyr2
TMS320C54_mpya = _idaapi.TMS320C54_mpya
TMS320C54_mpyu = _idaapi.TMS320C54_mpyu
TMS320C54_squr = _idaapi.TMS320C54_squr
TMS320C54_mac2 = _idaapi.TMS320C54_mac2
TMS320C54_mac3 = _idaapi.TMS320C54_mac3
TMS320C54_macr2 = _idaapi.TMS320C54_macr2
TMS320C54_macr3 = _idaapi.TMS320C54_macr3
TMS320C54_maca1 = _idaapi.TMS320C54_maca1
TMS320C54_maca2 = _idaapi.TMS320C54_maca2
TMS320C54_maca3 = _idaapi.TMS320C54_maca3
TMS320C54_macar1 = _idaapi.TMS320C54_macar1
TMS320C54_macar2 = _idaapi.TMS320C54_macar2
TMS320C54_macar3 = _idaapi.TMS320C54_macar3
TMS320C54_macd = _idaapi.TMS320C54_macd
TMS320C54_macp = _idaapi.TMS320C54_macp
TMS320C54_macsu = _idaapi.TMS320C54_macsu
TMS320C54_mas2 = _idaapi.TMS320C54_mas2
TMS320C54_mas3 = _idaapi.TMS320C54_mas3
TMS320C54_masr2 = _idaapi.TMS320C54_masr2
TMS320C54_masr3 = _idaapi.TMS320C54_masr3
TMS320C54_masa1 = _idaapi.TMS320C54_masa1
TMS320C54_masa2 = _idaapi.TMS320C54_masa2
TMS320C54_masa3 = _idaapi.TMS320C54_masa3
TMS320C54_masar1 = _idaapi.TMS320C54_masar1
TMS320C54_masar2 = _idaapi.TMS320C54_masar2
TMS320C54_masar3 = _idaapi.TMS320C54_masar3
TMS320C54_squra = _idaapi.TMS320C54_squra
TMS320C54_squrs = _idaapi.TMS320C54_squrs
TMS320C54_dadd2 = _idaapi.TMS320C54_dadd2
TMS320C54_dadd3 = _idaapi.TMS320C54_dadd3
TMS320C54_dadst = _idaapi.TMS320C54_dadst
TMS320C54_drsub = _idaapi.TMS320C54_drsub
TMS320C54_dsadt = _idaapi.TMS320C54_dsadt
TMS320C54_dsub = _idaapi.TMS320C54_dsub
TMS320C54_dsubt = _idaapi.TMS320C54_dsubt
TMS320C54_abdst = _idaapi.TMS320C54_abdst
TMS320C54_abs1 = _idaapi.TMS320C54_abs1
TMS320C54_abs2 = _idaapi.TMS320C54_abs2
TMS320C54_cmpl1 = _idaapi.TMS320C54_cmpl1
TMS320C54_cmpl2 = _idaapi.TMS320C54_cmpl2
TMS320C54_delay = _idaapi.TMS320C54_delay
TMS320C54_exp = _idaapi.TMS320C54_exp
TMS320C54_firs = _idaapi.TMS320C54_firs
TMS320C54_lms = _idaapi.TMS320C54_lms
TMS320C54_max = _idaapi.TMS320C54_max
TMS320C54_min = _idaapi.TMS320C54_min
TMS320C54_neg1 = _idaapi.TMS320C54_neg1
TMS320C54_neg2 = _idaapi.TMS320C54_neg2
TMS320C54_norm1 = _idaapi.TMS320C54_norm1
TMS320C54_norm2 = _idaapi.TMS320C54_norm2
TMS320C54_poly = _idaapi.TMS320C54_poly
TMS320C54_rnd1 = _idaapi.TMS320C54_rnd1
TMS320C54_rnd2 = _idaapi.TMS320C54_rnd2
TMS320C54_sat = _idaapi.TMS320C54_sat
TMS320C54_sqdst = _idaapi.TMS320C54_sqdst
TMS320C54_and1 = _idaapi.TMS320C54_and1
TMS320C54_and2 = _idaapi.TMS320C54_and2
TMS320C54_and3 = _idaapi.TMS320C54_and3
TMS320C54_andm = _idaapi.TMS320C54_andm
TMS320C54_or1 = _idaapi.TMS320C54_or1
TMS320C54_or2 = _idaapi.TMS320C54_or2
TMS320C54_or3 = _idaapi.TMS320C54_or3
TMS320C54_orm = _idaapi.TMS320C54_orm
TMS320C54_xor1 = _idaapi.TMS320C54_xor1
TMS320C54_xor2 = _idaapi.TMS320C54_xor2
TMS320C54_xor3 = _idaapi.TMS320C54_xor3
TMS320C54_xorm = _idaapi.TMS320C54_xorm
TMS320C54_rol = _idaapi.TMS320C54_rol
TMS320C54_roltc = _idaapi.TMS320C54_roltc
TMS320C54_ror = _idaapi.TMS320C54_ror
TMS320C54_sfta2 = _idaapi.TMS320C54_sfta2
TMS320C54_sfta3 = _idaapi.TMS320C54_sfta3
TMS320C54_sftc = _idaapi.TMS320C54_sftc
TMS320C54_sftl2 = _idaapi.TMS320C54_sftl2
TMS320C54_sftl3 = _idaapi.TMS320C54_sftl3
TMS320C54_bit = _idaapi.TMS320C54_bit
TMS320C54_bitf = _idaapi.TMS320C54_bitf
TMS320C54_bitt = _idaapi.TMS320C54_bitt
TMS320C54_cmpm = _idaapi.TMS320C54_cmpm
TMS320C54_cmpr = _idaapi.TMS320C54_cmpr
TMS320C54_b = _idaapi.TMS320C54_b
TMS320C54_bd = _idaapi.TMS320C54_bd
TMS320C54_bacc = _idaapi.TMS320C54_bacc
TMS320C54_baccd = _idaapi.TMS320C54_baccd
TMS320C54_banz = _idaapi.TMS320C54_banz
TMS320C54_banzd = _idaapi.TMS320C54_banzd
TMS320C54_bc2 = _idaapi.TMS320C54_bc2
TMS320C54_bc3 = _idaapi.TMS320C54_bc3
TMS320C54_bcd2 = _idaapi.TMS320C54_bcd2
TMS320C54_bcd3 = _idaapi.TMS320C54_bcd3
TMS320C54_fb = _idaapi.TMS320C54_fb
TMS320C54_fbd = _idaapi.TMS320C54_fbd
TMS320C54_fbacc = _idaapi.TMS320C54_fbacc
TMS320C54_fbaccd = _idaapi.TMS320C54_fbaccd
TMS320C54_cala = _idaapi.TMS320C54_cala
TMS320C54_calad = _idaapi.TMS320C54_calad
TMS320C54_call = _idaapi.TMS320C54_call
TMS320C54_calld = _idaapi.TMS320C54_calld
TMS320C54_cc2 = _idaapi.TMS320C54_cc2
TMS320C54_cc3 = _idaapi.TMS320C54_cc3
TMS320C54_ccd2 = _idaapi.TMS320C54_ccd2
TMS320C54_ccd3 = _idaapi.TMS320C54_ccd3
TMS320C54_fcala = _idaapi.TMS320C54_fcala
TMS320C54_fcalad = _idaapi.TMS320C54_fcalad
TMS320C54_fcall = _idaapi.TMS320C54_fcall
TMS320C54_fcalld = _idaapi.TMS320C54_fcalld
TMS320C54_intr = _idaapi.TMS320C54_intr
TMS320C54_trap = _idaapi.TMS320C54_trap
TMS320C54_fret = _idaapi.TMS320C54_fret
TMS320C54_fretd = _idaapi.TMS320C54_fretd
TMS320C54_frete = _idaapi.TMS320C54_frete
TMS320C54_freted = _idaapi.TMS320C54_freted
TMS320C54_rc1 = _idaapi.TMS320C54_rc1
TMS320C54_rc2 = _idaapi.TMS320C54_rc2
TMS320C54_rc3 = _idaapi.TMS320C54_rc3
TMS320C54_rcd1 = _idaapi.TMS320C54_rcd1
TMS320C54_rcd2 = _idaapi.TMS320C54_rcd2
TMS320C54_rcd3 = _idaapi.TMS320C54_rcd3
TMS320C54_ret = _idaapi.TMS320C54_ret
TMS320C54_retd = _idaapi.TMS320C54_retd
TMS320C54_rete = _idaapi.TMS320C54_rete
TMS320C54_reted = _idaapi.TMS320C54_reted
TMS320C54_retf = _idaapi.TMS320C54_retf
TMS320C54_retfd = _idaapi.TMS320C54_retfd
TMS320C54_rpt = _idaapi.TMS320C54_rpt
TMS320C54_rptb = _idaapi.TMS320C54_rptb
TMS320C54_rptbd = _idaapi.TMS320C54_rptbd
TMS320C54_rptz = _idaapi.TMS320C54_rptz
TMS320C54_frame = _idaapi.TMS320C54_frame
TMS320C54_popd = _idaapi.TMS320C54_popd
TMS320C54_popm = _idaapi.TMS320C54_popm
TMS320C54_pshd = _idaapi.TMS320C54_pshd
TMS320C54_pshm = _idaapi.TMS320C54_pshm
TMS320C54_idle = _idaapi.TMS320C54_idle
TMS320C54_mar = _idaapi.TMS320C54_mar
TMS320C54_nop = _idaapi.TMS320C54_nop
TMS320C54_reset = _idaapi.TMS320C54_reset
TMS320C54_rsbx1 = _idaapi.TMS320C54_rsbx1
TMS320C54_rsbx2 = _idaapi.TMS320C54_rsbx2
TMS320C54_ssbx1 = _idaapi.TMS320C54_ssbx1
TMS320C54_ssbx2 = _idaapi.TMS320C54_ssbx2
TMS320C54_xc2 = _idaapi.TMS320C54_xc2
TMS320C54_xc3 = _idaapi.TMS320C54_xc3
TMS320C54_dld = _idaapi.TMS320C54_dld
TMS320C54_ld1 = _idaapi.TMS320C54_ld1
TMS320C54_ld2 = _idaapi.TMS320C54_ld2
TMS320C54_ld3 = _idaapi.TMS320C54_ld3
TMS320C54_ldm = _idaapi.TMS320C54_ldm
TMS320C54_ldr = _idaapi.TMS320C54_ldr
TMS320C54_ldu = _idaapi.TMS320C54_ldu
TMS320C54_ltd = _idaapi.TMS320C54_ltd
TMS320C54_dst = _idaapi.TMS320C54_dst
TMS320C54_st = _idaapi.TMS320C54_st
TMS320C54_sth2 = _idaapi.TMS320C54_sth2
TMS320C54_sth3 = _idaapi.TMS320C54_sth3
TMS320C54_stl2 = _idaapi.TMS320C54_stl2
TMS320C54_stl3 = _idaapi.TMS320C54_stl3
TMS320C54_stlm = _idaapi.TMS320C54_stlm
TMS320C54_stm = _idaapi.TMS320C54_stm
TMS320C54_cmps = _idaapi.TMS320C54_cmps
TMS320C54_saccd = _idaapi.TMS320C54_saccd
TMS320C54_srccd = _idaapi.TMS320C54_srccd
TMS320C54_strcd = _idaapi.TMS320C54_strcd
TMS320C54_st_ld = _idaapi.TMS320C54_st_ld
TMS320C54_ld_mac = _idaapi.TMS320C54_ld_mac
TMS320C54_ld_macr = _idaapi.TMS320C54_ld_macr
TMS320C54_ld_mas = _idaapi.TMS320C54_ld_mas
TMS320C54_ld_masr = _idaapi.TMS320C54_ld_masr
TMS320C54_st_add = _idaapi.TMS320C54_st_add
TMS320C54_st_sub = _idaapi.TMS320C54_st_sub
TMS320C54_st_mac = _idaapi.TMS320C54_st_mac
TMS320C54_st_macr = _idaapi.TMS320C54_st_macr
TMS320C54_st_mas = _idaapi.TMS320C54_st_mas
TMS320C54_st_masr = _idaapi.TMS320C54_st_masr
TMS320C54_st_mpy = _idaapi.TMS320C54_st_mpy
TMS320C54_mvdd = _idaapi.TMS320C54_mvdd
TMS320C54_mvdk = _idaapi.TMS320C54_mvdk
TMS320C54_mvdm = _idaapi.TMS320C54_mvdm
TMS320C54_mvdp = _idaapi.TMS320C54_mvdp
TMS320C54_mvkd = _idaapi.TMS320C54_mvkd
TMS320C54_mvmd = _idaapi.TMS320C54_mvmd
TMS320C54_mvmm = _idaapi.TMS320C54_mvmm
TMS320C54_mvpd = _idaapi.TMS320C54_mvpd
TMS320C54_portr = _idaapi.TMS320C54_portr
TMS320C54_portw = _idaapi.TMS320C54_portw
TMS320C54_reada = _idaapi.TMS320C54_reada
TMS320C54_writa = _idaapi.TMS320C54_writa
TMS320C54_last = _idaapi.TMS320C54_last
TMS320C55_null = _idaapi.TMS320C55_null
TMS320C55_abdst = _idaapi.TMS320C55_abdst
TMS320C55_abs1 = _idaapi.TMS320C55_abs1
TMS320C55_abs2 = _idaapi.TMS320C55_abs2
TMS320C55_add1 = _idaapi.TMS320C55_add1
TMS320C55_add2 = _idaapi.TMS320C55_add2
TMS320C55_add3 = _idaapi.TMS320C55_add3
TMS320C55_add4 = _idaapi.TMS320C55_add4
TMS320C55_addv1 = _idaapi.TMS320C55_addv1
TMS320C55_addv2 = _idaapi.TMS320C55_addv2
TMS320C55_addrv1 = _idaapi.TMS320C55_addrv1
TMS320C55_addrv2 = _idaapi.TMS320C55_addrv2
TMS320C55_maxdiff = _idaapi.TMS320C55_maxdiff
TMS320C55_dmaxdiff = _idaapi.TMS320C55_dmaxdiff
TMS320C55_mindiff = _idaapi.TMS320C55_mindiff
TMS320C55_dmindiff = _idaapi.TMS320C55_dmindiff
TMS320C55_addsubcc4 = _idaapi.TMS320C55_addsubcc4
TMS320C55_addsubcc5 = _idaapi.TMS320C55_addsubcc5
TMS320C55_addsub2cc = _idaapi.TMS320C55_addsub2cc
TMS320C55_sftcc = _idaapi.TMS320C55_sftcc
TMS320C55_subc2 = _idaapi.TMS320C55_subc2
TMS320C55_subc3 = _idaapi.TMS320C55_subc3
TMS320C55_addsub = _idaapi.TMS320C55_addsub
TMS320C55_subadd = _idaapi.TMS320C55_subadd
TMS320C55_mpy_mpy = _idaapi.TMS320C55_mpy_mpy
TMS320C55_mpy_mpyr = _idaapi.TMS320C55_mpy_mpyr
TMS320C55_mpy_mpy40 = _idaapi.TMS320C55_mpy_mpy40
TMS320C55_mpy_mpyr40 = _idaapi.TMS320C55_mpy_mpyr40
TMS320C55_mac_mpy = _idaapi.TMS320C55_mac_mpy
TMS320C55_macr_mpyr = _idaapi.TMS320C55_macr_mpyr
TMS320C55_mac40_mpy40 = _idaapi.TMS320C55_mac40_mpy40
TMS320C55_macr40_mpyr40 = _idaapi.TMS320C55_macr40_mpyr40
TMS320C55_mas_mpy = _idaapi.TMS320C55_mas_mpy
TMS320C55_masr_mpyr = _idaapi.TMS320C55_masr_mpyr
TMS320C55_mas40_mpy40 = _idaapi.TMS320C55_mas40_mpy40
TMS320C55_masr40_mpyr40 = _idaapi.TMS320C55_masr40_mpyr40
TMS320C55_amar_mpy = _idaapi.TMS320C55_amar_mpy
TMS320C55_amar_mpyr = _idaapi.TMS320C55_amar_mpyr
TMS320C55_amar_mpy40 = _idaapi.TMS320C55_amar_mpy40
TMS320C55_amar_mpyr40 = _idaapi.TMS320C55_amar_mpyr40
TMS320C55_mac_mac = _idaapi.TMS320C55_mac_mac
TMS320C55_macr_macr = _idaapi.TMS320C55_macr_macr
TMS320C55_mac40_mac40 = _idaapi.TMS320C55_mac40_mac40
TMS320C55_macr40_macr40 = _idaapi.TMS320C55_macr40_macr40
TMS320C55_mas_mac = _idaapi.TMS320C55_mas_mac
TMS320C55_masr_macr = _idaapi.TMS320C55_masr_macr
TMS320C55_mas40_mac40 = _idaapi.TMS320C55_mas40_mac40
TMS320C55_masr40_macr40 = _idaapi.TMS320C55_masr40_macr40
TMS320C55_amar_mac = _idaapi.TMS320C55_amar_mac
TMS320C55_amar_macr = _idaapi.TMS320C55_amar_macr
TMS320C55_amar_mac40 = _idaapi.TMS320C55_amar_mac40
TMS320C55_amar_macr40 = _idaapi.TMS320C55_amar_macr40
TMS320C55_mas_mas = _idaapi.TMS320C55_mas_mas
TMS320C55_masr_masr = _idaapi.TMS320C55_masr_masr
TMS320C55_mas40_mas40 = _idaapi.TMS320C55_mas40_mas40
TMS320C55_masr40_masr40 = _idaapi.TMS320C55_masr40_masr40
TMS320C55_amar_mas = _idaapi.TMS320C55_amar_mas
TMS320C55_amar_masr = _idaapi.TMS320C55_amar_masr
TMS320C55_amar_mas40 = _idaapi.TMS320C55_amar_mas40
TMS320C55_amar_masr40 = _idaapi.TMS320C55_amar_masr40
TMS320C55_mpy_mac = _idaapi.TMS320C55_mpy_mac
TMS320C55_mpyr_macr = _idaapi.TMS320C55_mpyr_macr
TMS320C55_mpy40_mac40 = _idaapi.TMS320C55_mpy40_mac40
TMS320C55_mpyr40_macr40 = _idaapi.TMS320C55_mpyr40_macr40
TMS320C55_amar3 = _idaapi.TMS320C55_amar3
TMS320C55_firsadd = _idaapi.TMS320C55_firsadd
TMS320C55_firssub = _idaapi.TMS320C55_firssub
TMS320C55_mpym_mov = _idaapi.TMS320C55_mpym_mov
TMS320C55_mpymr_mov = _idaapi.TMS320C55_mpymr_mov
TMS320C55_macm_mov = _idaapi.TMS320C55_macm_mov
TMS320C55_macmr_mov = _idaapi.TMS320C55_macmr_mov
TMS320C55_masm_mov = _idaapi.TMS320C55_masm_mov
TMS320C55_masmr_mov = _idaapi.TMS320C55_masmr_mov
TMS320C55_add_mov = _idaapi.TMS320C55_add_mov
TMS320C55_sub_mov = _idaapi.TMS320C55_sub_mov
TMS320C55_mov_mov = _idaapi.TMS320C55_mov_mov
TMS320C55_mov_aadd = _idaapi.TMS320C55_mov_aadd
TMS320C55_mov_add = _idaapi.TMS320C55_mov_add
TMS320C55_amar_amar = _idaapi.TMS320C55_amar_amar
TMS320C55_add_asub = _idaapi.TMS320C55_add_asub
TMS320C55_btst_mov = _idaapi.TMS320C55_btst_mov
TMS320C55_mov_asub = _idaapi.TMS320C55_mov_asub
TMS320C55_lms = _idaapi.TMS320C55_lms
TMS320C55_max1 = _idaapi.TMS320C55_max1
TMS320C55_max2 = _idaapi.TMS320C55_max2
TMS320C55_min1 = _idaapi.TMS320C55_min1
TMS320C55_min2 = _idaapi.TMS320C55_min2
TMS320C55_cmp = _idaapi.TMS320C55_cmp
TMS320C55_cmpu = _idaapi.TMS320C55_cmpu
TMS320C55_aadd = _idaapi.TMS320C55_aadd
TMS320C55_asub = _idaapi.TMS320C55_asub
TMS320C55_amov = _idaapi.TMS320C55_amov
TMS320C55_amar1 = _idaapi.TMS320C55_amar1
TMS320C55_sqr1 = _idaapi.TMS320C55_sqr1
TMS320C55_sqr2 = _idaapi.TMS320C55_sqr2
TMS320C55_sqrr1 = _idaapi.TMS320C55_sqrr1
TMS320C55_sqrr2 = _idaapi.TMS320C55_sqrr2
TMS320C55_mpy1 = _idaapi.TMS320C55_mpy1
TMS320C55_mpy2 = _idaapi.TMS320C55_mpy2
TMS320C55_mpy3 = _idaapi.TMS320C55_mpy3
TMS320C55_mpyr1 = _idaapi.TMS320C55_mpyr1
TMS320C55_mpyr2 = _idaapi.TMS320C55_mpyr2
TMS320C55_mpyr3 = _idaapi.TMS320C55_mpyr3
TMS320C55_mpyk2 = _idaapi.TMS320C55_mpyk2
TMS320C55_mpyk3 = _idaapi.TMS320C55_mpyk3
TMS320C55_mpykr2 = _idaapi.TMS320C55_mpykr2
TMS320C55_mpykr3 = _idaapi.TMS320C55_mpykr3
TMS320C55_mpym2 = _idaapi.TMS320C55_mpym2
TMS320C55_mpym3 = _idaapi.TMS320C55_mpym3
TMS320C55_mpymr2 = _idaapi.TMS320C55_mpymr2
TMS320C55_mpymr3 = _idaapi.TMS320C55_mpymr3
TMS320C55_mpym403 = _idaapi.TMS320C55_mpym403
TMS320C55_mpymr403 = _idaapi.TMS320C55_mpymr403
TMS320C55_mpymu3 = _idaapi.TMS320C55_mpymu3
TMS320C55_mpymru3 = _idaapi.TMS320C55_mpymru3
TMS320C55_sqrm = _idaapi.TMS320C55_sqrm
TMS320C55_sqrmr = _idaapi.TMS320C55_sqrmr
TMS320C55_mpymk = _idaapi.TMS320C55_mpymk
TMS320C55_mpymkr = _idaapi.TMS320C55_mpymkr
TMS320C55_sqa1 = _idaapi.TMS320C55_sqa1
TMS320C55_sqa2 = _idaapi.TMS320C55_sqa2
TMS320C55_sqar1 = _idaapi.TMS320C55_sqar1
TMS320C55_sqar2 = _idaapi.TMS320C55_sqar2
TMS320C55_mac3 = _idaapi.TMS320C55_mac3
TMS320C55_mac4 = _idaapi.TMS320C55_mac4
TMS320C55_macr3 = _idaapi.TMS320C55_macr3
TMS320C55_macr4 = _idaapi.TMS320C55_macr4
TMS320C55_mack3 = _idaapi.TMS320C55_mack3
TMS320C55_mack4 = _idaapi.TMS320C55_mack4
TMS320C55_mackr3 = _idaapi.TMS320C55_mackr3
TMS320C55_mackr4 = _idaapi.TMS320C55_mackr4
TMS320C55_macm2 = _idaapi.TMS320C55_macm2
TMS320C55_macm3 = _idaapi.TMS320C55_macm3
TMS320C55_macm4 = _idaapi.TMS320C55_macm4
TMS320C55_macmr2 = _idaapi.TMS320C55_macmr2
TMS320C55_macmr3 = _idaapi.TMS320C55_macmr3
TMS320C55_macmr4 = _idaapi.TMS320C55_macmr4
TMS320C55_macm403 = _idaapi.TMS320C55_macm403
TMS320C55_macm404 = _idaapi.TMS320C55_macm404
TMS320C55_macmr403 = _idaapi.TMS320C55_macmr403
TMS320C55_macmr404 = _idaapi.TMS320C55_macmr404
TMS320C55_macmz = _idaapi.TMS320C55_macmz
TMS320C55_macmrz = _idaapi.TMS320C55_macmrz
TMS320C55_sqam2 = _idaapi.TMS320C55_sqam2
TMS320C55_sqam3 = _idaapi.TMS320C55_sqam3
TMS320C55_sqamr2 = _idaapi.TMS320C55_sqamr2
TMS320C55_sqamr3 = _idaapi.TMS320C55_sqamr3
TMS320C55_macmk3 = _idaapi.TMS320C55_macmk3
TMS320C55_macmk4 = _idaapi.TMS320C55_macmk4
TMS320C55_macmkr3 = _idaapi.TMS320C55_macmkr3
TMS320C55_macmkr4 = _idaapi.TMS320C55_macmkr4
TMS320C55_sqs1 = _idaapi.TMS320C55_sqs1
TMS320C55_sqs2 = _idaapi.TMS320C55_sqs2
TMS320C55_sqsr1 = _idaapi.TMS320C55_sqsr1
TMS320C55_sqsr2 = _idaapi.TMS320C55_sqsr2
TMS320C55_mas2 = _idaapi.TMS320C55_mas2
TMS320C55_mas3 = _idaapi.TMS320C55_mas3
TMS320C55_masr2 = _idaapi.TMS320C55_masr2
TMS320C55_masr3 = _idaapi.TMS320C55_masr3
TMS320C55_masm2 = _idaapi.TMS320C55_masm2
TMS320C55_masm3 = _idaapi.TMS320C55_masm3
TMS320C55_masm4 = _idaapi.TMS320C55_masm4
TMS320C55_masmr2 = _idaapi.TMS320C55_masmr2
TMS320C55_masmr3 = _idaapi.TMS320C55_masmr3
TMS320C55_masmr4 = _idaapi.TMS320C55_masmr4
TMS320C55_masm403 = _idaapi.TMS320C55_masm403
TMS320C55_masm404 = _idaapi.TMS320C55_masm404
TMS320C55_masmr403 = _idaapi.TMS320C55_masmr403
TMS320C55_masmr404 = _idaapi.TMS320C55_masmr404
TMS320C55_sqsm2 = _idaapi.TMS320C55_sqsm2
TMS320C55_sqsm3 = _idaapi.TMS320C55_sqsm3
TMS320C55_sqsmr2 = _idaapi.TMS320C55_sqsmr2
TMS320C55_sqsmr3 = _idaapi.TMS320C55_sqsmr3
TMS320C55_neg1 = _idaapi.TMS320C55_neg1
TMS320C55_neg2 = _idaapi.TMS320C55_neg2
TMS320C55_mant_nexp = _idaapi.TMS320C55_mant_nexp
TMS320C55_exp = _idaapi.TMS320C55_exp
TMS320C55_cmpand = _idaapi.TMS320C55_cmpand
TMS320C55_cmpandu = _idaapi.TMS320C55_cmpandu
TMS320C55_cmpor = _idaapi.TMS320C55_cmpor
TMS320C55_cmporu = _idaapi.TMS320C55_cmporu
TMS320C55_round1 = _idaapi.TMS320C55_round1
TMS320C55_round2 = _idaapi.TMS320C55_round2
TMS320C55_sat1 = _idaapi.TMS320C55_sat1
TMS320C55_sat2 = _idaapi.TMS320C55_sat2
TMS320C55_satr1 = _idaapi.TMS320C55_satr1
TMS320C55_satr2 = _idaapi.TMS320C55_satr2
TMS320C55_sfts2 = _idaapi.TMS320C55_sfts2
TMS320C55_sfts3 = _idaapi.TMS320C55_sfts3
TMS320C55_sftsc2 = _idaapi.TMS320C55_sftsc2
TMS320C55_sftsc3 = _idaapi.TMS320C55_sftsc3
TMS320C55_sqdst = _idaapi.TMS320C55_sqdst
TMS320C55_sub1 = _idaapi.TMS320C55_sub1
TMS320C55_sub2 = _idaapi.TMS320C55_sub2
TMS320C55_sub3 = _idaapi.TMS320C55_sub3
TMS320C55_sub4 = _idaapi.TMS320C55_sub4
TMS320C55_band = _idaapi.TMS320C55_band
TMS320C55_bfxpa = _idaapi.TMS320C55_bfxpa
TMS320C55_bfxtr = _idaapi.TMS320C55_bfxtr
TMS320C55_btst = _idaapi.TMS320C55_btst
TMS320C55_bnot = _idaapi.TMS320C55_bnot
TMS320C55_bclr2 = _idaapi.TMS320C55_bclr2
TMS320C55_bset2 = _idaapi.TMS320C55_bset2
TMS320C55_btstset = _idaapi.TMS320C55_btstset
TMS320C55_btstclr = _idaapi.TMS320C55_btstclr
TMS320C55_btstnot = _idaapi.TMS320C55_btstnot
TMS320C55_btstp = _idaapi.TMS320C55_btstp
TMS320C55_bclr1 = _idaapi.TMS320C55_bclr1
TMS320C55_bset1 = _idaapi.TMS320C55_bset1
TMS320C55_amar2 = _idaapi.TMS320C55_amar2
TMS320C55_popboth = _idaapi.TMS320C55_popboth
TMS320C55_pshboth = _idaapi.TMS320C55_pshboth
TMS320C55_bcnt = _idaapi.TMS320C55_bcnt
TMS320C55_not1 = _idaapi.TMS320C55_not1
TMS320C55_not2 = _idaapi.TMS320C55_not2
TMS320C55_and1 = _idaapi.TMS320C55_and1
TMS320C55_and2 = _idaapi.TMS320C55_and2
TMS320C55_and3 = _idaapi.TMS320C55_and3
TMS320C55_or1 = _idaapi.TMS320C55_or1
TMS320C55_or2 = _idaapi.TMS320C55_or2
TMS320C55_or3 = _idaapi.TMS320C55_or3
TMS320C55_xor1 = _idaapi.TMS320C55_xor1
TMS320C55_xor2 = _idaapi.TMS320C55_xor2
TMS320C55_xor3 = _idaapi.TMS320C55_xor3
TMS320C55_sftl2 = _idaapi.TMS320C55_sftl2
TMS320C55_sftl3 = _idaapi.TMS320C55_sftl3
TMS320C55_rol = _idaapi.TMS320C55_rol
TMS320C55_ror = _idaapi.TMS320C55_ror
TMS320C55_swap = _idaapi.TMS320C55_swap
TMS320C55_swapp = _idaapi.TMS320C55_swapp
TMS320C55_swap4 = _idaapi.TMS320C55_swap4
TMS320C55_mov2 = _idaapi.TMS320C55_mov2
TMS320C55_mov3 = _idaapi.TMS320C55_mov3
TMS320C55_mov402 = _idaapi.TMS320C55_mov402
TMS320C55_delay = _idaapi.TMS320C55_delay
TMS320C55_pop1 = _idaapi.TMS320C55_pop1
TMS320C55_pop2 = _idaapi.TMS320C55_pop2
TMS320C55_psh1 = _idaapi.TMS320C55_psh1
TMS320C55_psh2 = _idaapi.TMS320C55_psh2
TMS320C55_bcc = _idaapi.TMS320C55_bcc
TMS320C55_bccu = _idaapi.TMS320C55_bccu
TMS320C55_b = _idaapi.TMS320C55_b
TMS320C55_callcc = _idaapi.TMS320C55_callcc
TMS320C55_call = _idaapi.TMS320C55_call
TMS320C55_xcc = _idaapi.TMS320C55_xcc
TMS320C55_xccpart = _idaapi.TMS320C55_xccpart
TMS320C55_idle = _idaapi.TMS320C55_idle
TMS320C55_nop = _idaapi.TMS320C55_nop
TMS320C55_nop_16 = _idaapi.TMS320C55_nop_16
TMS320C55_rptblocal = _idaapi.TMS320C55_rptblocal
TMS320C55_rptb = _idaapi.TMS320C55_rptb
TMS320C55_rptcc = _idaapi.TMS320C55_rptcc
TMS320C55_rpt = _idaapi.TMS320C55_rpt
TMS320C55_rptadd = _idaapi.TMS320C55_rptadd
TMS320C55_rptsub = _idaapi.TMS320C55_rptsub
TMS320C55_retcc = _idaapi.TMS320C55_retcc
TMS320C55_ret = _idaapi.TMS320C55_ret
TMS320C55_reti = _idaapi.TMS320C55_reti
TMS320C55_intr = _idaapi.TMS320C55_intr
TMS320C55_reset = _idaapi.TMS320C55_reset
TMS320C55_trap = _idaapi.TMS320C55_trap
TMS320C55_last = _idaapi.TMS320C55_last
TRIMEDIA_null = _idaapi.TRIMEDIA_null
TRIMEDIA_igtri = _idaapi.TRIMEDIA_igtri
TRIMEDIA_igeqi = _idaapi.TRIMEDIA_igeqi
TRIMEDIA_ilesi = _idaapi.TRIMEDIA_ilesi
TRIMEDIA_ineqi = _idaapi.TRIMEDIA_ineqi
TRIMEDIA_ieqli = _idaapi.TRIMEDIA_ieqli
TRIMEDIA_iaddi = _idaapi.TRIMEDIA_iaddi
TRIMEDIA_ild16d = _idaapi.TRIMEDIA_ild16d
TRIMEDIA_ld32d = _idaapi.TRIMEDIA_ld32d
TRIMEDIA_uld8d = _idaapi.TRIMEDIA_uld8d
TRIMEDIA_lsri = _idaapi.TRIMEDIA_lsri
TRIMEDIA_asri = _idaapi.TRIMEDIA_asri
TRIMEDIA_asli = _idaapi.TRIMEDIA_asli
TRIMEDIA_iadd = _idaapi.TRIMEDIA_iadd
TRIMEDIA_isub = _idaapi.TRIMEDIA_isub
TRIMEDIA_igeq = _idaapi.TRIMEDIA_igeq
TRIMEDIA_igtr = _idaapi.TRIMEDIA_igtr
TRIMEDIA_bitand = _idaapi.TRIMEDIA_bitand
TRIMEDIA_bitor = _idaapi.TRIMEDIA_bitor
TRIMEDIA_asr = _idaapi.TRIMEDIA_asr
TRIMEDIA_asl = _idaapi.TRIMEDIA_asl
TRIMEDIA_ifloat = _idaapi.TRIMEDIA_ifloat
TRIMEDIA_ifixrz = _idaapi.TRIMEDIA_ifixrz
TRIMEDIA_fadd = _idaapi.TRIMEDIA_fadd
TRIMEDIA_imin = _idaapi.TRIMEDIA_imin
TRIMEDIA_imax = _idaapi.TRIMEDIA_imax
TRIMEDIA_iavgonep = _idaapi.TRIMEDIA_iavgonep
TRIMEDIA_ume8uu = _idaapi.TRIMEDIA_ume8uu
TRIMEDIA_imul = _idaapi.TRIMEDIA_imul
TRIMEDIA_fmul = _idaapi.TRIMEDIA_fmul
TRIMEDIA_h_st8d = _idaapi.TRIMEDIA_h_st8d
TRIMEDIA_h_st16d = _idaapi.TRIMEDIA_h_st16d
TRIMEDIA_h_st32d = _idaapi.TRIMEDIA_h_st32d
TRIMEDIA_isubi = _idaapi.TRIMEDIA_isubi
TRIMEDIA_ugtr = _idaapi.TRIMEDIA_ugtr
TRIMEDIA_ugtri = _idaapi.TRIMEDIA_ugtri
TRIMEDIA_ugeq = _idaapi.TRIMEDIA_ugeq
TRIMEDIA_ugeqi = _idaapi.TRIMEDIA_ugeqi
TRIMEDIA_ieql = _idaapi.TRIMEDIA_ieql
TRIMEDIA_ueqli = _idaapi.TRIMEDIA_ueqli
TRIMEDIA_ineq = _idaapi.TRIMEDIA_ineq
TRIMEDIA_uneqi = _idaapi.TRIMEDIA_uneqi
TRIMEDIA_ulesi = _idaapi.TRIMEDIA_ulesi
TRIMEDIA_ileqi = _idaapi.TRIMEDIA_ileqi
TRIMEDIA_uleqi = _idaapi.TRIMEDIA_uleqi
TRIMEDIA_h_iabs = _idaapi.TRIMEDIA_h_iabs
TRIMEDIA_carry = _idaapi.TRIMEDIA_carry
TRIMEDIA_izero = _idaapi.TRIMEDIA_izero
TRIMEDIA_inonzero = _idaapi.TRIMEDIA_inonzero
TRIMEDIA_bitxor = _idaapi.TRIMEDIA_bitxor
TRIMEDIA_bitandinv = _idaapi.TRIMEDIA_bitandinv
TRIMEDIA_bitinv = _idaapi.TRIMEDIA_bitinv
TRIMEDIA_sex16 = _idaapi.TRIMEDIA_sex16
TRIMEDIA_packbytes = _idaapi.TRIMEDIA_packbytes
TRIMEDIA_pack16lsb = _idaapi.TRIMEDIA_pack16lsb
TRIMEDIA_pack16msb = _idaapi.TRIMEDIA_pack16msb
TRIMEDIA_ubytesel = _idaapi.TRIMEDIA_ubytesel
TRIMEDIA_ibytesel = _idaapi.TRIMEDIA_ibytesel
TRIMEDIA_mergelsb = _idaapi.TRIMEDIA_mergelsb
TRIMEDIA_mergemsb = _idaapi.TRIMEDIA_mergemsb
TRIMEDIA_ume8ii = _idaapi.TRIMEDIA_ume8ii
TRIMEDIA_h_dspiabs = _idaapi.TRIMEDIA_h_dspiabs
TRIMEDIA_dspiadd = _idaapi.TRIMEDIA_dspiadd
TRIMEDIA_dspuadd = _idaapi.TRIMEDIA_dspuadd
TRIMEDIA_dspisub = _idaapi.TRIMEDIA_dspisub
TRIMEDIA_dspusub = _idaapi.TRIMEDIA_dspusub
TRIMEDIA_dspidualadd = _idaapi.TRIMEDIA_dspidualadd
TRIMEDIA_dspidualsub = _idaapi.TRIMEDIA_dspidualsub
TRIMEDIA_h_dspidualabs = _idaapi.TRIMEDIA_h_dspidualabs
TRIMEDIA_quadavg = _idaapi.TRIMEDIA_quadavg
TRIMEDIA_iclipi = _idaapi.TRIMEDIA_iclipi
TRIMEDIA_uclipi = _idaapi.TRIMEDIA_uclipi
TRIMEDIA_uclipu = _idaapi.TRIMEDIA_uclipu
TRIMEDIA_iflip = _idaapi.TRIMEDIA_iflip
TRIMEDIA_dspuquadaddui = _idaapi.TRIMEDIA_dspuquadaddui
TRIMEDIA_quadumin = _idaapi.TRIMEDIA_quadumin
TRIMEDIA_quadumax = _idaapi.TRIMEDIA_quadumax
TRIMEDIA_dualiclipi = _idaapi.TRIMEDIA_dualiclipi
TRIMEDIA_dualuclipi = _idaapi.TRIMEDIA_dualuclipi
TRIMEDIA_quadumulmsb = _idaapi.TRIMEDIA_quadumulmsb
TRIMEDIA_ufir8uu = _idaapi.TRIMEDIA_ufir8uu
TRIMEDIA_ifir8ui = _idaapi.TRIMEDIA_ifir8ui
TRIMEDIA_ifir8ii = _idaapi.TRIMEDIA_ifir8ii
TRIMEDIA_ifir16 = _idaapi.TRIMEDIA_ifir16
TRIMEDIA_ufir16 = _idaapi.TRIMEDIA_ufir16
TRIMEDIA_dspidualmul = _idaapi.TRIMEDIA_dspidualmul
TRIMEDIA_lsr = _idaapi.TRIMEDIA_lsr
TRIMEDIA_rol = _idaapi.TRIMEDIA_rol
TRIMEDIA_roli = _idaapi.TRIMEDIA_roli
TRIMEDIA_funshift1 = _idaapi.TRIMEDIA_funshift1
TRIMEDIA_funshift2 = _idaapi.TRIMEDIA_funshift2
TRIMEDIA_funshift3 = _idaapi.TRIMEDIA_funshift3
TRIMEDIA_dualasr = _idaapi.TRIMEDIA_dualasr
TRIMEDIA_mergedual16lsb = _idaapi.TRIMEDIA_mergedual16lsb
TRIMEDIA_fdiv = _idaapi.TRIMEDIA_fdiv
TRIMEDIA_fdivflags = _idaapi.TRIMEDIA_fdivflags
TRIMEDIA_fsqrt = _idaapi.TRIMEDIA_fsqrt
TRIMEDIA_fsqrtflags = _idaapi.TRIMEDIA_fsqrtflags
TRIMEDIA_faddflags = _idaapi.TRIMEDIA_faddflags
TRIMEDIA_fsub = _idaapi.TRIMEDIA_fsub
TRIMEDIA_fsubflags = _idaapi.TRIMEDIA_fsubflags
TRIMEDIA_fabsval = _idaapi.TRIMEDIA_fabsval
TRIMEDIA_fabsvalflags = _idaapi.TRIMEDIA_fabsvalflags
TRIMEDIA_ifloatrz = _idaapi.TRIMEDIA_ifloatrz
TRIMEDIA_ifloatrzflags = _idaapi.TRIMEDIA_ifloatrzflags
TRIMEDIA_ufloatrz = _idaapi.TRIMEDIA_ufloatrz
TRIMEDIA_ufloatrzflags = _idaapi.TRIMEDIA_ufloatrzflags
TRIMEDIA_ifixieee = _idaapi.TRIMEDIA_ifixieee
TRIMEDIA_ifixieeeflags = _idaapi.TRIMEDIA_ifixieeeflags
TRIMEDIA_ufixieee = _idaapi.TRIMEDIA_ufixieee
TRIMEDIA_ufixieeeflags = _idaapi.TRIMEDIA_ufixieeeflags
TRIMEDIA_ufixrz = _idaapi.TRIMEDIA_ufixrz
TRIMEDIA_ufixrzflags = _idaapi.TRIMEDIA_ufixrzflags
TRIMEDIA_ufloat = _idaapi.TRIMEDIA_ufloat
TRIMEDIA_ufloatflags = _idaapi.TRIMEDIA_ufloatflags
TRIMEDIA_ifixrzflags = _idaapi.TRIMEDIA_ifixrzflags
TRIMEDIA_ifloatflags = _idaapi.TRIMEDIA_ifloatflags
TRIMEDIA_umul = _idaapi.TRIMEDIA_umul
TRIMEDIA_imulm = _idaapi.TRIMEDIA_imulm
TRIMEDIA_umulm = _idaapi.TRIMEDIA_umulm
TRIMEDIA_dspimul = _idaapi.TRIMEDIA_dspimul
TRIMEDIA_dspumul = _idaapi.TRIMEDIA_dspumul
TRIMEDIA_fmulflags = _idaapi.TRIMEDIA_fmulflags
TRIMEDIA_fgtr = _idaapi.TRIMEDIA_fgtr
TRIMEDIA_fgtrflags = _idaapi.TRIMEDIA_fgtrflags
TRIMEDIA_fgeq = _idaapi.TRIMEDIA_fgeq
TRIMEDIA_fgeqflags = _idaapi.TRIMEDIA_fgeqflags
TRIMEDIA_feql = _idaapi.TRIMEDIA_feql
TRIMEDIA_feqlflags = _idaapi.TRIMEDIA_feqlflags
TRIMEDIA_fneq = _idaapi.TRIMEDIA_fneq
TRIMEDIA_fneqflags = _idaapi.TRIMEDIA_fneqflags
TRIMEDIA_fsign = _idaapi.TRIMEDIA_fsign
TRIMEDIA_fsignflags = _idaapi.TRIMEDIA_fsignflags
TRIMEDIA_cycles = _idaapi.TRIMEDIA_cycles
TRIMEDIA_hicycles = _idaapi.TRIMEDIA_hicycles
TRIMEDIA_readdpc = _idaapi.TRIMEDIA_readdpc
TRIMEDIA_readspc = _idaapi.TRIMEDIA_readspc
TRIMEDIA_readpcsw = _idaapi.TRIMEDIA_readpcsw
TRIMEDIA_writespc = _idaapi.TRIMEDIA_writespc
TRIMEDIA_writedpc = _idaapi.TRIMEDIA_writedpc
TRIMEDIA_writepcsw = _idaapi.TRIMEDIA_writepcsw
TRIMEDIA_curcycles = _idaapi.TRIMEDIA_curcycles
TRIMEDIA_jmpt = _idaapi.TRIMEDIA_jmpt
TRIMEDIA_ijmpt = _idaapi.TRIMEDIA_ijmpt
TRIMEDIA_jmpi = _idaapi.TRIMEDIA_jmpi
TRIMEDIA_ijmpi = _idaapi.TRIMEDIA_ijmpi
TRIMEDIA_jmpf = _idaapi.TRIMEDIA_jmpf
TRIMEDIA_ijmpf = _idaapi.TRIMEDIA_ijmpf
TRIMEDIA_iclr = _idaapi.TRIMEDIA_iclr
TRIMEDIA_uimm = _idaapi.TRIMEDIA_uimm
TRIMEDIA_ild8d = _idaapi.TRIMEDIA_ild8d
TRIMEDIA_ild8r = _idaapi.TRIMEDIA_ild8r
TRIMEDIA_uld8r = _idaapi.TRIMEDIA_uld8r
TRIMEDIA_ild16r = _idaapi.TRIMEDIA_ild16r
TRIMEDIA_ild16x = _idaapi.TRIMEDIA_ild16x
TRIMEDIA_uld16d = _idaapi.TRIMEDIA_uld16d
TRIMEDIA_uld16r = _idaapi.TRIMEDIA_uld16r
TRIMEDIA_uld16x = _idaapi.TRIMEDIA_uld16x
TRIMEDIA_ld32r = _idaapi.TRIMEDIA_ld32r
TRIMEDIA_ld32x = _idaapi.TRIMEDIA_ld32x
TRIMEDIA_rdtag = _idaapi.TRIMEDIA_rdtag
TRIMEDIA_rdstatus = _idaapi.TRIMEDIA_rdstatus
TRIMEDIA_dcb = _idaapi.TRIMEDIA_dcb
TRIMEDIA_dinvalid = _idaapi.TRIMEDIA_dinvalid
TRIMEDIA_prefd = _idaapi.TRIMEDIA_prefd
TRIMEDIA_prefr = _idaapi.TRIMEDIA_prefr
TRIMEDIA_pref16x = _idaapi.TRIMEDIA_pref16x
TRIMEDIA_pref32x = _idaapi.TRIMEDIA_pref32x
TRIMEDIA_allocd = _idaapi.TRIMEDIA_allocd
TRIMEDIA_allocr = _idaapi.TRIMEDIA_allocr
TRIMEDIA_allocx = _idaapi.TRIMEDIA_allocx
TRIMEDIA_nop = _idaapi.TRIMEDIA_nop
TRIMEDIA_alloc = _idaapi.TRIMEDIA_alloc
TRIMEDIA_dspiabs = _idaapi.TRIMEDIA_dspiabs
TRIMEDIA_dspidualabs = _idaapi.TRIMEDIA_dspidualabs
TRIMEDIA_iabs = _idaapi.TRIMEDIA_iabs
TRIMEDIA_ild16 = _idaapi.TRIMEDIA_ild16
TRIMEDIA_ild8 = _idaapi.TRIMEDIA_ild8
TRIMEDIA_ineg = _idaapi.TRIMEDIA_ineg
TRIMEDIA_ld32 = _idaapi.TRIMEDIA_ld32
TRIMEDIA_pref = _idaapi.TRIMEDIA_pref
TRIMEDIA_sex8 = _idaapi.TRIMEDIA_sex8
TRIMEDIA_st16 = _idaapi.TRIMEDIA_st16
TRIMEDIA_st16d = _idaapi.TRIMEDIA_st16d
TRIMEDIA_st32 = _idaapi.TRIMEDIA_st32
TRIMEDIA_st32d = _idaapi.TRIMEDIA_st32d
TRIMEDIA_st8 = _idaapi.TRIMEDIA_st8
TRIMEDIA_st8d = _idaapi.TRIMEDIA_st8d
TRIMEDIA_uld16 = _idaapi.TRIMEDIA_uld16
TRIMEDIA_uld8 = _idaapi.TRIMEDIA_uld8
TRIMEDIA_zex16 = _idaapi.TRIMEDIA_zex16
TRIMEDIA_zex8 = _idaapi.TRIMEDIA_zex8
TRIMEDIA_ident = _idaapi.TRIMEDIA_ident
TRIMEDIA_iles = _idaapi.TRIMEDIA_iles
TRIMEDIA_ileq = _idaapi.TRIMEDIA_ileq
TRIMEDIA_ules = _idaapi.TRIMEDIA_ules
TRIMEDIA_uleq = _idaapi.TRIMEDIA_uleq
TRIMEDIA_fles = _idaapi.TRIMEDIA_fles
TRIMEDIA_fleq = _idaapi.TRIMEDIA_fleq
TRIMEDIA_ueql = _idaapi.TRIMEDIA_ueql
TRIMEDIA_uneq = _idaapi.TRIMEDIA_uneq
TRIMEDIA_flesflags = _idaapi.TRIMEDIA_flesflags
TRIMEDIA_fleqflags = _idaapi.TRIMEDIA_fleqflags
TRIMEDIA_borrow = _idaapi.TRIMEDIA_borrow
TRIMEDIA_umin = _idaapi.TRIMEDIA_umin
TRIMEDIA_lsl = _idaapi.TRIMEDIA_lsl
TRIMEDIA_lsli = _idaapi.TRIMEDIA_lsli
TRIMEDIA_last = _idaapi.TRIMEDIA_last
NEC_78K_0_null = _idaapi.NEC_78K_0_null
NEC_78K_0_mov = _idaapi.NEC_78K_0_mov
NEC_78K_0_xch = _idaapi.NEC_78K_0_xch
NEC_78K_0_movw = _idaapi.NEC_78K_0_movw
NEC_78K_0_xchw = _idaapi.NEC_78K_0_xchw
NEC_78K_0_add = _idaapi.NEC_78K_0_add
NEC_78K_0_addc = _idaapi.NEC_78K_0_addc
NEC_78K_0_sub = _idaapi.NEC_78K_0_sub
NEC_78K_0_subc = _idaapi.NEC_78K_0_subc
NEC_78K_0_and = _idaapi.NEC_78K_0_and
NEC_78K_0_or = _idaapi.NEC_78K_0_or
NEC_78K_0_xor = _idaapi.NEC_78K_0_xor
NEC_78K_0_cmp = _idaapi.NEC_78K_0_cmp
NEC_78K_0_addw = _idaapi.NEC_78K_0_addw
NEC_78K_0_subw = _idaapi.NEC_78K_0_subw
NEC_78K_0_cmpw = _idaapi.NEC_78K_0_cmpw
NEC_78K_0_mulu = _idaapi.NEC_78K_0_mulu
NEC_78K_0_divuw = _idaapi.NEC_78K_0_divuw
NEC_78K_0_inc = _idaapi.NEC_78K_0_inc
NEC_78K_0_dec = _idaapi.NEC_78K_0_dec
NEC_78K_0_incw = _idaapi.NEC_78K_0_incw
NEC_78K_0_decw = _idaapi.NEC_78K_0_decw
NEC_78K_0_ror = _idaapi.NEC_78K_0_ror
NEC_78K_0_rol = _idaapi.NEC_78K_0_rol
NEC_78K_0_rorc = _idaapi.NEC_78K_0_rorc
NEC_78K_0_rolc = _idaapi.NEC_78K_0_rolc
NEC_78K_0_ror4 = _idaapi.NEC_78K_0_ror4
NEC_78K_0_rol4 = _idaapi.NEC_78K_0_rol4
NEC_78K_0_adjba = _idaapi.NEC_78K_0_adjba
NEC_78K_0_adjbs = _idaapi.NEC_78K_0_adjbs
NEC_78K_0_mov1 = _idaapi.NEC_78K_0_mov1
NEC_78K_0_and1 = _idaapi.NEC_78K_0_and1
NEC_78K_0_or1 = _idaapi.NEC_78K_0_or1
NEC_78K_0_xor1 = _idaapi.NEC_78K_0_xor1
NEC_78K_0_set1 = _idaapi.NEC_78K_0_set1
NEC_78K_0_clr1 = _idaapi.NEC_78K_0_clr1
NEC_78K_0_not1 = _idaapi.NEC_78K_0_not1
NEC_78K_0_call = _idaapi.NEC_78K_0_call
NEC_78K_0_callf = _idaapi.NEC_78K_0_callf
NEC_78K_0_callt = _idaapi.NEC_78K_0_callt
NEC_78K_0_brk = _idaapi.NEC_78K_0_brk
NEC_78K_0_ret = _idaapi.NEC_78K_0_ret
NEC_78K_0_retb = _idaapi.NEC_78K_0_retb
NEC_78K_0_reti = _idaapi.NEC_78K_0_reti
NEC_78K_0_push = _idaapi.NEC_78K_0_push
NEC_78K_0_pop = _idaapi.NEC_78K_0_pop
NEC_78K_0_br = _idaapi.NEC_78K_0_br
NEC_78K_0_bc = _idaapi.NEC_78K_0_bc
NEC_78K_0_bnc = _idaapi.NEC_78K_0_bnc
NEC_78K_0_bz = _idaapi.NEC_78K_0_bz
NEC_78K_0_bnz = _idaapi.NEC_78K_0_bnz
NEC_78K_0_bt = _idaapi.NEC_78K_0_bt
NEC_78K_0_bf = _idaapi.NEC_78K_0_bf
NEC_78K_0_btclr = _idaapi.NEC_78K_0_btclr
NEC_78K_0_dbnz = _idaapi.NEC_78K_0_dbnz
NEC_78K_0_sel = _idaapi.NEC_78K_0_sel
NEC_78K_0_nop = _idaapi.NEC_78K_0_nop
NEC_78K_0_EI = _idaapi.NEC_78K_0_EI
NEC_78K_0_DI = _idaapi.NEC_78K_0_DI
NEC_78K_0_HALT = _idaapi.NEC_78K_0_HALT
NEC_78K_0_STOP = _idaapi.NEC_78K_0_STOP
NEC_78K_0_last = _idaapi.NEC_78K_0_last
NEC_78K_0S_null = _idaapi.NEC_78K_0S_null
NEC_78K_0S_cmp = _idaapi.NEC_78K_0S_cmp
NEC_78K_0S_xor = _idaapi.NEC_78K_0S_xor
NEC_78K_0S_and = _idaapi.NEC_78K_0S_and
NEC_78K_0S_or = _idaapi.NEC_78K_0S_or
NEC_78K_0S_add = _idaapi.NEC_78K_0S_add
NEC_78K_0S_sub = _idaapi.NEC_78K_0S_sub
NEC_78K_0S_addc = _idaapi.NEC_78K_0S_addc
NEC_78K_0S_subc = _idaapi.NEC_78K_0S_subc
NEC_78K_0S_subw = _idaapi.NEC_78K_0S_subw
NEC_78K_0S_addw = _idaapi.NEC_78K_0S_addw
NEC_78K_0S_cmpw = _idaapi.NEC_78K_0S_cmpw
NEC_78K_0S_inc = _idaapi.NEC_78K_0S_inc
NEC_78K_0S_dec = _idaapi.NEC_78K_0S_dec
NEC_78K_0S_incw = _idaapi.NEC_78K_0S_incw
NEC_78K_0S_decw = _idaapi.NEC_78K_0S_decw
NEC_78K_0S_ror = _idaapi.NEC_78K_0S_ror
NEC_78K_0S_rol = _idaapi.NEC_78K_0S_rol
NEC_78K_0S_rorc = _idaapi.NEC_78K_0S_rorc
NEC_78K_0S_rolc = _idaapi.NEC_78K_0S_rolc
NEC_78K_0S_call = _idaapi.NEC_78K_0S_call
NEC_78K_0S_callt = _idaapi.NEC_78K_0S_callt
NEC_78K_0S_ret = _idaapi.NEC_78K_0S_ret
NEC_78K_0S_reti = _idaapi.NEC_78K_0S_reti
NEC_78K_0S_mov = _idaapi.NEC_78K_0S_mov
NEC_78K_0S_xch = _idaapi.NEC_78K_0S_xch
NEC_78K_0S_xchw = _idaapi.NEC_78K_0S_xchw
NEC_78K_0S_set1 = _idaapi.NEC_78K_0S_set1
NEC_78K_0S_clr1 = _idaapi.NEC_78K_0S_clr1
NEC_78K_0S_not1 = _idaapi.NEC_78K_0S_not1
NEC_78K_0S_push = _idaapi.NEC_78K_0S_push
NEC_78K_0S_pop = _idaapi.NEC_78K_0S_pop
NEC_78K_0S_movw = _idaapi.NEC_78K_0S_movw
NEC_78K_0S_br = _idaapi.NEC_78K_0S_br
NEC_78K_0S_bc = _idaapi.NEC_78K_0S_bc
NEC_78K_0S_bnc = _idaapi.NEC_78K_0S_bnc
NEC_78K_0S_bz = _idaapi.NEC_78K_0S_bz
NEC_78K_0S_bnz = _idaapi.NEC_78K_0S_bnz
NEC_78K_0S_bt = _idaapi.NEC_78K_0S_bt
NEC_78K_0S_bf = _idaapi.NEC_78K_0S_bf
NEC_78K_0S_dbnz = _idaapi.NEC_78K_0S_dbnz
NEC_78K_0S_nop = _idaapi.NEC_78K_0S_nop
NEC_78K_0S_EI = _idaapi.NEC_78K_0S_EI
NEC_78K_0S_DI = _idaapi.NEC_78K_0S_DI
NEC_78K_0S_HALT = _idaapi.NEC_78K_0S_HALT
NEC_78K_0S_STOP = _idaapi.NEC_78K_0S_STOP
NEC_78K_0S_last = _idaapi.NEC_78K_0S_last
m32r_null = _idaapi.m32r_null
m32r_add = _idaapi.m32r_add
m32r_add3 = _idaapi.m32r_add3
m32r_addi = _idaapi.m32r_addi
m32r_addv = _idaapi.m32r_addv
m32r_addv3 = _idaapi.m32r_addv3
m32r_addx = _idaapi.m32r_addx
m32r_and = _idaapi.m32r_and
m32r_and3 = _idaapi.m32r_and3
m32r_bc = _idaapi.m32r_bc
m32r_beq = _idaapi.m32r_beq
m32r_beqz = _idaapi.m32r_beqz
m32r_bgez = _idaapi.m32r_bgez
m32r_bgtz = _idaapi.m32r_bgtz
m32r_bl = _idaapi.m32r_bl
m32r_blez = _idaapi.m32r_blez
m32r_bltz = _idaapi.m32r_bltz
m32r_bnc = _idaapi.m32r_bnc
m32r_bne = _idaapi.m32r_bne
m32r_bnez = _idaapi.m32r_bnez
m32r_bra = _idaapi.m32r_bra
m32r_cmp = _idaapi.m32r_cmp
m32r_cmpi = _idaapi.m32r_cmpi
m32r_cmpu = _idaapi.m32r_cmpu
m32r_cmpui = _idaapi.m32r_cmpui
m32r_div = _idaapi.m32r_div
m32r_divu = _idaapi.m32r_divu
m32r_jl = _idaapi.m32r_jl
m32r_jmp = _idaapi.m32r_jmp
m32r_ld = _idaapi.m32r_ld
m32r_ld24 = _idaapi.m32r_ld24
m32r_ldb = _idaapi.m32r_ldb
m32r_ldh = _idaapi.m32r_ldh
m32r_ldi = _idaapi.m32r_ldi
m32r_ldub = _idaapi.m32r_ldub
m32r_lduh = _idaapi.m32r_lduh
m32r_lock = _idaapi.m32r_lock
m32r_machi = _idaapi.m32r_machi
m32r_maclo = _idaapi.m32r_maclo
m32r_macwhi = _idaapi.m32r_macwhi
m32r_macwlo = _idaapi.m32r_macwlo
m32r_mul = _idaapi.m32r_mul
m32r_mulhi = _idaapi.m32r_mulhi
m32r_mullo = _idaapi.m32r_mullo
m32r_mulwhi = _idaapi.m32r_mulwhi
m32r_mulwlo = _idaapi.m32r_mulwlo
m32r_mv = _idaapi.m32r_mv
m32r_mvfachi = _idaapi.m32r_mvfachi
m32r_mvfaclo = _idaapi.m32r_mvfaclo
m32r_mvfacmi = _idaapi.m32r_mvfacmi
m32r_mvfc = _idaapi.m32r_mvfc
m32r_mvtachi = _idaapi.m32r_mvtachi
m32r_mvtaclo = _idaapi.m32r_mvtaclo
m32r_mvtc = _idaapi.m32r_mvtc
m32r_neg = _idaapi.m32r_neg
m32r_nop = _idaapi.m32r_nop
m32r_not = _idaapi.m32r_not
m32r_or = _idaapi.m32r_or
m32r_or3 = _idaapi.m32r_or3
m32r_push = _idaapi.m32r_push
m32r_pop = _idaapi.m32r_pop
m32r_rac = _idaapi.m32r_rac
m32r_rach = _idaapi.m32r_rach
m32r_rem = _idaapi.m32r_rem
m32r_remu = _idaapi.m32r_remu
m32r_rte = _idaapi.m32r_rte
m32r_seth = _idaapi.m32r_seth
m32r_sll = _idaapi.m32r_sll
m32r_sll3 = _idaapi.m32r_sll3
m32r_slli = _idaapi.m32r_slli
m32r_sra = _idaapi.m32r_sra
m32r_sra3 = _idaapi.m32r_sra3
m32r_srai = _idaapi.m32r_srai
m32r_srl = _idaapi.m32r_srl
m32r_srl3 = _idaapi.m32r_srl3
m32r_srli = _idaapi.m32r_srli
m32r_st = _idaapi.m32r_st
m32r_stb = _idaapi.m32r_stb
m32r_sth = _idaapi.m32r_sth
m32r_sub = _idaapi.m32r_sub
m32r_subv = _idaapi.m32r_subv
m32r_subx = _idaapi.m32r_subx
m32r_trap = _idaapi.m32r_trap
m32r_unlock = _idaapi.m32r_unlock
m32r_xor = _idaapi.m32r_xor
m32r_xor3 = _idaapi.m32r_xor3
m32rx_bcl = _idaapi.m32rx_bcl
m32rx_bncl = _idaapi.m32rx_bncl
m32rx_cmpeq = _idaapi.m32rx_cmpeq
m32rx_cmpz = _idaapi.m32rx_cmpz
m32rx_divh = _idaapi.m32rx_divh
m32rx_jc = _idaapi.m32rx_jc
m32rx_jnc = _idaapi.m32rx_jnc
m32rx_machi = _idaapi.m32rx_machi
m32rx_maclo = _idaapi.m32rx_maclo
m32rx_macwhi = _idaapi.m32rx_macwhi
m32rx_macwlo = _idaapi.m32rx_macwlo
m32rx_mulhi = _idaapi.m32rx_mulhi
m32rx_mullo = _idaapi.m32rx_mullo
m32rx_mulwhi = _idaapi.m32rx_mulwhi
m32rx_mulwlo = _idaapi.m32rx_mulwlo
m32rx_mvfachi = _idaapi.m32rx_mvfachi
m32rx_mvfaclo = _idaapi.m32rx_mvfaclo
m32rx_mvfacmi = _idaapi.m32rx_mvfacmi
m32rx_mvtachi = _idaapi.m32rx_mvtachi
m32rx_mvtaclo = _idaapi.m32rx_mvtaclo
m32rx_rac = _idaapi.m32rx_rac
m32rx_rach = _idaapi.m32rx_rach
m32rx_satb = _idaapi.m32rx_satb
m32rx_sath = _idaapi.m32rx_sath
m32rx_sat = _idaapi.m32rx_sat
m32rx_pcmpbz = _idaapi.m32rx_pcmpbz
m32rx_sadd = _idaapi.m32rx_sadd
m32rx_macwu1 = _idaapi.m32rx_macwu1
m32rx_msblo = _idaapi.m32rx_msblo
m32rx_mulwu1 = _idaapi.m32rx_mulwu1
m32rx_maclh1 = _idaapi.m32rx_maclh1
m32rx_sc = _idaapi.m32rx_sc
m32rx_snc = _idaapi.m32rx_snc
m32r_fadd = _idaapi.m32r_fadd
m32r_fsub = _idaapi.m32r_fsub
m32r_fmul = _idaapi.m32r_fmul
m32r_fdiv = _idaapi.m32r_fdiv
m32r_fmadd = _idaapi.m32r_fmadd
m32r_fmsub = _idaapi.m32r_fmsub
m32r_itof = _idaapi.m32r_itof
m32r_utof = _idaapi.m32r_utof
m32r_ftoi = _idaapi.m32r_ftoi
m32r_ftos = _idaapi.m32r_ftos
m32r_fcmp = _idaapi.m32r_fcmp
m32r_fcmpe = _idaapi.m32r_fcmpe
m32r_bset = _idaapi.m32r_bset
m32r_bclr = _idaapi.m32r_bclr
m32r_btst = _idaapi.m32r_btst
m32r_setpsw = _idaapi.m32r_setpsw
m32r_clrpsw = _idaapi.m32r_clrpsw
m32r_last = _idaapi.m32r_last
m740_null = _idaapi.m740_null
m740_adc = _idaapi.m740_adc
m740_and = _idaapi.m740_and
m740_asl = _idaapi.m740_asl
m740_bbc = _idaapi.m740_bbc
m740_bbs = _idaapi.m740_bbs
m740_bcc = _idaapi.m740_bcc
m740_bcs = _idaapi.m740_bcs
m740_beq = _idaapi.m740_beq
m740_bit = _idaapi.m740_bit
m740_bmi = _idaapi.m740_bmi
m740_bne = _idaapi.m740_bne
m740_bpl = _idaapi.m740_bpl
m740_bra = _idaapi.m740_bra
m740_brk = _idaapi.m740_brk
m740_bvc = _idaapi.m740_bvc
m740_bvs = _idaapi.m740_bvs
m740_clb = _idaapi.m740_clb
m740_clc = _idaapi.m740_clc
m740_cld = _idaapi.m740_cld
m740_cli = _idaapi.m740_cli
m740_clt = _idaapi.m740_clt
m740_clv = _idaapi.m740_clv
m740_cmp = _idaapi.m740_cmp
m740_com = _idaapi.m740_com
m740_cpx = _idaapi.m740_cpx
m740_cpy = _idaapi.m740_cpy
m740_dec = _idaapi.m740_dec
m740_dex = _idaapi.m740_dex
m740_dey = _idaapi.m740_dey
m740_div = _idaapi.m740_div
m740_eor = _idaapi.m740_eor
m740_inc = _idaapi.m740_inc
m740_inx = _idaapi.m740_inx
m740_iny = _idaapi.m740_iny
m740_jmp = _idaapi.m740_jmp
m740_jsr = _idaapi.m740_jsr
m740_lda = _idaapi.m740_lda
m740_ldm = _idaapi.m740_ldm
m740_ldx = _idaapi.m740_ldx
m740_ldy = _idaapi.m740_ldy
m740_lsr = _idaapi.m740_lsr
m740_mul = _idaapi.m740_mul
m740_nop = _idaapi.m740_nop
m740_ora = _idaapi.m740_ora
m740_pha = _idaapi.m740_pha
m740_php = _idaapi.m740_php
m740_pla = _idaapi.m740_pla
m740_plp = _idaapi.m740_plp
m740_rol = _idaapi.m740_rol
m740_ror = _idaapi.m740_ror
m740_rrf = _idaapi.m740_rrf
m740_rti = _idaapi.m740_rti
m740_rts = _idaapi.m740_rts
m740_sbc = _idaapi.m740_sbc
m740_seb = _idaapi.m740_seb
m740_sec = _idaapi.m740_sec
m740_sed = _idaapi.m740_sed
m740_sei = _idaapi.m740_sei
m740_set = _idaapi.m740_set
m740_sta = _idaapi.m740_sta
m740_stp = _idaapi.m740_stp
m740_stx = _idaapi.m740_stx
m740_sty = _idaapi.m740_sty
m740_tax = _idaapi.m740_tax
m740_tay = _idaapi.m740_tay
m740_tst = _idaapi.m740_tst
m740_tsx = _idaapi.m740_tsx
m740_txa = _idaapi.m740_txa
m740_txs = _idaapi.m740_txs
m740_tya = _idaapi.m740_tya
m740_wit = _idaapi.m740_wit
m740_last = _idaapi.m740_last
m7700_null = _idaapi.m7700_null
m7700_adc = _idaapi.m7700_adc
m7700_and = _idaapi.m7700_and
m7700_asl = _idaapi.m7700_asl
m7700_bbc = _idaapi.m7700_bbc
m7700_bbs = _idaapi.m7700_bbs
m7700_bcc = _idaapi.m7700_bcc
m7700_bcs = _idaapi.m7700_bcs
m7700_beq = _idaapi.m7700_beq
m7700_bmi = _idaapi.m7700_bmi
m7700_bne = _idaapi.m7700_bne
m7700_bpl = _idaapi.m7700_bpl
m7700_bra = _idaapi.m7700_bra
m7700_brk = _idaapi.m7700_brk
m7700_bvc = _idaapi.m7700_bvc
m7700_bvs = _idaapi.m7700_bvs
m7700_clb = _idaapi.m7700_clb
m7700_clc = _idaapi.m7700_clc
m7700_cli = _idaapi.m7700_cli
m7700_clm = _idaapi.m7700_clm
m7700_clp = _idaapi.m7700_clp
m7700_clv = _idaapi.m7700_clv
m7700_cmp = _idaapi.m7700_cmp
m7700_cpx = _idaapi.m7700_cpx
m7700_cpy = _idaapi.m7700_cpy
m7700_dec = _idaapi.m7700_dec
m7700_dex = _idaapi.m7700_dex
m7700_dey = _idaapi.m7700_dey
m7700_div = _idaapi.m7700_div
m7700_eor = _idaapi.m7700_eor
m7700_inc = _idaapi.m7700_inc
m7700_inx = _idaapi.m7700_inx
m7700_iny = _idaapi.m7700_iny
m7700_jmp = _idaapi.m7700_jmp
m7700_jsr = _idaapi.m7700_jsr
m7700_lda = _idaapi.m7700_lda
m7700_ldm = _idaapi.m7700_ldm
m7700_ldt = _idaapi.m7700_ldt
m7700_ldx = _idaapi.m7700_ldx
m7700_ldy = _idaapi.m7700_ldy
m7700_lsr = _idaapi.m7700_lsr
m7700_mpy = _idaapi.m7700_mpy
m7700_mvn = _idaapi.m7700_mvn
m7700_mvp = _idaapi.m7700_mvp
m7700_nop = _idaapi.m7700_nop
m7700_ora = _idaapi.m7700_ora
m7700_pea = _idaapi.m7700_pea
m7700_pei = _idaapi.m7700_pei
m7700_per = _idaapi.m7700_per
m7700_pha = _idaapi.m7700_pha
m7700_phb = _idaapi.m7700_phb
m7700_phd = _idaapi.m7700_phd
m7700_phg = _idaapi.m7700_phg
m7700_php = _idaapi.m7700_php
m7700_pht = _idaapi.m7700_pht
m7700_phx = _idaapi.m7700_phx
m7700_phy = _idaapi.m7700_phy
m7700_pla = _idaapi.m7700_pla
m7700_plb = _idaapi.m7700_plb
m7700_pld = _idaapi.m7700_pld
m7700_plp = _idaapi.m7700_plp
m7700_plt = _idaapi.m7700_plt
m7700_plx = _idaapi.m7700_plx
m7700_ply = _idaapi.m7700_ply
m7700_psh = _idaapi.m7700_psh
m7700_pul = _idaapi.m7700_pul
m7700_rla = _idaapi.m7700_rla
m7700_rol = _idaapi.m7700_rol
m7700_ror = _idaapi.m7700_ror
m7700_rti = _idaapi.m7700_rti
m7700_rtl = _idaapi.m7700_rtl
m7700_rts = _idaapi.m7700_rts
m7700_sbc = _idaapi.m7700_sbc
m7700_seb = _idaapi.m7700_seb
m7700_sec = _idaapi.m7700_sec
m7700_sei = _idaapi.m7700_sei
m7700_sem = _idaapi.m7700_sem
m7700_sep = _idaapi.m7700_sep
m7700_sta = _idaapi.m7700_sta
m7700_stp = _idaapi.m7700_stp
m7700_stx = _idaapi.m7700_stx
m7700_sty = _idaapi.m7700_sty
m7700_tad = _idaapi.m7700_tad
m7700_tas = _idaapi.m7700_tas
m7700_tax = _idaapi.m7700_tax
m7700_tay = _idaapi.m7700_tay
m7700_tbd = _idaapi.m7700_tbd
m7700_tbs = _idaapi.m7700_tbs
m7700_tbx = _idaapi.m7700_tbx
m7700_tby = _idaapi.m7700_tby
m7700_tda = _idaapi.m7700_tda
m7700_tdb = _idaapi.m7700_tdb
m7700_tsa = _idaapi.m7700_tsa
m7700_tsb = _idaapi.m7700_tsb
m7700_tsx = _idaapi.m7700_tsx
m7700_txa = _idaapi.m7700_txa
m7700_txb = _idaapi.m7700_txb
m7700_txs = _idaapi.m7700_txs
m7700_txy = _idaapi.m7700_txy
m7700_tya = _idaapi.m7700_tya
m7700_tyb = _idaapi.m7700_tyb
m7700_tyx = _idaapi.m7700_tyx
m7700_wit = _idaapi.m7700_wit
m7700_xab = _idaapi.m7700_xab
m7750_asr = _idaapi.m7750_asr
m7750_divs = _idaapi.m7750_divs
m7750_exts = _idaapi.m7750_exts
m7750_extz = _idaapi.m7750_extz
m7750_mpys = _idaapi.m7750_mpys
m7700_last = _idaapi.m7700_last
m7900_null = _idaapi.m7900_null
m7900_abs = _idaapi.m7900_abs
m7900_absd = _idaapi.m7900_absd
m7900_adc = _idaapi.m7900_adc
m7900_adcb = _idaapi.m7900_adcb
m7900_adcd = _idaapi.m7900_adcd
m7900_add = _idaapi.m7900_add
m7900_addb = _idaapi.m7900_addb
m7900_addd = _idaapi.m7900_addd
m7900_addm = _idaapi.m7900_addm
m7900_addmb = _idaapi.m7900_addmb
m7900_addmd = _idaapi.m7900_addmd
m7900_adds = _idaapi.m7900_adds
m7900_addx = _idaapi.m7900_addx
m7900_addy = _idaapi.m7900_addy
m7900_and = _idaapi.m7900_and
m7900_andb = _idaapi.m7900_andb
m7900_andm = _idaapi.m7900_andm
m7900_andmb = _idaapi.m7900_andmb
m7900_andmd = _idaapi.m7900_andmd
m7900_asl = _idaapi.m7900_asl
m7900_asln = _idaapi.m7900_asln
m7900_asldn = _idaapi.m7900_asldn
m7900_asr = _idaapi.m7900_asr
m7900_asrn = _idaapi.m7900_asrn
m7900_asrdn = _idaapi.m7900_asrdn
m7900_bbc = _idaapi.m7900_bbc
m7900_bbcb = _idaapi.m7900_bbcb
m7900_bbs = _idaapi.m7900_bbs
m7900_bbsb = _idaapi.m7900_bbsb
m7900_bcc = _idaapi.m7900_bcc
m7900_bcs = _idaapi.m7900_bcs
m7900_beq = _idaapi.m7900_beq
m7900_bge = _idaapi.m7900_bge
m7900_bgt = _idaapi.m7900_bgt
m7900_bgtu = _idaapi.m7900_bgtu
m7900_ble = _idaapi.m7900_ble
m7900_bleu = _idaapi.m7900_bleu
m7900_blt = _idaapi.m7900_blt
m7900_bmi = _idaapi.m7900_bmi
m7900_bne = _idaapi.m7900_bne
m7900_bpl = _idaapi.m7900_bpl
m7900_bra = _idaapi.m7900_bra
m7900_bral = _idaapi.m7900_bral
m7900_brk = _idaapi.m7900_brk
m7900_bsc = _idaapi.m7900_bsc
m7900_bsr = _idaapi.m7900_bsr
m7900_bss = _idaapi.m7900_bss
m7900_bvc = _idaapi.m7900_bvc
m7900_bvs = _idaapi.m7900_bvs
m7900_cbeq = _idaapi.m7900_cbeq
m7900_cbeqb = _idaapi.m7900_cbeqb
m7900_cbne = _idaapi.m7900_cbne
m7900_cbneb = _idaapi.m7900_cbneb
m7900_clc = _idaapi.m7900_clc
m7900_cli = _idaapi.m7900_cli
m7900_clm = _idaapi.m7900_clm
m7900_clp = _idaapi.m7900_clp
m7900_clr = _idaapi.m7900_clr
m7900_clrb = _idaapi.m7900_clrb
m7900_clrm = _idaapi.m7900_clrm
m7900_clrmb = _idaapi.m7900_clrmb
m7900_clrx = _idaapi.m7900_clrx
m7900_clry = _idaapi.m7900_clry
m7900_clv = _idaapi.m7900_clv
m7900_cmp = _idaapi.m7900_cmp
m7900_cmpb = _idaapi.m7900_cmpb
m7900_cmpd = _idaapi.m7900_cmpd
m7900_cmpm = _idaapi.m7900_cmpm
m7900_cmpmb = _idaapi.m7900_cmpmb
m7900_cmpmd = _idaapi.m7900_cmpmd
m7900_cpx = _idaapi.m7900_cpx
m7900_cpy = _idaapi.m7900_cpy
m7900_debne = _idaapi.m7900_debne
m7900_dec = _idaapi.m7900_dec
m7900_dex = _idaapi.m7900_dex
m7900_dey = _idaapi.m7900_dey
m7900_div = _idaapi.m7900_div
m7900_divs = _idaapi.m7900_divs
m7900_dxbne = _idaapi.m7900_dxbne
m7900_dybne = _idaapi.m7900_dybne
m7900_eor = _idaapi.m7900_eor
m7900_eorb = _idaapi.m7900_eorb
m7900_eorm = _idaapi.m7900_eorm
m7900_eormb = _idaapi.m7900_eormb
m7900_eormd = _idaapi.m7900_eormd
m7900_exts = _idaapi.m7900_exts
m7900_extsd = _idaapi.m7900_extsd
m7900_extz = _idaapi.m7900_extz
m7900_extzd = _idaapi.m7900_extzd
m7900_inc = _idaapi.m7900_inc
m7900_inx = _idaapi.m7900_inx
m7900_iny = _idaapi.m7900_iny
m7900_jmp = _idaapi.m7900_jmp
m7900_jmpl = _idaapi.m7900_jmpl
m7900_jsr = _idaapi.m7900_jsr
m7900_jsrl = _idaapi.m7900_jsrl
m7900_lda = _idaapi.m7900_lda
m7900_ldab = _idaapi.m7900_ldab
m7900_ldad = _idaapi.m7900_ldad
m7900_lddn = _idaapi.m7900_lddn
m7900_ldt = _idaapi.m7900_ldt
m7900_ldx = _idaapi.m7900_ldx
m7900_ldxb = _idaapi.m7900_ldxb
m7900_ldy = _idaapi.m7900_ldy
m7900_ldyb = _idaapi.m7900_ldyb
m7900_lsr = _idaapi.m7900_lsr
m7900_lsrn = _idaapi.m7900_lsrn
m7900_lsrdn = _idaapi.m7900_lsrdn
m7900_movm = _idaapi.m7900_movm
m7900_movmb = _idaapi.m7900_movmb
m7900_movr = _idaapi.m7900_movr
m7900_movrb = _idaapi.m7900_movrb
m7900_mpy = _idaapi.m7900_mpy
m7900_mpys = _idaapi.m7900_mpys
m7900_mvn = _idaapi.m7900_mvn
m7900_mvp = _idaapi.m7900_mvp
m7900_neg = _idaapi.m7900_neg
m7900_negd = _idaapi.m7900_negd
m7900_nop = _idaapi.m7900_nop
m7900_ora = _idaapi.m7900_ora
m7900_orab = _idaapi.m7900_orab
m7900_oram = _idaapi.m7900_oram
m7900_oramb = _idaapi.m7900_oramb
m7900_oramd = _idaapi.m7900_oramd
m7900_pea = _idaapi.m7900_pea
m7900_pei = _idaapi.m7900_pei
m7900_per = _idaapi.m7900_per
m7900_pha = _idaapi.m7900_pha
m7900_phb = _idaapi.m7900_phb
m7900_phd = _idaapi.m7900_phd
m7900_phdn = _idaapi.m7900_phdn
m7900_phg = _idaapi.m7900_phg
m7900_phldn = _idaapi.m7900_phldn
m7900_php = _idaapi.m7900_php
m7900_pht = _idaapi.m7900_pht
m7900_phx = _idaapi.m7900_phx
m7900_phy = _idaapi.m7900_phy
m7900_pla = _idaapi.m7900_pla
m7900_plb = _idaapi.m7900_plb
m7900_pld = _idaapi.m7900_pld
m7900_pldn = _idaapi.m7900_pldn
m7900_plp = _idaapi.m7900_plp
m7900_plt = _idaapi.m7900_plt
m7900_plx = _idaapi.m7900_plx
m7900_ply = _idaapi.m7900_ply
m7900_psh = _idaapi.m7900_psh
m7900_pul = _idaapi.m7900_pul
m7900_rla = _idaapi.m7900_rla
m7900_rmpa = _idaapi.m7900_rmpa
m7900_rol = _idaapi.m7900_rol
m7900_roln = _idaapi.m7900_roln
m7900_roldn = _idaapi.m7900_roldn
m7900_ror = _idaapi.m7900_ror
m7900_rorn = _idaapi.m7900_rorn
m7900_rordn = _idaapi.m7900_rordn
m7900_rti = _idaapi.m7900_rti
m7900_rtl = _idaapi.m7900_rtl
m7900_rtld = _idaapi.m7900_rtld
m7900_rts = _idaapi.m7900_rts
m7900_rtsdn = _idaapi.m7900_rtsdn
m7900_sbc = _idaapi.m7900_sbc
m7900_sbcb = _idaapi.m7900_sbcb
m7900_sbcd = _idaapi.m7900_sbcd
m7900_sec = _idaapi.m7900_sec
m7900_sei = _idaapi.m7900_sei
m7900_sem = _idaapi.m7900_sem
m7900_sep = _idaapi.m7900_sep
m7900_sta = _idaapi.m7900_sta
m7900_stab = _idaapi.m7900_stab
m7900_stad = _idaapi.m7900_stad
m7900_stp = _idaapi.m7900_stp
m7900_stx = _idaapi.m7900_stx
m7900_sty = _idaapi.m7900_sty
m7900_sub = _idaapi.m7900_sub
m7900_subb = _idaapi.m7900_subb
m7900_subd = _idaapi.m7900_subd
m7900_subm = _idaapi.m7900_subm
m7900_submb = _idaapi.m7900_submb
m7900_submd = _idaapi.m7900_submd
m7900_subs = _idaapi.m7900_subs
m7900_subx = _idaapi.m7900_subx
m7900_suby = _idaapi.m7900_suby
m7900_tadn = _idaapi.m7900_tadn
m7900_tas = _idaapi.m7900_tas
m7900_tax = _idaapi.m7900_tax
m7900_tay = _idaapi.m7900_tay
m7900_tbdn = _idaapi.m7900_tbdn
m7900_tbs = _idaapi.m7900_tbs
m7900_tbx = _idaapi.m7900_tbx
m7900_tby = _idaapi.m7900_tby
m7900_tdan = _idaapi.m7900_tdan
m7900_tdbn = _idaapi.m7900_tdbn
m7900_tds = _idaapi.m7900_tds
m7900_tsa = _idaapi.m7900_tsa
m7900_tsb = _idaapi.m7900_tsb
m7900_tsd = _idaapi.m7900_tsd
m7900_tsx = _idaapi.m7900_tsx
m7900_txa = _idaapi.m7900_txa
m7900_txb = _idaapi.m7900_txb
m7900_txs = _idaapi.m7900_txs
m7900_txy = _idaapi.m7900_txy
m7900_tya = _idaapi.m7900_tya
m7900_tyb = _idaapi.m7900_tyb
m7900_tyx = _idaapi.m7900_tyx
m7900_wit = _idaapi.m7900_wit
m7900_xab = _idaapi.m7900_xab
m7900_last = _idaapi.m7900_last
st9_null = _idaapi.st9_null
st9_ld = _idaapi.st9_ld
st9_ldw = _idaapi.st9_ldw
st9_ldpp = _idaapi.st9_ldpp
st9_ldpd = _idaapi.st9_ldpd
st9_lddp = _idaapi.st9_lddp
st9_lddd = _idaapi.st9_lddd
st9_add = _idaapi.st9_add
st9_addw = _idaapi.st9_addw
st9_adc = _idaapi.st9_adc
st9_adcw = _idaapi.st9_adcw
st9_sub = _idaapi.st9_sub
st9_subw = _idaapi.st9_subw
st9_sbc = _idaapi.st9_sbc
st9_sbcw = _idaapi.st9_sbcw
st9_and = _idaapi.st9_and
st9_andw = _idaapi.st9_andw
st9_or = _idaapi.st9_or
st9_orw = _idaapi.st9_orw
st9_xor = _idaapi.st9_xor
st9_xorw = _idaapi.st9_xorw
st9_cp = _idaapi.st9_cp
st9_cpw = _idaapi.st9_cpw
st9_tm = _idaapi.st9_tm
st9_tmw = _idaapi.st9_tmw
st9_tcm = _idaapi.st9_tcm
st9_tcmw = _idaapi.st9_tcmw
st9_inc = _idaapi.st9_inc
st9_incw = _idaapi.st9_incw
st9_dec = _idaapi.st9_dec
st9_decw = _idaapi.st9_decw
st9_sla = _idaapi.st9_sla
st9_slaw = _idaapi.st9_slaw
st9_sra = _idaapi.st9_sra
st9_sraw = _idaapi.st9_sraw
st9_rrc = _idaapi.st9_rrc
st9_rrcw = _idaapi.st9_rrcw
st9_rlc = _idaapi.st9_rlc
st9_rlcw = _idaapi.st9_rlcw
st9_ror = _idaapi.st9_ror
st9_rol = _idaapi.st9_rol
st9_clr = _idaapi.st9_clr
st9_cpl = _idaapi.st9_cpl
st9_swap = _idaapi.st9_swap
st9_da = _idaapi.st9_da
st9_push = _idaapi.st9_push
st9_pushw = _idaapi.st9_pushw
st9_pea = _idaapi.st9_pea
st9_pop = _idaapi.st9_pop
st9_popw = _idaapi.st9_popw
st9_pushu = _idaapi.st9_pushu
st9_pushuw = _idaapi.st9_pushuw
st9_peau = _idaapi.st9_peau
st9_popu = _idaapi.st9_popu
st9_popuw = _idaapi.st9_popuw
st9_link = _idaapi.st9_link
st9_unlink = _idaapi.st9_unlink
st9_linku = _idaapi.st9_linku
st9_unlinku = _idaapi.st9_unlinku
st9_mul = _idaapi.st9_mul
st9_div = _idaapi.st9_div
st9_divws = _idaapi.st9_divws
st9_bset = _idaapi.st9_bset
st9_bres = _idaapi.st9_bres
st9_bcpl = _idaapi.st9_bcpl
st9_btset = _idaapi.st9_btset
st9_bld = _idaapi.st9_bld
st9_band = _idaapi.st9_band
st9_bor = _idaapi.st9_bor
st9_bxor = _idaapi.st9_bxor
st9_ret = _idaapi.st9_ret
st9_rets = _idaapi.st9_rets
st9_iret = _idaapi.st9_iret
st9_jrcc = _idaapi.st9_jrcc
st9_jpcc = _idaapi.st9_jpcc
st9_jp = _idaapi.st9_jp
st9_jps = _idaapi.st9_jps
st9_call = _idaapi.st9_call
st9_calls = _idaapi.st9_calls
st9_btjf = _idaapi.st9_btjf
st9_btjt = _idaapi.st9_btjt
st9_djnz = _idaapi.st9_djnz
st9_dwjnz = _idaapi.st9_dwjnz
st9_cpjfi = _idaapi.st9_cpjfi
st9_cpjti = _idaapi.st9_cpjti
st9_xch = _idaapi.st9_xch
st9_srp = _idaapi.st9_srp
st9_srp0 = _idaapi.st9_srp0
st9_srp1 = _idaapi.st9_srp1
st9_spp = _idaapi.st9_spp
st9_ext = _idaapi.st9_ext
st9_ei = _idaapi.st9_ei
st9_di = _idaapi.st9_di
st9_scf = _idaapi.st9_scf
st9_rcf = _idaapi.st9_rcf
st9_ccf = _idaapi.st9_ccf
st9_spm = _idaapi.st9_spm
st9_sdm = _idaapi.st9_sdm
st9_nop = _idaapi.st9_nop
st9_wfi = _idaapi.st9_wfi
st9_halt = _idaapi.st9_halt
st9_etrap = _idaapi.st9_etrap
st9_eret = _idaapi.st9_eret
st9_ald = _idaapi.st9_ald
st9_aldw = _idaapi.st9_aldw
st9_last = _idaapi.st9_last
fr_null = _idaapi.fr_null
fr_add = _idaapi.fr_add
fr_add2 = _idaapi.fr_add2
fr_addc = _idaapi.fr_addc
fr_addn = _idaapi.fr_addn
fr_addn2 = _idaapi.fr_addn2
fr_sub = _idaapi.fr_sub
fr_subc = _idaapi.fr_subc
fr_subn = _idaapi.fr_subn
fr_cmp = _idaapi.fr_cmp
fr_cmp2 = _idaapi.fr_cmp2
fr_and = _idaapi.fr_and
fr_andh = _idaapi.fr_andh
fr_andb = _idaapi.fr_andb
fr_or = _idaapi.fr_or
fr_orh = _idaapi.fr_orh
fr_orb = _idaapi.fr_orb
fr_eor = _idaapi.fr_eor
fr_eorh = _idaapi.fr_eorh
fr_eorb = _idaapi.fr_eorb
fr_bandl = _idaapi.fr_bandl
fr_bandh = _idaapi.fr_bandh
fr_borl = _idaapi.fr_borl
fr_borh = _idaapi.fr_borh
fr_beorl = _idaapi.fr_beorl
fr_beorh = _idaapi.fr_beorh
fr_btstl = _idaapi.fr_btstl
fr_btsth = _idaapi.fr_btsth
fr_mul = _idaapi.fr_mul
fr_mulu = _idaapi.fr_mulu
fr_mulh = _idaapi.fr_mulh
fr_muluh = _idaapi.fr_muluh
fr_div0s = _idaapi.fr_div0s
fr_div0u = _idaapi.fr_div0u
fr_div1 = _idaapi.fr_div1
fr_div2 = _idaapi.fr_div2
fr_div3 = _idaapi.fr_div3
fr_div4s = _idaapi.fr_div4s
fr_lsl = _idaapi.fr_lsl
fr_lsl2 = _idaapi.fr_lsl2
fr_lsr = _idaapi.fr_lsr
fr_lsr2 = _idaapi.fr_lsr2
fr_asr = _idaapi.fr_asr
fr_asr2 = _idaapi.fr_asr2
fr_ldi_32 = _idaapi.fr_ldi_32
fr_ldi_20 = _idaapi.fr_ldi_20
fr_ldi_8 = _idaapi.fr_ldi_8
fr_ld = _idaapi.fr_ld
fr_lduh = _idaapi.fr_lduh
fr_ldub = _idaapi.fr_ldub
fr_st = _idaapi.fr_st
fr_sth = _idaapi.fr_sth
fr_stb = _idaapi.fr_stb
fr_mov = _idaapi.fr_mov
fr_jmp = _idaapi.fr_jmp
fr_call = _idaapi.fr_call
fr_ret = _idaapi.fr_ret
fr_int = _idaapi.fr_int
fr_inte = _idaapi.fr_inte
fr_reti = _idaapi.fr_reti
fr_bra = _idaapi.fr_bra
fr_bno = _idaapi.fr_bno
fr_beq = _idaapi.fr_beq
fr_bne = _idaapi.fr_bne
fr_bc = _idaapi.fr_bc
fr_bnc = _idaapi.fr_bnc
fr_bn = _idaapi.fr_bn
fr_bp = _idaapi.fr_bp
fr_bv = _idaapi.fr_bv
fr_bnv = _idaapi.fr_bnv
fr_blt = _idaapi.fr_blt
fr_bge = _idaapi.fr_bge
fr_ble = _idaapi.fr_ble
fr_bgt = _idaapi.fr_bgt
fr_bls = _idaapi.fr_bls
fr_bhi = _idaapi.fr_bhi
fr_dmov = _idaapi.fr_dmov
fr_dmovh = _idaapi.fr_dmovh
fr_dmovb = _idaapi.fr_dmovb
fr_ldres = _idaapi.fr_ldres
fr_stres = _idaapi.fr_stres
fr_copop = _idaapi.fr_copop
fr_copld = _idaapi.fr_copld
fr_copst = _idaapi.fr_copst
fr_copsv = _idaapi.fr_copsv
fr_nop = _idaapi.fr_nop
fr_andccr = _idaapi.fr_andccr
fr_orccr = _idaapi.fr_orccr
fr_stilm = _idaapi.fr_stilm
fr_addsp = _idaapi.fr_addsp
fr_extsb = _idaapi.fr_extsb
fr_extub = _idaapi.fr_extub
fr_extsh = _idaapi.fr_extsh
fr_extuh = _idaapi.fr_extuh
fr_ldm0 = _idaapi.fr_ldm0
fr_ldm1 = _idaapi.fr_ldm1
fr_stm0 = _idaapi.fr_stm0
fr_stm1 = _idaapi.fr_stm1
fr_enter = _idaapi.fr_enter
fr_leave = _idaapi.fr_leave
fr_xchb = _idaapi.fr_xchb
fr_last = _idaapi.fr_last
ALPHA_null = _idaapi.ALPHA_null
ALPHA_addf = _idaapi.ALPHA_addf
ALPHA_addg = _idaapi.ALPHA_addg
ALPHA_addl = _idaapi.ALPHA_addl
ALPHA_addl_v = _idaapi.ALPHA_addl_v
ALPHA_addq = _idaapi.ALPHA_addq
ALPHA_addq_v = _idaapi.ALPHA_addq_v
ALPHA_adds = _idaapi.ALPHA_adds
ALPHA_addt = _idaapi.ALPHA_addt
ALPHA_amask = _idaapi.ALPHA_amask
ALPHA_and = _idaapi.ALPHA_and
ALPHA_beq = _idaapi.ALPHA_beq
ALPHA_bge = _idaapi.ALPHA_bge
ALPHA_bgt = _idaapi.ALPHA_bgt
ALPHA_bic = _idaapi.ALPHA_bic
ALPHA_bis = _idaapi.ALPHA_bis
ALPHA_blbc = _idaapi.ALPHA_blbc
ALPHA_blbs = _idaapi.ALPHA_blbs
ALPHA_ble = _idaapi.ALPHA_ble
ALPHA_blt = _idaapi.ALPHA_blt
ALPHA_bne = _idaapi.ALPHA_bne
ALPHA_br = _idaapi.ALPHA_br
ALPHA_bsr = _idaapi.ALPHA_bsr
ALPHA_call_pal = _idaapi.ALPHA_call_pal
ALPHA_cmoveq = _idaapi.ALPHA_cmoveq
ALPHA_cmovge = _idaapi.ALPHA_cmovge
ALPHA_cmovgt = _idaapi.ALPHA_cmovgt
ALPHA_cmovlbc = _idaapi.ALPHA_cmovlbc
ALPHA_cmovlbs = _idaapi.ALPHA_cmovlbs
ALPHA_cmovle = _idaapi.ALPHA_cmovle
ALPHA_cmovlt = _idaapi.ALPHA_cmovlt
ALPHA_cmovne = _idaapi.ALPHA_cmovne
ALPHA_cmpbge = _idaapi.ALPHA_cmpbge
ALPHA_cmpeq = _idaapi.ALPHA_cmpeq
ALPHA_cmpgeq = _idaapi.ALPHA_cmpgeq
ALPHA_cmpgle = _idaapi.ALPHA_cmpgle
ALPHA_cmpglt = _idaapi.ALPHA_cmpglt
ALPHA_cmple = _idaapi.ALPHA_cmple
ALPHA_cmplt = _idaapi.ALPHA_cmplt
ALPHA_cmpteq = _idaapi.ALPHA_cmpteq
ALPHA_cmptle = _idaapi.ALPHA_cmptle
ALPHA_cmptlt = _idaapi.ALPHA_cmptlt
ALPHA_cmptun = _idaapi.ALPHA_cmptun
ALPHA_cmpule = _idaapi.ALPHA_cmpule
ALPHA_cmpult = _idaapi.ALPHA_cmpult
ALPHA_cpys = _idaapi.ALPHA_cpys
ALPHA_cpyse = _idaapi.ALPHA_cpyse
ALPHA_cpysn = _idaapi.ALPHA_cpysn
ALPHA_ctlz = _idaapi.ALPHA_ctlz
ALPHA_ctpop = _idaapi.ALPHA_ctpop
ALPHA_cttz = _idaapi.ALPHA_cttz
ALPHA_cvtdg = _idaapi.ALPHA_cvtdg
ALPHA_cvtgd = _idaapi.ALPHA_cvtgd
ALPHA_cvtgf = _idaapi.ALPHA_cvtgf
ALPHA_cvtgq = _idaapi.ALPHA_cvtgq
ALPHA_cvtlq = _idaapi.ALPHA_cvtlq
ALPHA_cvtqf = _idaapi.ALPHA_cvtqf
ALPHA_cvtqg = _idaapi.ALPHA_cvtqg
ALPHA_cvtql = _idaapi.ALPHA_cvtql
ALPHA_cvtqs = _idaapi.ALPHA_cvtqs
ALPHA_cvtqt = _idaapi.ALPHA_cvtqt
ALPHA_cvtst = _idaapi.ALPHA_cvtst
ALPHA_cvttq = _idaapi.ALPHA_cvttq
ALPHA_cvtts = _idaapi.ALPHA_cvtts
ALPHA_divf = _idaapi.ALPHA_divf
ALPHA_divg = _idaapi.ALPHA_divg
ALPHA_divs = _idaapi.ALPHA_divs
ALPHA_divt = _idaapi.ALPHA_divt
ALPHA_ecb = _idaapi.ALPHA_ecb
ALPHA_eqv = _idaapi.ALPHA_eqv
ALPHA_excb = _idaapi.ALPHA_excb
ALPHA_extbl = _idaapi.ALPHA_extbl
ALPHA_extlh = _idaapi.ALPHA_extlh
ALPHA_extll = _idaapi.ALPHA_extll
ALPHA_extqh = _idaapi.ALPHA_extqh
ALPHA_extql = _idaapi.ALPHA_extql
ALPHA_extwh = _idaapi.ALPHA_extwh
ALPHA_extwl = _idaapi.ALPHA_extwl
ALPHA_fbeq = _idaapi.ALPHA_fbeq
ALPHA_fbge = _idaapi.ALPHA_fbge
ALPHA_fbgt = _idaapi.ALPHA_fbgt
ALPHA_fble = _idaapi.ALPHA_fble
ALPHA_fblt = _idaapi.ALPHA_fblt
ALPHA_fbne = _idaapi.ALPHA_fbne
ALPHA_fcmoveq = _idaapi.ALPHA_fcmoveq
ALPHA_fcmovge = _idaapi.ALPHA_fcmovge
ALPHA_fcmovgt = _idaapi.ALPHA_fcmovgt
ALPHA_fcmovle = _idaapi.ALPHA_fcmovle
ALPHA_fcmovlt = _idaapi.ALPHA_fcmovlt
ALPHA_fcmovne = _idaapi.ALPHA_fcmovne
ALPHA_fetch = _idaapi.ALPHA_fetch
ALPHA_fetch_m = _idaapi.ALPHA_fetch_m
ALPHA_ftois = _idaapi.ALPHA_ftois
ALPHA_ftoit = _idaapi.ALPHA_ftoit
ALPHA_implver = _idaapi.ALPHA_implver
ALPHA_insbl = _idaapi.ALPHA_insbl
ALPHA_inslh = _idaapi.ALPHA_inslh
ALPHA_insll = _idaapi.ALPHA_insll
ALPHA_insqh = _idaapi.ALPHA_insqh
ALPHA_insql = _idaapi.ALPHA_insql
ALPHA_inswh = _idaapi.ALPHA_inswh
ALPHA_inswl = _idaapi.ALPHA_inswl
ALPHA_itoff = _idaapi.ALPHA_itoff
ALPHA_itofs = _idaapi.ALPHA_itofs
ALPHA_itoft = _idaapi.ALPHA_itoft
ALPHA_jmp = _idaapi.ALPHA_jmp
ALPHA_jsr = _idaapi.ALPHA_jsr
ALPHA_jsr_coroutine = _idaapi.ALPHA_jsr_coroutine
ALPHA_lda = _idaapi.ALPHA_lda
ALPHA_ldah = _idaapi.ALPHA_ldah
ALPHA_ldbu = _idaapi.ALPHA_ldbu
ALPHA_ldwu = _idaapi.ALPHA_ldwu
ALPHA_ldf = _idaapi.ALPHA_ldf
ALPHA_ldg = _idaapi.ALPHA_ldg
ALPHA_ldl = _idaapi.ALPHA_ldl
ALPHA_ldl_l = _idaapi.ALPHA_ldl_l
ALPHA_ldq = _idaapi.ALPHA_ldq
ALPHA_ldq_l = _idaapi.ALPHA_ldq_l
ALPHA_ldq_u = _idaapi.ALPHA_ldq_u
ALPHA_lds = _idaapi.ALPHA_lds
ALPHA_ldt = _idaapi.ALPHA_ldt
ALPHA_maxsb8 = _idaapi.ALPHA_maxsb8
ALPHA_maxsw4 = _idaapi.ALPHA_maxsw4
ALPHA_maxub8 = _idaapi.ALPHA_maxub8
ALPHA_maxuw4 = _idaapi.ALPHA_maxuw4
ALPHA_mb = _idaapi.ALPHA_mb
ALPHA_mf_fpcr = _idaapi.ALPHA_mf_fpcr
ALPHA_minsb8 = _idaapi.ALPHA_minsb8
ALPHA_minsw4 = _idaapi.ALPHA_minsw4
ALPHA_minub8 = _idaapi.ALPHA_minub8
ALPHA_minuw4 = _idaapi.ALPHA_minuw4
ALPHA_mskbl = _idaapi.ALPHA_mskbl
ALPHA_msklh = _idaapi.ALPHA_msklh
ALPHA_mskll = _idaapi.ALPHA_mskll
ALPHA_mskqh = _idaapi.ALPHA_mskqh
ALPHA_mskql = _idaapi.ALPHA_mskql
ALPHA_mskwh = _idaapi.ALPHA_mskwh
ALPHA_mskwl = _idaapi.ALPHA_mskwl
ALPHA_mt_fpcr = _idaapi.ALPHA_mt_fpcr
ALPHA_mulf = _idaapi.ALPHA_mulf
ALPHA_mulg = _idaapi.ALPHA_mulg
ALPHA_mull = _idaapi.ALPHA_mull
ALPHA_mull_v = _idaapi.ALPHA_mull_v
ALPHA_mulq = _idaapi.ALPHA_mulq
ALPHA_mulq_v = _idaapi.ALPHA_mulq_v
ALPHA_muls = _idaapi.ALPHA_muls
ALPHA_mult = _idaapi.ALPHA_mult
ALPHA_ornot = _idaapi.ALPHA_ornot
ALPHA_perr = _idaapi.ALPHA_perr
ALPHA_pklb = _idaapi.ALPHA_pklb
ALPHA_pkwb = _idaapi.ALPHA_pkwb
ALPHA_rc = _idaapi.ALPHA_rc
ALPHA_ret = _idaapi.ALPHA_ret
ALPHA_rpcc = _idaapi.ALPHA_rpcc
ALPHA_rs = _idaapi.ALPHA_rs
ALPHA_s4addl = _idaapi.ALPHA_s4addl
ALPHA_s4addq = _idaapi.ALPHA_s4addq
ALPHA_s4subl = _idaapi.ALPHA_s4subl
ALPHA_s4subq = _idaapi.ALPHA_s4subq
ALPHA_s8addl = _idaapi.ALPHA_s8addl
ALPHA_s8addq = _idaapi.ALPHA_s8addq
ALPHA_s8subl = _idaapi.ALPHA_s8subl
ALPHA_s8subq = _idaapi.ALPHA_s8subq
ALPHA_sextb = _idaapi.ALPHA_sextb
ALPHA_sextw = _idaapi.ALPHA_sextw
ALPHA_sll = _idaapi.ALPHA_sll
ALPHA_sqrtf = _idaapi.ALPHA_sqrtf
ALPHA_sqrtg = _idaapi.ALPHA_sqrtg
ALPHA_sqrts = _idaapi.ALPHA_sqrts
ALPHA_sqrtt = _idaapi.ALPHA_sqrtt
ALPHA_sra = _idaapi.ALPHA_sra
ALPHA_srl = _idaapi.ALPHA_srl
ALPHA_stb = _idaapi.ALPHA_stb
ALPHA_stf = _idaapi.ALPHA_stf
ALPHA_stg = _idaapi.ALPHA_stg
ALPHA_sts = _idaapi.ALPHA_sts
ALPHA_stl = _idaapi.ALPHA_stl
ALPHA_stl_c = _idaapi.ALPHA_stl_c
ALPHA_stq = _idaapi.ALPHA_stq
ALPHA_stq_c = _idaapi.ALPHA_stq_c
ALPHA_stq_u = _idaapi.ALPHA_stq_u
ALPHA_stt = _idaapi.ALPHA_stt
ALPHA_stw = _idaapi.ALPHA_stw
ALPHA_subf = _idaapi.ALPHA_subf
ALPHA_subg = _idaapi.ALPHA_subg
ALPHA_subl = _idaapi.ALPHA_subl
ALPHA_subl_v = _idaapi.ALPHA_subl_v
ALPHA_subq = _idaapi.ALPHA_subq
ALPHA_subq_v = _idaapi.ALPHA_subq_v
ALPHA_subs = _idaapi.ALPHA_subs
ALPHA_subt = _idaapi.ALPHA_subt
ALPHA_trapb = _idaapi.ALPHA_trapb
ALPHA_umulh = _idaapi.ALPHA_umulh
ALPHA_unpkbl = _idaapi.ALPHA_unpkbl
ALPHA_unpkbw = _idaapi.ALPHA_unpkbw
ALPHA_wh64 = _idaapi.ALPHA_wh64
ALPHA_wmb = _idaapi.ALPHA_wmb
ALPHA_xor = _idaapi.ALPHA_xor
ALPHA_zap = _idaapi.ALPHA_zap
ALPHA_zapnot = _idaapi.ALPHA_zapnot
ALPHA_unop = _idaapi.ALPHA_unop
ALPHA_nop = _idaapi.ALPHA_nop
ALPHA_fnop = _idaapi.ALPHA_fnop
ALPHA_clr = _idaapi.ALPHA_clr
ALPHA_fabs = _idaapi.ALPHA_fabs
ALPHA_fclr = _idaapi.ALPHA_fclr
ALPHA_fmov = _idaapi.ALPHA_fmov
ALPHA_fneg = _idaapi.ALPHA_fneg
ALPHA_mov = _idaapi.ALPHA_mov
ALPHA_negl = _idaapi.ALPHA_negl
ALPHA_negl_v = _idaapi.ALPHA_negl_v
ALPHA_negq = _idaapi.ALPHA_negq
ALPHA_negq_v = _idaapi.ALPHA_negq_v
ALPHA_negf = _idaapi.ALPHA_negf
ALPHA_negg = _idaapi.ALPHA_negg
ALPHA_negs = _idaapi.ALPHA_negs
ALPHA_negt = _idaapi.ALPHA_negt
ALPHA_not = _idaapi.ALPHA_not
ALPHA_sextl = _idaapi.ALPHA_sextl
ALPHA_or = _idaapi.ALPHA_or
ALPHA_andnot = _idaapi.ALPHA_andnot
ALPHA_xornot = _idaapi.ALPHA_xornot
ALPHA_br0 = _idaapi.ALPHA_br0
ALPHA_last = _idaapi.ALPHA_last
KR1878_null = _idaapi.KR1878_null
KR1878_mov = _idaapi.KR1878_mov
KR1878_cmp = _idaapi.KR1878_cmp
KR1878_add = _idaapi.KR1878_add
KR1878_sub = _idaapi.KR1878_sub
KR1878_and = _idaapi.KR1878_and
KR1878_or = _idaapi.KR1878_or
KR1878_xor = _idaapi.KR1878_xor
KR1878_movl = _idaapi.KR1878_movl
KR1878_cmpl = _idaapi.KR1878_cmpl
KR1878_addl = _idaapi.KR1878_addl
KR1878_subl = _idaapi.KR1878_subl
KR1878_bic = _idaapi.KR1878_bic
KR1878_bis = _idaapi.KR1878_bis
KR1878_btg = _idaapi.KR1878_btg
KR1878_btt = _idaapi.KR1878_btt
KR1878_swap = _idaapi.KR1878_swap
KR1878_neg = _idaapi.KR1878_neg
KR1878_not = _idaapi.KR1878_not
KR1878_shl = _idaapi.KR1878_shl
KR1878_shr = _idaapi.KR1878_shr
KR1878_shra = _idaapi.KR1878_shra
KR1878_rlc = _idaapi.KR1878_rlc
KR1878_rrc = _idaapi.KR1878_rrc
KR1878_adc = _idaapi.KR1878_adc
KR1878_sbc = _idaapi.KR1878_sbc
KR1878_ldr = _idaapi.KR1878_ldr
KR1878_mtpr = _idaapi.KR1878_mtpr
KR1878_mfpr = _idaapi.KR1878_mfpr
KR1878_push = _idaapi.KR1878_push
KR1878_pop = _idaapi.KR1878_pop
KR1878_sst = _idaapi.KR1878_sst
KR1878_cst = _idaapi.KR1878_cst
KR1878_tof = _idaapi.KR1878_tof
KR1878_tdc = _idaapi.KR1878_tdc
KR1878_jmp = _idaapi.KR1878_jmp
KR1878_jsr = _idaapi.KR1878_jsr
KR1878_jnz = _idaapi.KR1878_jnz
KR1878_jz = _idaapi.KR1878_jz
KR1878_jns = _idaapi.KR1878_jns
KR1878_js = _idaapi.KR1878_js
KR1878_jnc = _idaapi.KR1878_jnc
KR1878_jc = _idaapi.KR1878_jc
KR1878_ijmp = _idaapi.KR1878_ijmp
KR1878_ijsr = _idaapi.KR1878_ijsr
KR1878_rts = _idaapi.KR1878_rts
KR1878_rtsc = _idaapi.KR1878_rtsc
KR1878_rti = _idaapi.KR1878_rti
KR1878_nop = _idaapi.KR1878_nop
KR1878_wait = _idaapi.KR1878_wait
KR1878_stop = _idaapi.KR1878_stop
KR1878_reset = _idaapi.KR1878_reset
KR1878_sksp = _idaapi.KR1878_sksp
KR1878_last = _idaapi.KR1878_last
AD218X_null = _idaapi.AD218X_null
AD218X_amf_01 = _idaapi.AD218X_amf_01
AD218X_amf_03 = _idaapi.AD218X_amf_03
AD218X_amf_02 = _idaapi.AD218X_amf_02
AD218X_amf_04 = _idaapi.AD218X_amf_04
AD218X_amf_05 = _idaapi.AD218X_amf_05
AD218X_amf_06 = _idaapi.AD218X_amf_06
AD218X_amf_07 = _idaapi.AD218X_amf_07
AD218X_amf_08 = _idaapi.AD218X_amf_08
AD218X_amf_09 = _idaapi.AD218X_amf_09
AD218X_amf_0a = _idaapi.AD218X_amf_0a
AD218X_amf_0b = _idaapi.AD218X_amf_0b
AD218X_amf_0c = _idaapi.AD218X_amf_0c
AD218X_amf_0d = _idaapi.AD218X_amf_0d
AD218X_amf_0e = _idaapi.AD218X_amf_0e
AD218X_amf_0f = _idaapi.AD218X_amf_0f
AD218X_amf_10 = _idaapi.AD218X_amf_10
AD218X_amf_11 = _idaapi.AD218X_amf_11
AD218X_amf_12 = _idaapi.AD218X_amf_12
AD218X_amf_13 = _idaapi.AD218X_amf_13
AD218X_amf_14 = _idaapi.AD218X_amf_14
AD218X_amf_15 = _idaapi.AD218X_amf_15
AD218X_amf_16 = _idaapi.AD218X_amf_16
AD218X_amf_17 = _idaapi.AD218X_amf_17
AD218X_amf_18 = _idaapi.AD218X_amf_18
AD218X_amf_19 = _idaapi.AD218X_amf_19
AD218X_amf_1a = _idaapi.AD218X_amf_1a
AD218X_amf_1b = _idaapi.AD218X_amf_1b
AD218X_amf_1c = _idaapi.AD218X_amf_1c
AD218X_amf_1d = _idaapi.AD218X_amf_1d
AD218X_amf_1e = _idaapi.AD218X_amf_1e
AD218X_amf_1f = _idaapi.AD218X_amf_1f
AD218X_shft_0 = _idaapi.AD218X_shft_0
AD218X_shft_1 = _idaapi.AD218X_shft_1
AD218X_shft_2 = _idaapi.AD218X_shft_2
AD218X_shft_3 = _idaapi.AD218X_shft_3
AD218X_shft_4 = _idaapi.AD218X_shft_4
AD218X_shft_5 = _idaapi.AD218X_shft_5
AD218X_shft_6 = _idaapi.AD218X_shft_6
AD218X_shft_7 = _idaapi.AD218X_shft_7
AD218X_shft_8 = _idaapi.AD218X_shft_8
AD218X_shft_9 = _idaapi.AD218X_shft_9
AD218X_shft_a = _idaapi.AD218X_shft_a
AD218X_shft_b = _idaapi.AD218X_shft_b
AD218X_shft_c = _idaapi.AD218X_shft_c
AD218X_shft_d = _idaapi.AD218X_shft_d
AD218X_shft_e = _idaapi.AD218X_shft_e
AD218X_shft_f = _idaapi.AD218X_shft_f
AD218X_alu_00 = _idaapi.AD218X_alu_00
AD218X_alu_01 = _idaapi.AD218X_alu_01
AD218X_alu_02 = _idaapi.AD218X_alu_02
AD218X_alu_03 = _idaapi.AD218X_alu_03
AD218X_alu_04 = _idaapi.AD218X_alu_04
AD218X_alu_05 = _idaapi.AD218X_alu_05
AD218X_alu_06 = _idaapi.AD218X_alu_06
AD218X_alu_07 = _idaapi.AD218X_alu_07
AD218X_alu_08 = _idaapi.AD218X_alu_08
AD218X_alu_09 = _idaapi.AD218X_alu_09
AD218X_alu_0a = _idaapi.AD218X_alu_0a
AD218X_alu_0b = _idaapi.AD218X_alu_0b
AD218X_alu_0c = _idaapi.AD218X_alu_0c
AD218X_alu_0d = _idaapi.AD218X_alu_0d
AD218X_alu_0e = _idaapi.AD218X_alu_0e
AD218X_alu_0f = _idaapi.AD218X_alu_0f
AD218X_alu_10 = _idaapi.AD218X_alu_10
AD218X_alu_11 = _idaapi.AD218X_alu_11
AD218X_alu_12 = _idaapi.AD218X_alu_12
AD218X_alu_13 = _idaapi.AD218X_alu_13
AD218X_alu_14 = _idaapi.AD218X_alu_14
AD218X_alu_15 = _idaapi.AD218X_alu_15
AD218X_alu_16 = _idaapi.AD218X_alu_16
AD218X_alu_17 = _idaapi.AD218X_alu_17
AD218X_alu_18 = _idaapi.AD218X_alu_18
AD218X_alu_19 = _idaapi.AD218X_alu_19
AD218X_alu_1a = _idaapi.AD218X_alu_1a
AD218X_alu_1b = _idaapi.AD218X_alu_1b
AD218X_alu_1c = _idaapi.AD218X_alu_1c
AD218X_alu_1d = _idaapi.AD218X_alu_1d
AD218X_mac_0 = _idaapi.AD218X_mac_0
AD218X_mac_1 = _idaapi.AD218X_mac_1
AD218X_mac_2 = _idaapi.AD218X_mac_2
AD218X_mac_3 = _idaapi.AD218X_mac_3
AD218X_mac_4 = _idaapi.AD218X_mac_4
AD218X_mac_5 = _idaapi.AD218X_mac_5
AD218X_mac_6 = _idaapi.AD218X_mac_6
AD218X_mac_7 = _idaapi.AD218X_mac_7
AD218X_mac_8 = _idaapi.AD218X_mac_8
AD218X_mac_9 = _idaapi.AD218X_mac_9
AD218X_mac_a = _idaapi.AD218X_mac_a
AD218X_mac_b = _idaapi.AD218X_mac_b
AD218X_amf = _idaapi.AD218X_amf
AD218X_shft = _idaapi.AD218X_shft
AD218X_shifter_0 = _idaapi.AD218X_shifter_0
AD218X_shifter_1 = _idaapi.AD218X_shifter_1
AD218X_shifter_2 = _idaapi.AD218X_shifter_2
AD218X_shifter_3 = _idaapi.AD218X_shifter_3
AD218X_shifter_4 = _idaapi.AD218X_shifter_4
AD218X_shifter_5 = _idaapi.AD218X_shifter_5
AD218X_shifter_6 = _idaapi.AD218X_shifter_6
AD218X_shifter_7 = _idaapi.AD218X_shifter_7
AD218X_move_0 = _idaapi.AD218X_move_0
AD218X_move_1 = _idaapi.AD218X_move_1
AD218X_move_2 = _idaapi.AD218X_move_2
AD218X_move_3 = _idaapi.AD218X_move_3
AD218X_move_4 = _idaapi.AD218X_move_4
AD218X_move_5 = _idaapi.AD218X_move_5
AD218X_move_6 = _idaapi.AD218X_move_6
AD218X_move_7 = _idaapi.AD218X_move_7
AD218X_move_8 = _idaapi.AD218X_move_8
AD218X_move_9 = _idaapi.AD218X_move_9
AD218X_move_a = _idaapi.AD218X_move_a
AD218X_move_b = _idaapi.AD218X_move_b
AD218X_jump = _idaapi.AD218X_jump
AD218X_jump_1 = _idaapi.AD218X_jump_1
AD218X_jump_2 = _idaapi.AD218X_jump_2
AD218X_jump_3 = _idaapi.AD218X_jump_3
AD218X_jump_4 = _idaapi.AD218X_jump_4
AD218X_call = _idaapi.AD218X_call
AD218X_call_1 = _idaapi.AD218X_call_1
AD218X_call_2 = _idaapi.AD218X_call_2
AD218X_rts = _idaapi.AD218X_rts
AD218X_rts_cond = _idaapi.AD218X_rts_cond
AD218X_rti = _idaapi.AD218X_rti
AD218X_rti_cond = _idaapi.AD218X_rti_cond
AD218X_nop = _idaapi.AD218X_nop
AD218X_do = _idaapi.AD218X_do
AD218X_idle = _idaapi.AD218X_idle
AD218X_idle_1 = _idaapi.AD218X_idle_1
AD218X_flag_out = _idaapi.AD218X_flag_out
AD218X_stack_ctl = _idaapi.AD218X_stack_ctl
AD218X_mode_ctl = _idaapi.AD218X_mode_ctl
AD218X_tops_w = _idaapi.AD218X_tops_w
AD218X_tops_r = _idaapi.AD218X_tops_r
AD218X_ints_dis = _idaapi.AD218X_ints_dis
AD218X_ints_ena = _idaapi.AD218X_ints_ena
AD218X_modify = _idaapi.AD218X_modify
AD218X_double_move = _idaapi.AD218X_double_move
AD218X_amf_move_0 = _idaapi.AD218X_amf_move_0
AD218X_amf_move_1 = _idaapi.AD218X_amf_move_1
AD218X_amf_move_2 = _idaapi.AD218X_amf_move_2
AD218X_amf_move_3 = _idaapi.AD218X_amf_move_3
AD218X_amf_move_4 = _idaapi.AD218X_amf_move_4
AD218X_amf_move_5 = _idaapi.AD218X_amf_move_5
AD218X_amf_move_6 = _idaapi.AD218X_amf_move_6
AD218X_amf_move_7 = _idaapi.AD218X_amf_move_7
AD218X_amf_move_8 = _idaapi.AD218X_amf_move_8
AD218X_amf_move_9 = _idaapi.AD218X_amf_move_9
AD218X_amf_move_a = _idaapi.AD218X_amf_move_a
AD218X_last = _idaapi.AD218X_last
OAK_Dsp_null = _idaapi.OAK_Dsp_null
OAK_Dsp_proc = _idaapi.OAK_Dsp_proc
OAK_Dsp_or = _idaapi.OAK_Dsp_or
OAK_Dsp_and = _idaapi.OAK_Dsp_and
OAK_Dsp_xor = _idaapi.OAK_Dsp_xor
OAK_Dsp_add = _idaapi.OAK_Dsp_add
OAK_Dsp_alm_tst0 = _idaapi.OAK_Dsp_alm_tst0
OAK_Dsp_alm_tst1 = _idaapi.OAK_Dsp_alm_tst1
OAK_Dsp_cmp = _idaapi.OAK_Dsp_cmp
OAK_Dsp_sub = _idaapi.OAK_Dsp_sub
OAK_Dsp_alm_msu = _idaapi.OAK_Dsp_alm_msu
OAK_Dsp_addh = _idaapi.OAK_Dsp_addh
OAK_Dsp_addl = _idaapi.OAK_Dsp_addl
OAK_Dsp_subh = _idaapi.OAK_Dsp_subh
OAK_Dsp_subl = _idaapi.OAK_Dsp_subl
OAK_Dsp_sqr = _idaapi.OAK_Dsp_sqr
OAK_Dsp_sqra = _idaapi.OAK_Dsp_sqra
OAK_Dsp_cmpu = _idaapi.OAK_Dsp_cmpu
OAK_Dsp_shr = _idaapi.OAK_Dsp_shr
OAK_Dsp_shr4 = _idaapi.OAK_Dsp_shr4
OAK_Dsp_shl = _idaapi.OAK_Dsp_shl
OAK_Dsp_shl4 = _idaapi.OAK_Dsp_shl4
OAK_Dsp_ror = _idaapi.OAK_Dsp_ror
OAK_Dsp_rol = _idaapi.OAK_Dsp_rol
OAK_Dsp_clr = _idaapi.OAK_Dsp_clr
OAK_Dsp_mod_reserved = _idaapi.OAK_Dsp_mod_reserved
OAK_Dsp_not = _idaapi.OAK_Dsp_not
OAK_Dsp_neg = _idaapi.OAK_Dsp_neg
OAK_Dsp_rnd = _idaapi.OAK_Dsp_rnd
OAK_Dsp_pacr = _idaapi.OAK_Dsp_pacr
OAK_Dsp_clrr = _idaapi.OAK_Dsp_clrr
OAK_Dsp_inc = _idaapi.OAK_Dsp_inc
OAK_Dsp_dec = _idaapi.OAK_Dsp_dec
OAK_Dsp_copy = _idaapi.OAK_Dsp_copy
OAK_Dsp_norm = _idaapi.OAK_Dsp_norm
OAK_Dsp_divs = _idaapi.OAK_Dsp_divs
OAK_Dsp_set = _idaapi.OAK_Dsp_set
OAK_Dsp_rst = _idaapi.OAK_Dsp_rst
OAK_Dsp_chng = _idaapi.OAK_Dsp_chng
OAK_Dsp_addv = _idaapi.OAK_Dsp_addv
OAK_Dsp_alb_tst0 = _idaapi.OAK_Dsp_alb_tst0
OAK_Dsp_alb_tst1 = _idaapi.OAK_Dsp_alb_tst1
OAK_Dsp_cmpv = _idaapi.OAK_Dsp_cmpv
OAK_Dsp_subv = _idaapi.OAK_Dsp_subv
OAK_Dsp_maxd = _idaapi.OAK_Dsp_maxd
OAK_Dsp_max = _idaapi.OAK_Dsp_max
OAK_Dsp_min = _idaapi.OAK_Dsp_min
OAK_Dsp_lim = _idaapi.OAK_Dsp_lim
OAK_Dsp_mpy = _idaapi.OAK_Dsp_mpy
OAK_Dsp_mpysu = _idaapi.OAK_Dsp_mpysu
OAK_Dsp_mac = _idaapi.OAK_Dsp_mac
OAK_Dsp_macus = _idaapi.OAK_Dsp_macus
OAK_Dsp_maa = _idaapi.OAK_Dsp_maa
OAK_Dsp_macuu = _idaapi.OAK_Dsp_macuu
OAK_Dsp_macsu = _idaapi.OAK_Dsp_macsu
OAK_Dsp_maasu = _idaapi.OAK_Dsp_maasu
OAK_Dsp_mpyi = _idaapi.OAK_Dsp_mpyi
OAK_Dsp_msu = _idaapi.OAK_Dsp_msu
OAK_Dsp_tstb = _idaapi.OAK_Dsp_tstb
OAK_Dsp_shfc = _idaapi.OAK_Dsp_shfc
OAK_Dsp_shfi = _idaapi.OAK_Dsp_shfi
OAK_Dsp_exp = _idaapi.OAK_Dsp_exp
OAK_Dsp_mov = _idaapi.OAK_Dsp_mov
OAK_Dsp_movp = _idaapi.OAK_Dsp_movp
OAK_Dsp_movs = _idaapi.OAK_Dsp_movs
OAK_Dsp_movsi = _idaapi.OAK_Dsp_movsi
OAK_Dsp_movr = _idaapi.OAK_Dsp_movr
OAK_Dsp_movd = _idaapi.OAK_Dsp_movd
OAK_Dsp_push = _idaapi.OAK_Dsp_push
OAK_Dsp_pop = _idaapi.OAK_Dsp_pop
OAK_Dsp_swap = _idaapi.OAK_Dsp_swap
OAK_Dsp_banke = _idaapi.OAK_Dsp_banke
OAK_Dsp_rep = _idaapi.OAK_Dsp_rep
OAK_Dsp_bkrep = _idaapi.OAK_Dsp_bkrep
OAK_Dsp_break = _idaapi.OAK_Dsp_break
OAK_Dsp_br = _idaapi.OAK_Dsp_br
OAK_Dsp_brr = _idaapi.OAK_Dsp_brr
OAK_Dsp_br_u = _idaapi.OAK_Dsp_br_u
OAK_Dsp_brr_u = _idaapi.OAK_Dsp_brr_u
OAK_Dsp_call = _idaapi.OAK_Dsp_call
OAK_Dsp_callr = _idaapi.OAK_Dsp_callr
OAK_Dsp_calla = _idaapi.OAK_Dsp_calla
OAK_Dsp_ret = _idaapi.OAK_Dsp_ret
OAK_Dsp_ret_u = _idaapi.OAK_Dsp_ret_u
OAK_Dsp_retd = _idaapi.OAK_Dsp_retd
OAK_Dsp_reti = _idaapi.OAK_Dsp_reti
OAK_Dsp_reti_u = _idaapi.OAK_Dsp_reti_u
OAK_Dsp_retid = _idaapi.OAK_Dsp_retid
OAK_Dsp_rets = _idaapi.OAK_Dsp_rets
OAK_Dsp_cntx = _idaapi.OAK_Dsp_cntx
OAK_Dsp_nop = _idaapi.OAK_Dsp_nop
OAK_Dsp_modr = _idaapi.OAK_Dsp_modr
OAK_Dsp_dint = _idaapi.OAK_Dsp_dint
OAK_Dsp_eint = _idaapi.OAK_Dsp_eint
OAK_Dsp_trap = _idaapi.OAK_Dsp_trap
OAK_Dsp_lpg = _idaapi.OAK_Dsp_lpg
OAK_Dsp_load = _idaapi.OAK_Dsp_load
OAK_Dsp_mov_eu = _idaapi.OAK_Dsp_mov_eu
OAK_Dsp_last = _idaapi.OAK_Dsp_last
T900_null = _idaapi.T900_null
T900_ld = _idaapi.T900_ld
T900_ldw = _idaapi.T900_ldw
T900_push = _idaapi.T900_push
T900_pushw = _idaapi.T900_pushw
T900_pop = _idaapi.T900_pop
T900_popw = _idaapi.T900_popw
T900_lda = _idaapi.T900_lda
T900_ldar = _idaapi.T900_ldar
T900_ex = _idaapi.T900_ex
T900_mirr = _idaapi.T900_mirr
T900_ldi = _idaapi.T900_ldi
T900_ldiw = _idaapi.T900_ldiw
T900_ldir = _idaapi.T900_ldir
T900_ldirw = _idaapi.T900_ldirw
T900_ldd = _idaapi.T900_ldd
T900_lddw = _idaapi.T900_lddw
T900_lddr = _idaapi.T900_lddr
T900_lddrw = _idaapi.T900_lddrw
T900_cpi = _idaapi.T900_cpi
T900_cpir = _idaapi.T900_cpir
T900_cpd = _idaapi.T900_cpd
T900_cpdr = _idaapi.T900_cpdr
T900_add = _idaapi.T900_add
T900_addw = _idaapi.T900_addw
T900_adc = _idaapi.T900_adc
T900_adcw = _idaapi.T900_adcw
T900_sub = _idaapi.T900_sub
T900_subw = _idaapi.T900_subw
T900_sbc = _idaapi.T900_sbc
T900_sbcw = _idaapi.T900_sbcw
T900_cp = _idaapi.T900_cp
T900_cpw = _idaapi.T900_cpw
T900_inc = _idaapi.T900_inc
T900_incw = _idaapi.T900_incw
T900_dec = _idaapi.T900_dec
T900_decw = _idaapi.T900_decw
T900_neg = _idaapi.T900_neg
T900_extz = _idaapi.T900_extz
T900_exts = _idaapi.T900_exts
T900_daa = _idaapi.T900_daa
T900_paa = _idaapi.T900_paa
T900_cpl = _idaapi.T900_cpl
T900_mul = _idaapi.T900_mul
T900_muls = _idaapi.T900_muls
T900_div = _idaapi.T900_div
T900_divs = _idaapi.T900_divs
T900_mula = _idaapi.T900_mula
T900_minc1 = _idaapi.T900_minc1
T900_minc2 = _idaapi.T900_minc2
T900_minc4 = _idaapi.T900_minc4
T900_mdec1 = _idaapi.T900_mdec1
T900_mdec2 = _idaapi.T900_mdec2
T900_mdec4 = _idaapi.T900_mdec4
T900_and = _idaapi.T900_and
T900_andw = _idaapi.T900_andw
T900_or = _idaapi.T900_or
T900_orw = _idaapi.T900_orw
T900_xor = _idaapi.T900_xor
T900_xorw = _idaapi.T900_xorw
T900_ldcf = _idaapi.T900_ldcf
T900_stcf = _idaapi.T900_stcf
T900_andcf = _idaapi.T900_andcf
T900_orcf = _idaapi.T900_orcf
T900_xorcf = _idaapi.T900_xorcf
T900_rcf = _idaapi.T900_rcf
T900_scf = _idaapi.T900_scf
T900_ccf = _idaapi.T900_ccf
T900_zcf = _idaapi.T900_zcf
T900_bit = _idaapi.T900_bit
T900_res = _idaapi.T900_res
T900_set = _idaapi.T900_set
T900_chg = _idaapi.T900_chg
T900_tset = _idaapi.T900_tset
T900_bs1f = _idaapi.T900_bs1f
T900_bs1b = _idaapi.T900_bs1b
T900_nop = _idaapi.T900_nop
T900_ei = _idaapi.T900_ei
T900_di = _idaapi.T900_di
T900_swi = _idaapi.T900_swi
T900_halt = _idaapi.T900_halt
T900_ldc = _idaapi.T900_ldc
T900_ldx = _idaapi.T900_ldx
T900_link = _idaapi.T900_link
T900_unlk = _idaapi.T900_unlk
T900_ldf = _idaapi.T900_ldf
T900_incf = _idaapi.T900_incf
T900_decf = _idaapi.T900_decf
T900_scc = _idaapi.T900_scc
T900_rlc = _idaapi.T900_rlc
T900_rlc_mem = _idaapi.T900_rlc_mem
T900_rlcw_mem = _idaapi.T900_rlcw_mem
T900_rrc = _idaapi.T900_rrc
T900_rrc_mem = _idaapi.T900_rrc_mem
T900_rrcw_mem = _idaapi.T900_rrcw_mem
T900_rl = _idaapi.T900_rl
T900_rl_mem = _idaapi.T900_rl_mem
T900_rlw_mem = _idaapi.T900_rlw_mem
T900_rr = _idaapi.T900_rr
T900_rr_mem = _idaapi.T900_rr_mem
T900_rrw_mem = _idaapi.T900_rrw_mem
T900_sla = _idaapi.T900_sla
T900_sla_mem = _idaapi.T900_sla_mem
T900_slaw_mem = _idaapi.T900_slaw_mem
T900_sra = _idaapi.T900_sra
T900_sra_mem = _idaapi.T900_sra_mem
T900_sraw_mem = _idaapi.T900_sraw_mem
T900_sll = _idaapi.T900_sll
T900_sll_mem = _idaapi.T900_sll_mem
T900_sllw_mem = _idaapi.T900_sllw_mem
T900_srl = _idaapi.T900_srl
T900_srl_mem = _idaapi.T900_srl_mem
T900_srlw_mem = _idaapi.T900_srlw_mem
T900_rld = _idaapi.T900_rld
T900_rrd = _idaapi.T900_rrd
T900_jp = _idaapi.T900_jp
T900_jp_cond = _idaapi.T900_jp_cond
T900_jr = _idaapi.T900_jr
T900_jr_cond = _idaapi.T900_jr_cond
T900_jrl = _idaapi.T900_jrl
T900_jrl_cond = _idaapi.T900_jrl_cond
T900_call = _idaapi.T900_call
T900_calr = _idaapi.T900_calr
T900_djnz = _idaapi.T900_djnz
T900_ret = _idaapi.T900_ret
T900_ret_cond = _idaapi.T900_ret_cond
T900_retd = _idaapi.T900_retd
T900_reti = _idaapi.T900_reti
T900_max = _idaapi.T900_max
T900_normal = _idaapi.T900_normal
T900_last = _idaapi.T900_last
C39_null = _idaapi.C39_null
C39_adc = _idaapi.C39_adc
C39_add = _idaapi.C39_add
C39_anc = _idaapi.C39_anc
C39_and = _idaapi.C39_and
C39_ane = _idaapi.C39_ane
C39_arr = _idaapi.C39_arr
C39_asl = _idaapi.C39_asl
C39_asr = _idaapi.C39_asr
C39_bar = _idaapi.C39_bar
C39_bas = _idaapi.C39_bas
C39_bbr = _idaapi.C39_bbr
C39_bbs = _idaapi.C39_bbs
C39_bcc = _idaapi.C39_bcc
C39_bcs = _idaapi.C39_bcs
C39_beq = _idaapi.C39_beq
C39_bit = _idaapi.C39_bit
C39_bmi = _idaapi.C39_bmi
C39_bne = _idaapi.C39_bne
C39_bpl = _idaapi.C39_bpl
C39_bra = _idaapi.C39_bra
C39_brk = _idaapi.C39_brk
C39_bvc = _idaapi.C39_bvc
C39_bvs = _idaapi.C39_bvs
C39_clc = _idaapi.C39_clc
C39_cld = _idaapi.C39_cld
C39_cli = _idaapi.C39_cli
C39_clv = _idaapi.C39_clv
C39_clw = _idaapi.C39_clw
C39_cmp = _idaapi.C39_cmp
C39_cpx = _idaapi.C39_cpx
C39_cpy = _idaapi.C39_cpy
C39_dcp = _idaapi.C39_dcp
C39_dec = _idaapi.C39_dec
C39_dex = _idaapi.C39_dex
C39_dey = _idaapi.C39_dey
C39_eor = _idaapi.C39_eor
C39_exc = _idaapi.C39_exc
C39_inc = _idaapi.C39_inc
C39_ini = _idaapi.C39_ini
C39_inx = _idaapi.C39_inx
C39_iny = _idaapi.C39_iny
C39_isb = _idaapi.C39_isb
C39_jmp = _idaapi.C39_jmp
C39_jpi = _idaapi.C39_jpi
C39_jsb = _idaapi.C39_jsb
C39_jsr = _idaapi.C39_jsr
C39_lab = _idaapi.C39_lab
C39_lae = _idaapi.C39_lae
C39_lai = _idaapi.C39_lai
C39_lan = _idaapi.C39_lan
C39_lax = _idaapi.C39_lax
C39_lda = _idaapi.C39_lda
C39_ldx = _idaapi.C39_ldx
C39_ldy = _idaapi.C39_ldy
C39_lii = _idaapi.C39_lii
C39_lsr = _idaapi.C39_lsr
C39_lxa = _idaapi.C39_lxa
C39_mpa = _idaapi.C39_mpa
C39_mpy = _idaapi.C39_mpy
C39_neg = _idaapi.C39_neg
C39_nop = _idaapi.C39_nop
C39_nxt = _idaapi.C39_nxt
C39_ora = _idaapi.C39_ora
C39_pha = _idaapi.C39_pha
C39_phi = _idaapi.C39_phi
C39_php = _idaapi.C39_php
C39_phw = _idaapi.C39_phw
C39_phx = _idaapi.C39_phx
C39_phy = _idaapi.C39_phy
C39_pia = _idaapi.C39_pia
C39_pla = _idaapi.C39_pla
C39_pli = _idaapi.C39_pli
C39_plp = _idaapi.C39_plp
C39_plw = _idaapi.C39_plw
C39_plx = _idaapi.C39_plx
C39_ply = _idaapi.C39_ply
C39_psh = _idaapi.C39_psh
C39_pul = _idaapi.C39_pul
C39_rba = _idaapi.C39_rba
C39_rla = _idaapi.C39_rla
C39_rmb = _idaapi.C39_rmb
C39_rnd = _idaapi.C39_rnd
C39_rol = _idaapi.C39_rol
C39_ror = _idaapi.C39_ror
C39_rra = _idaapi.C39_rra
C39_rti = _idaapi.C39_rti
C39_rts = _idaapi.C39_rts
C39_sax = _idaapi.C39_sax
C39_sba = _idaapi.C39_sba
C39_sbc = _idaapi.C39_sbc
C39_sbx = _idaapi.C39_sbx
C39_sec = _idaapi.C39_sec
C39_sed = _idaapi.C39_sed
C39_sei = _idaapi.C39_sei
C39_sha = _idaapi.C39_sha
C39_shs = _idaapi.C39_shs
C39_shx = _idaapi.C39_shx
C39_shy = _idaapi.C39_shy
C39_slo = _idaapi.C39_slo
C39_smb = _idaapi.C39_smb
C39_sre = _idaapi.C39_sre
C39_sta = _idaapi.C39_sta
C39_sti = _idaapi.C39_sti
C39_stx = _idaapi.C39_stx
C39_sty = _idaapi.C39_sty
C39_tax = _idaapi.C39_tax
C39_tay = _idaapi.C39_tay
C39_taw = _idaapi.C39_taw
C39_tip = _idaapi.C39_tip
C39_tsx = _idaapi.C39_tsx
C39_twa = _idaapi.C39_twa
C39_txa = _idaapi.C39_txa
C39_txs = _idaapi.C39_txs
C39_tya = _idaapi.C39_tya
C39_last = _idaapi.C39_last
CR16_null = _idaapi.CR16_null
CR16_addb = _idaapi.CR16_addb
CR16_addw = _idaapi.CR16_addw
CR16_addub = _idaapi.CR16_addub
CR16_adduw = _idaapi.CR16_adduw
CR16_addcb = _idaapi.CR16_addcb
CR16_addcw = _idaapi.CR16_addcw
CR16_andb = _idaapi.CR16_andb
CR16_andw = _idaapi.CR16_andw
CR16_ashub = _idaapi.CR16_ashub
CR16_ashuw = _idaapi.CR16_ashuw
CR16_beq = _idaapi.CR16_beq
CR16_bne = _idaapi.CR16_bne
CR16_bcs = _idaapi.CR16_bcs
CR16_bcc = _idaapi.CR16_bcc
CR16_bhi = _idaapi.CR16_bhi
CR16_bls = _idaapi.CR16_bls
CR16_bgt = _idaapi.CR16_bgt
CR16_ble = _idaapi.CR16_ble
CR16_bfs = _idaapi.CR16_bfs
CR16_bfc = _idaapi.CR16_bfc
CR16_blo = _idaapi.CR16_blo
CR16_bhs = _idaapi.CR16_bhs
CR16_blt = _idaapi.CR16_blt
CR16_bge = _idaapi.CR16_bge
CR16_br = _idaapi.CR16_br
CR16_bal = _idaapi.CR16_bal
CR16_cmpb = _idaapi.CR16_cmpb
CR16_cmpw = _idaapi.CR16_cmpw
CR16_beq1b = _idaapi.CR16_beq1b
CR16_beq1w = _idaapi.CR16_beq1w
CR16_beq0b = _idaapi.CR16_beq0b
CR16_beq0w = _idaapi.CR16_beq0w
CR16_bne1b = _idaapi.CR16_bne1b
CR16_bne1w = _idaapi.CR16_bne1w
CR16_bne0b = _idaapi.CR16_bne0b
CR16_bne0w = _idaapi.CR16_bne0w
CR16_di = _idaapi.CR16_di
CR16_ei = _idaapi.CR16_ei
CR16_excp = _idaapi.CR16_excp
CR16_jeq = _idaapi.CR16_jeq
CR16_jne = _idaapi.CR16_jne
CR16_jcs = _idaapi.CR16_jcs
CR16_jcc = _idaapi.CR16_jcc
CR16_jhi = _idaapi.CR16_jhi
CR16_jls = _idaapi.CR16_jls
CR16_jgt = _idaapi.CR16_jgt
CR16_jle = _idaapi.CR16_jle
CR16_jfs = _idaapi.CR16_jfs
CR16_jfc = _idaapi.CR16_jfc
CR16_jlo = _idaapi.CR16_jlo
CR16_jhs = _idaapi.CR16_jhs
CR16_jlt = _idaapi.CR16_jlt
CR16_jge = _idaapi.CR16_jge
CR16_jump = _idaapi.CR16_jump
CR16_jal = _idaapi.CR16_jal
CR16_loadb = _idaapi.CR16_loadb
CR16_loadw = _idaapi.CR16_loadw
CR16_loadm = _idaapi.CR16_loadm
CR16_lpr = _idaapi.CR16_lpr
CR16_lshb = _idaapi.CR16_lshb
CR16_lshw = _idaapi.CR16_lshw
CR16_movb = _idaapi.CR16_movb
CR16_movw = _idaapi.CR16_movw
CR16_movxb = _idaapi.CR16_movxb
CR16_movzb = _idaapi.CR16_movzb
CR16_movd = _idaapi.CR16_movd
CR16_mulb = _idaapi.CR16_mulb
CR16_mulw = _idaapi.CR16_mulw
CR16_mulsb = _idaapi.CR16_mulsb
CR16_mulsw = _idaapi.CR16_mulsw
CR16_muluw = _idaapi.CR16_muluw
CR16_nop = _idaapi.CR16_nop
CR16_orb = _idaapi.CR16_orb
CR16_orw = _idaapi.CR16_orw
CR16_push = _idaapi.CR16_push
CR16_pop = _idaapi.CR16_pop
CR16_popret = _idaapi.CR16_popret
CR16_retx = _idaapi.CR16_retx
CR16_seq = _idaapi.CR16_seq
CR16_sne = _idaapi.CR16_sne
CR16_scs = _idaapi.CR16_scs
CR16_scc = _idaapi.CR16_scc
CR16_shi = _idaapi.CR16_shi
CR16_sls = _idaapi.CR16_sls
CR16_sgt = _idaapi.CR16_sgt
CR16_sle = _idaapi.CR16_sle
CR16_sfs = _idaapi.CR16_sfs
CR16_sfc = _idaapi.CR16_sfc
CR16_slo = _idaapi.CR16_slo
CR16_shs = _idaapi.CR16_shs
CR16_slt = _idaapi.CR16_slt
CR16_sge = _idaapi.CR16_sge
CR16_spr = _idaapi.CR16_spr
CR16_storb = _idaapi.CR16_storb
CR16_storw = _idaapi.CR16_storw
CR16_storm = _idaapi.CR16_storm
CR16_subb = _idaapi.CR16_subb
CR16_subw = _idaapi.CR16_subw
CR16_subcb = _idaapi.CR16_subcb
CR16_subcw = _idaapi.CR16_subcw
CR16_tbit = _idaapi.CR16_tbit
CR16_tbitb = _idaapi.CR16_tbitb
CR16_tbitw = _idaapi.CR16_tbitw
CR16_sbitb = _idaapi.CR16_sbitb
CR16_sbitw = _idaapi.CR16_sbitw
CR16_cbitb = _idaapi.CR16_cbitb
CR16_cbitw = _idaapi.CR16_cbitw
CR16_wait = _idaapi.CR16_wait
CR16_eiwait = _idaapi.CR16_eiwait
CR16_xorb = _idaapi.CR16_xorb
CR16_xorw = _idaapi.CR16_xorw
CR16_last = _idaapi.CR16_last
mn102_null = _idaapi.mn102_null
mn102_add = _idaapi.mn102_add
mn102_addc = _idaapi.mn102_addc
mn102_addnf = _idaapi.mn102_addnf
mn102_and = _idaapi.mn102_and
mn102_asr = _idaapi.mn102_asr
mn102_bcc = _idaapi.mn102_bcc
mn102_bccx = _idaapi.mn102_bccx
mn102_bclr = _idaapi.mn102_bclr
mn102_bcs = _idaapi.mn102_bcs
mn102_bcsx = _idaapi.mn102_bcsx
mn102_beq = _idaapi.mn102_beq
mn102_beqx = _idaapi.mn102_beqx
mn102_bge = _idaapi.mn102_bge
mn102_bgex = _idaapi.mn102_bgex
mn102_bgt = _idaapi.mn102_bgt
mn102_bgtx = _idaapi.mn102_bgtx
mn102_bhi = _idaapi.mn102_bhi
mn102_bhix = _idaapi.mn102_bhix
mn102_ble = _idaapi.mn102_ble
mn102_blex = _idaapi.mn102_blex
mn102_bls = _idaapi.mn102_bls
mn102_blsx = _idaapi.mn102_blsx
mn102_blt = _idaapi.mn102_blt
mn102_bltx = _idaapi.mn102_bltx
mn102_bnc = _idaapi.mn102_bnc
mn102_bncx = _idaapi.mn102_bncx
mn102_bne = _idaapi.mn102_bne
mn102_bnex = _idaapi.mn102_bnex
mn102_bns = _idaapi.mn102_bns
mn102_bnsx = _idaapi.mn102_bnsx
mn102_bra = _idaapi.mn102_bra
mn102_bset = _idaapi.mn102_bset
mn102_btst = _idaapi.mn102_btst
mn102_bvc = _idaapi.mn102_bvc
mn102_bvcx = _idaapi.mn102_bvcx
mn102_bvs = _idaapi.mn102_bvs
mn102_bvsx = _idaapi.mn102_bvsx
mn102_cmp = _idaapi.mn102_cmp
mn102_divu = _idaapi.mn102_divu
mn102_ext = _idaapi.mn102_ext
mn102_extx = _idaapi.mn102_extx
mn102_extxb = _idaapi.mn102_extxb
mn102_extxbu = _idaapi.mn102_extxbu
mn102_extxu = _idaapi.mn102_extxu
mn102_jmp = _idaapi.mn102_jmp
mn102_jsr = _idaapi.mn102_jsr
mn102_lsr = _idaapi.mn102_lsr
mn102_mov = _idaapi.mn102_mov
mn102_movb = _idaapi.mn102_movb
mn102_movbu = _idaapi.mn102_movbu
mn102_movx = _idaapi.mn102_movx
mn102_mul = _idaapi.mn102_mul
mn102_mulq = _idaapi.mn102_mulq
mn102_mulqh = _idaapi.mn102_mulqh
mn102_mulql = _idaapi.mn102_mulql
mn102_mulu = _idaapi.mn102_mulu
mn102_nop = _idaapi.mn102_nop
mn102_not = _idaapi.mn102_not
mn102_or = _idaapi.mn102_or
mn102_pxst = _idaapi.mn102_pxst
mn102_rol = _idaapi.mn102_rol
mn102_ror = _idaapi.mn102_ror
mn102_rti = _idaapi.mn102_rti
mn102_rts = _idaapi.mn102_rts
mn102_sub = _idaapi.mn102_sub
mn102_subc = _idaapi.mn102_subc
mn102_tbnz = _idaapi.mn102_tbnz
mn102_tbz = _idaapi.mn102_tbz
mn102_xor = _idaapi.mn102_xor
mn102_last = _idaapi.mn102_last
PPC_null = _idaapi.PPC_null
PPC_add = _idaapi.PPC_add
PPC_addc = _idaapi.PPC_addc
PPC_adde = _idaapi.PPC_adde
PPC_addi = _idaapi.PPC_addi
PPC_addic = _idaapi.PPC_addic
PPC_addis = _idaapi.PPC_addis
PPC_addme = _idaapi.PPC_addme
PPC_addze = _idaapi.PPC_addze
PPC_and = _idaapi.PPC_and
PPC_andc = _idaapi.PPC_andc
PPC_andi = _idaapi.PPC_andi
PPC_andis = _idaapi.PPC_andis
PPC_b = _idaapi.PPC_b
PPC_bc = _idaapi.PPC_bc
PPC_bcctr = _idaapi.PPC_bcctr
PPC_bclr = _idaapi.PPC_bclr
PPC_cmp = _idaapi.PPC_cmp
PPC_cmpi = _idaapi.PPC_cmpi
PPC_cmpl = _idaapi.PPC_cmpl
PPC_cmpli = _idaapi.PPC_cmpli
PPC_cntlzd = _idaapi.PPC_cntlzd
PPC_cntlzw = _idaapi.PPC_cntlzw
PPC_crand = _idaapi.PPC_crand
PPC_crandc = _idaapi.PPC_crandc
PPC_creqv = _idaapi.PPC_creqv
PPC_crnand = _idaapi.PPC_crnand
PPC_crnor = _idaapi.PPC_crnor
PPC_cror = _idaapi.PPC_cror
PPC_crorc = _idaapi.PPC_crorc
PPC_crxor = _idaapi.PPC_crxor
PPC_dcba = _idaapi.PPC_dcba
PPC_dcbf = _idaapi.PPC_dcbf
PPC_dcbi = _idaapi.PPC_dcbi
PPC_dcbst = _idaapi.PPC_dcbst
PPC_dcbt = _idaapi.PPC_dcbt
PPC_dcbtst = _idaapi.PPC_dcbtst
PPC_dcbz = _idaapi.PPC_dcbz
PPC_divd = _idaapi.PPC_divd
PPC_divdu = _idaapi.PPC_divdu
PPC_divw = _idaapi.PPC_divw
PPC_divwu = _idaapi.PPC_divwu
PPC_eciwx = _idaapi.PPC_eciwx
PPC_ecowx = _idaapi.PPC_ecowx
PPC_eieio = _idaapi.PPC_eieio
PPC_eqv = _idaapi.PPC_eqv
PPC_extsb = _idaapi.PPC_extsb
PPC_extsh = _idaapi.PPC_extsh
PPC_extsw = _idaapi.PPC_extsw
PPC_fabs = _idaapi.PPC_fabs
PPC_fadd = _idaapi.PPC_fadd
PPC_fadds = _idaapi.PPC_fadds
PPC_fcfid = _idaapi.PPC_fcfid
PPC_fcmpo = _idaapi.PPC_fcmpo
PPC_fcmpu = _idaapi.PPC_fcmpu
PPC_fctid = _idaapi.PPC_fctid
PPC_fctidz = _idaapi.PPC_fctidz
PPC_fctiw = _idaapi.PPC_fctiw
PPC_fctiwz = _idaapi.PPC_fctiwz
PPC_fdiv = _idaapi.PPC_fdiv
PPC_fdivs = _idaapi.PPC_fdivs
PPC_fmadd = _idaapi.PPC_fmadd
PPC_fmadds = _idaapi.PPC_fmadds
PPC_fmr = _idaapi.PPC_fmr
PPC_fmsub = _idaapi.PPC_fmsub
PPC_fmsubs = _idaapi.PPC_fmsubs
PPC_fmul = _idaapi.PPC_fmul
PPC_fmuls = _idaapi.PPC_fmuls
PPC_fnabs = _idaapi.PPC_fnabs
PPC_fneg = _idaapi.PPC_fneg
PPC_fnmadd = _idaapi.PPC_fnmadd
PPC_fnmadds = _idaapi.PPC_fnmadds
PPC_fnmsub = _idaapi.PPC_fnmsub
PPC_fnmsubs = _idaapi.PPC_fnmsubs
PPC_fres = _idaapi.PPC_fres
PPC_frsp = _idaapi.PPC_frsp
PPC_frsqrte = _idaapi.PPC_frsqrte
PPC_fsel = _idaapi.PPC_fsel
PPC_fsqrt = _idaapi.PPC_fsqrt
PPC_fsqrts = _idaapi.PPC_fsqrts
PPC_fsub = _idaapi.PPC_fsub
PPC_fsubs = _idaapi.PPC_fsubs
PPC_icbi = _idaapi.PPC_icbi
PPC_isync = _idaapi.PPC_isync
PPC_lbz = _idaapi.PPC_lbz
PPC_lbzu = _idaapi.PPC_lbzu
PPC_lbzux = _idaapi.PPC_lbzux
PPC_lbzx = _idaapi.PPC_lbzx
PPC_ld = _idaapi.PPC_ld
PPC_ldarx = _idaapi.PPC_ldarx
PPC_ldu = _idaapi.PPC_ldu
PPC_ldux = _idaapi.PPC_ldux
PPC_ldx = _idaapi.PPC_ldx
PPC_lfd = _idaapi.PPC_lfd
PPC_lfdu = _idaapi.PPC_lfdu
PPC_lfdux = _idaapi.PPC_lfdux
PPC_lfdx = _idaapi.PPC_lfdx
PPC_lfs = _idaapi.PPC_lfs
PPC_lfsu = _idaapi.PPC_lfsu
PPC_lfsux = _idaapi.PPC_lfsux
PPC_lfsx = _idaapi.PPC_lfsx
PPC_lha = _idaapi.PPC_lha
PPC_lhau = _idaapi.PPC_lhau
PPC_lhaux = _idaapi.PPC_lhaux
PPC_lhax = _idaapi.PPC_lhax
PPC_lhbrx = _idaapi.PPC_lhbrx
PPC_lhz = _idaapi.PPC_lhz
PPC_lhzu = _idaapi.PPC_lhzu
PPC_lhzux = _idaapi.PPC_lhzux
PPC_lhzx = _idaapi.PPC_lhzx
PPC_lmw = _idaapi.PPC_lmw
PPC_lswi = _idaapi.PPC_lswi
PPC_lswx = _idaapi.PPC_lswx
PPC_lwa = _idaapi.PPC_lwa
PPC_lwarx = _idaapi.PPC_lwarx
PPC_lwaux = _idaapi.PPC_lwaux
PPC_lwax = _idaapi.PPC_lwax
PPC_lwbrx = _idaapi.PPC_lwbrx
PPC_lwz = _idaapi.PPC_lwz
PPC_lwzu = _idaapi.PPC_lwzu
PPC_lwzux = _idaapi.PPC_lwzux
PPC_lwzx = _idaapi.PPC_lwzx
PPC_mcrf = _idaapi.PPC_mcrf
PPC_mcrfs = _idaapi.PPC_mcrfs
PPC_mcrxr = _idaapi.PPC_mcrxr
PPC_mfcr = _idaapi.PPC_mfcr
PPC_mffs = _idaapi.PPC_mffs
PPC_mfmsr = _idaapi.PPC_mfmsr
PPC_mfspr = _idaapi.PPC_mfspr
PPC_mfsr = _idaapi.PPC_mfsr
PPC_mfsrin = _idaapi.PPC_mfsrin
PPC_mftb = _idaapi.PPC_mftb
PPC_mtcrf = _idaapi.PPC_mtcrf
PPC_mtfsb0 = _idaapi.PPC_mtfsb0
PPC_mtfsb1 = _idaapi.PPC_mtfsb1
PPC_mtfsf = _idaapi.PPC_mtfsf
PPC_mtfsfi = _idaapi.PPC_mtfsfi
PPC_mtmsr = _idaapi.PPC_mtmsr
PPC_mtmsrd = _idaapi.PPC_mtmsrd
PPC_mtspr = _idaapi.PPC_mtspr
PPC_mtsr = _idaapi.PPC_mtsr
PPC_mtsrd = _idaapi.PPC_mtsrd
PPC_mtsrdin = _idaapi.PPC_mtsrdin
PPC_mtsrin = _idaapi.PPC_mtsrin
PPC_mulhd = _idaapi.PPC_mulhd
PPC_mulhdu = _idaapi.PPC_mulhdu
PPC_mulhw = _idaapi.PPC_mulhw
PPC_mulhwu = _idaapi.PPC_mulhwu
PPC_mulld = _idaapi.PPC_mulld
PPC_mulli = _idaapi.PPC_mulli
PPC_mullw = _idaapi.PPC_mullw
PPC_nand = _idaapi.PPC_nand
PPC_neg = _idaapi.PPC_neg
PPC_nor = _idaapi.PPC_nor
PPC_or = _idaapi.PPC_or
PPC_orc = _idaapi.PPC_orc
PPC_ori = _idaapi.PPC_ori
PPC_oris = _idaapi.PPC_oris
PPC_rfi = _idaapi.PPC_rfi
PPC_rfid = _idaapi.PPC_rfid
PPC_rldcl = _idaapi.PPC_rldcl
PPC_rldcr = _idaapi.PPC_rldcr
PPC_rldic = _idaapi.PPC_rldic
PPC_rldicl = _idaapi.PPC_rldicl
PPC_rldicr = _idaapi.PPC_rldicr
PPC_rldimi = _idaapi.PPC_rldimi
PPC_rlwimi = _idaapi.PPC_rlwimi
PPC_rlwinm = _idaapi.PPC_rlwinm
PPC_rlwnm = _idaapi.PPC_rlwnm
PPC_sc = _idaapi.PPC_sc
PPC_slbia = _idaapi.PPC_slbia
PPC_slbie = _idaapi.PPC_slbie
PPC_sld = _idaapi.PPC_sld
PPC_slw = _idaapi.PPC_slw
PPC_srad = _idaapi.PPC_srad
PPC_sradi = _idaapi.PPC_sradi
PPC_sraw = _idaapi.PPC_sraw
PPC_srawi = _idaapi.PPC_srawi
PPC_srd = _idaapi.PPC_srd
PPC_srw = _idaapi.PPC_srw
PPC_stb = _idaapi.PPC_stb
PPC_stbu = _idaapi.PPC_stbu
PPC_stbux = _idaapi.PPC_stbux
PPC_stbx = _idaapi.PPC_stbx
PPC_std = _idaapi.PPC_std
PPC_stdcx = _idaapi.PPC_stdcx
PPC_stdu = _idaapi.PPC_stdu
PPC_stdux = _idaapi.PPC_stdux
PPC_stdx = _idaapi.PPC_stdx
PPC_stfd = _idaapi.PPC_stfd
PPC_stfdu = _idaapi.PPC_stfdu
PPC_stfdux = _idaapi.PPC_stfdux
PPC_stfdx = _idaapi.PPC_stfdx
PPC_stfiwx = _idaapi.PPC_stfiwx
PPC_stfs = _idaapi.PPC_stfs
PPC_stfsu = _idaapi.PPC_stfsu
PPC_stfsux = _idaapi.PPC_stfsux
PPC_stfsx = _idaapi.PPC_stfsx
PPC_sth = _idaapi.PPC_sth
PPC_sthbrx = _idaapi.PPC_sthbrx
PPC_sthu = _idaapi.PPC_sthu
PPC_sthux = _idaapi.PPC_sthux
PPC_sthx = _idaapi.PPC_sthx
PPC_stmw = _idaapi.PPC_stmw
PPC_stswi = _idaapi.PPC_stswi
PPC_stswx = _idaapi.PPC_stswx
PPC_stw = _idaapi.PPC_stw
PPC_stwbrx = _idaapi.PPC_stwbrx
PPC_stwcx = _idaapi.PPC_stwcx
PPC_stwu = _idaapi.PPC_stwu
PPC_stwux = _idaapi.PPC_stwux
PPC_stwx = _idaapi.PPC_stwx
PPC_subf = _idaapi.PPC_subf
PPC_subfc = _idaapi.PPC_subfc
PPC_subfe = _idaapi.PPC_subfe
PPC_subfic = _idaapi.PPC_subfic
PPC_subfme = _idaapi.PPC_subfme
PPC_subfze = _idaapi.PPC_subfze
PPC_sync = _idaapi.PPC_sync
PPC_td = _idaapi.PPC_td
PPC_tdi = _idaapi.PPC_tdi
PPC_tlbia = _idaapi.PPC_tlbia
PPC_tlbie = _idaapi.PPC_tlbie
PPC_tlbsync = _idaapi.PPC_tlbsync
PPC_tw = _idaapi.PPC_tw
PPC_twi = _idaapi.PPC_twi
PPC_xor = _idaapi.PPC_xor
PPC_xori = _idaapi.PPC_xori
PPC_xoris = _idaapi.PPC_xoris
PPC_last_basic = _idaapi.PPC_last_basic
PPC_cmpwi = _idaapi.PPC_cmpwi
PPC_cmpw = _idaapi.PPC_cmpw
PPC_cmplwi = _idaapi.PPC_cmplwi
PPC_cmplw = _idaapi.PPC_cmplw
PPC_cmpdi = _idaapi.PPC_cmpdi
PPC_cmpd = _idaapi.PPC_cmpd
PPC_cmpldi = _idaapi.PPC_cmpldi
PPC_cmpld = _idaapi.PPC_cmpld
PPC_trap = _idaapi.PPC_trap
PPC_trapd = _idaapi.PPC_trapd
PPC_twlgt = _idaapi.PPC_twlgt
PPC_twllt = _idaapi.PPC_twllt
PPC_tweq = _idaapi.PPC_tweq
PPC_twlge = _idaapi.PPC_twlge
PPC_twlle = _idaapi.PPC_twlle
PPC_twgt = _idaapi.PPC_twgt
PPC_twge = _idaapi.PPC_twge
PPC_twlt = _idaapi.PPC_twlt
PPC_twle = _idaapi.PPC_twle
PPC_twne = _idaapi.PPC_twne
PPC_twlgti = _idaapi.PPC_twlgti
PPC_twllti = _idaapi.PPC_twllti
PPC_tweqi = _idaapi.PPC_tweqi
PPC_twlgei = _idaapi.PPC_twlgei
PPC_twllei = _idaapi.PPC_twllei
PPC_twgti = _idaapi.PPC_twgti
PPC_twgei = _idaapi.PPC_twgei
PPC_twlti = _idaapi.PPC_twlti
PPC_twlei = _idaapi.PPC_twlei
PPC_twnei = _idaapi.PPC_twnei
PPC_tdlgt = _idaapi.PPC_tdlgt
PPC_tdllt = _idaapi.PPC_tdllt
PPC_tdeq = _idaapi.PPC_tdeq
PPC_tdlge = _idaapi.PPC_tdlge
PPC_tdlle = _idaapi.PPC_tdlle
PPC_tdgt = _idaapi.PPC_tdgt
PPC_tdge = _idaapi.PPC_tdge
PPC_tdlt = _idaapi.PPC_tdlt
PPC_tdle = _idaapi.PPC_tdle
PPC_tdne = _idaapi.PPC_tdne
PPC_tdlgti = _idaapi.PPC_tdlgti
PPC_tdllti = _idaapi.PPC_tdllti
PPC_tdeqi = _idaapi.PPC_tdeqi
PPC_tdlgei = _idaapi.PPC_tdlgei
PPC_tdllei = _idaapi.PPC_tdllei
PPC_tdgti = _idaapi.PPC_tdgti
PPC_tdgei = _idaapi.PPC_tdgei
PPC_tdlti = _idaapi.PPC_tdlti
PPC_tdlei = _idaapi.PPC_tdlei
PPC_tdnei = _idaapi.PPC_tdnei
PPC_nop = _idaapi.PPC_nop
PPC_not = _idaapi.PPC_not
PPC_mr = _idaapi.PPC_mr
PPC_subi = _idaapi.PPC_subi
PPC_subic = _idaapi.PPC_subic
PPC_subis = _idaapi.PPC_subis
PPC_li = _idaapi.PPC_li
PPC_lis = _idaapi.PPC_lis
PPC_crset = _idaapi.PPC_crset
PPC_crnot = _idaapi.PPC_crnot
PPC_crmove = _idaapi.PPC_crmove
PPC_crclr = _idaapi.PPC_crclr
PPC_mtxer = _idaapi.PPC_mtxer
PPC_mtlr = _idaapi.PPC_mtlr
PPC_mtctr = _idaapi.PPC_mtctr
PPC_mtdsisr = _idaapi.PPC_mtdsisr
PPC_mtdar = _idaapi.PPC_mtdar
PPC_mtdec = _idaapi.PPC_mtdec
PPC_mtsrr0 = _idaapi.PPC_mtsrr0
PPC_mtsrr1 = _idaapi.PPC_mtsrr1
PPC_mtsprg0 = _idaapi.PPC_mtsprg0
PPC_mtsprg1 = _idaapi.PPC_mtsprg1
PPC_mtsprg2 = _idaapi.PPC_mtsprg2
PPC_mtsprg3 = _idaapi.PPC_mtsprg3
PPC_mttbl = _idaapi.PPC_mttbl
PPC_mttbu = _idaapi.PPC_mttbu
PPC_mfxer = _idaapi.PPC_mfxer
PPC_mflr = _idaapi.PPC_mflr
PPC_mfctr = _idaapi.PPC_mfctr
PPC_mfdsisr = _idaapi.PPC_mfdsisr
PPC_mfdar = _idaapi.PPC_mfdar
PPC_mfdec = _idaapi.PPC_mfdec
PPC_mfsrr0 = _idaapi.PPC_mfsrr0
PPC_mfsrr1 = _idaapi.PPC_mfsrr1
PPC_mfsprg0 = _idaapi.PPC_mfsprg0
PPC_mfsprg1 = _idaapi.PPC_mfsprg1
PPC_mfsprg2 = _idaapi.PPC_mfsprg2
PPC_mfsprg3 = _idaapi.PPC_mfsprg3
PPC_mftbl = _idaapi.PPC_mftbl
PPC_mftbu = _idaapi.PPC_mftbu
PPC_mfpvr = _idaapi.PPC_mfpvr
PPC_balways = _idaapi.PPC_balways
PPC_bt = _idaapi.PPC_bt
PPC_bf = _idaapi.PPC_bf
PPC_bdnz = _idaapi.PPC_bdnz
PPC_bdnzt = _idaapi.PPC_bdnzt
PPC_bdnzf = _idaapi.PPC_bdnzf
PPC_bdz = _idaapi.PPC_bdz
PPC_bdzt = _idaapi.PPC_bdzt
PPC_bdzf = _idaapi.PPC_bdzf
PPC_blt = _idaapi.PPC_blt
PPC_ble = _idaapi.PPC_ble
PPC_beq = _idaapi.PPC_beq
PPC_bge = _idaapi.PPC_bge
PPC_bgt = _idaapi.PPC_bgt
PPC_bne = _idaapi.PPC_bne
PPC_bso = _idaapi.PPC_bso
PPC_bns = _idaapi.PPC_bns
PPC_extlwi = _idaapi.PPC_extlwi
PPC_extrwi = _idaapi.PPC_extrwi
PPC_inslwi = _idaapi.PPC_inslwi
PPC_insrwi = _idaapi.PPC_insrwi
PPC_rotlwi = _idaapi.PPC_rotlwi
PPC_rotrwi = _idaapi.PPC_rotrwi
PPC_rotlw = _idaapi.PPC_rotlw
PPC_slwi = _idaapi.PPC_slwi
PPC_srwi = _idaapi.PPC_srwi
PPC_clrlwi = _idaapi.PPC_clrlwi
PPC_clrrwi = _idaapi.PPC_clrrwi
PPC_clrlslwi = _idaapi.PPC_clrlslwi
PPC_dccci = _idaapi.PPC_dccci
PPC_dcread = _idaapi.PPC_dcread
PPC_icbt = _idaapi.PPC_icbt
PPC_iccci = _idaapi.PPC_iccci
PPC_icread = _idaapi.PPC_icread
PPC_mfdcr = _idaapi.PPC_mfdcr
PPC_mtdcr = _idaapi.PPC_mtdcr
PPC_rfci = _idaapi.PPC_rfci
PPC_tlbre = _idaapi.PPC_tlbre
PPC_tlbsx = _idaapi.PPC_tlbsx
PPC_tlbwe = _idaapi.PPC_tlbwe
PPC_wrtee = _idaapi.PPC_wrtee
PPC_wrteei = _idaapi.PPC_wrteei
PPC_abs = _idaapi.PPC_abs
PPC_clcs = _idaapi.PPC_clcs
PPC_clf = _idaapi.PPC_clf
PPC_cli = _idaapi.PPC_cli
PPC_dclst = _idaapi.PPC_dclst
PPC_div = _idaapi.PPC_div
PPC_divs = _idaapi.PPC_divs
PPC_doz = _idaapi.PPC_doz
PPC_dozi = _idaapi.PPC_dozi
PPC_frsqrtes = _idaapi.PPC_frsqrtes
PPC_hrfid = _idaapi.PPC_hrfid
PPC_lscbx = _idaapi.PPC_lscbx
PPC_maskg = _idaapi.PPC_maskg
PPC_maskir = _idaapi.PPC_maskir
PPC_mfsri = _idaapi.PPC_mfsri
PPC_mul = _idaapi.PPC_mul
PPC_nabs = _idaapi.PPC_nabs
PPC_popcntb = _idaapi.PPC_popcntb
PPC_rac = _idaapi.PPC_rac
PPC_rfsvc = _idaapi.PPC_rfsvc
PPC_rlmi = _idaapi.PPC_rlmi
PPC_rrib = _idaapi.PPC_rrib
PPC_slbmfee = _idaapi.PPC_slbmfee
PPC_slbmfev = _idaapi.PPC_slbmfev
PPC_slbmte = _idaapi.PPC_slbmte
PPC_sle = _idaapi.PPC_sle
PPC_sleq = _idaapi.PPC_sleq
PPC_sliq = _idaapi.PPC_sliq
PPC_slliq = _idaapi.PPC_slliq
PPC_sllq = _idaapi.PPC_sllq
PPC_slq = _idaapi.PPC_slq
PPC_sraiq = _idaapi.PPC_sraiq
PPC_sraq = _idaapi.PPC_sraq
PPC_sre = _idaapi.PPC_sre
PPC_srea = _idaapi.PPC_srea
PPC_sreq = _idaapi.PPC_sreq
PPC_sriq = _idaapi.PPC_sriq
PPC_srliq = _idaapi.PPC_srliq
PPC_srlq = _idaapi.PPC_srlq
PPC_srq = _idaapi.PPC_srq
PPC_mtocrf = _idaapi.PPC_mtocrf
PPC_mfocrf = _idaapi.PPC_mfocrf
PPC_isel = _idaapi.PPC_isel
PPC_isellt = _idaapi.PPC_isellt
PPC_iselgt = _idaapi.PPC_iselgt
PPC_iseleq = _idaapi.PPC_iseleq
PPC_dcblc = _idaapi.PPC_dcblc
PPC_dcbtls = _idaapi.PPC_dcbtls
PPC_dcbtstls = _idaapi.PPC_dcbtstls
PPC_icblc = _idaapi.PPC_icblc
PPC_icbtls = _idaapi.PPC_icbtls
PPC_tlbivax = _idaapi.PPC_tlbivax
PPC_rfdi = _idaapi.PPC_rfdi
PPC_last = _idaapi.PPC_last
NEC850_NULL = _idaapi.NEC850_NULL
NEC850_BREAKPOINT = _idaapi.NEC850_BREAKPOINT
NEC850_XORI = _idaapi.NEC850_XORI
NEC850_XOR = _idaapi.NEC850_XOR
NEC850_TST1 = _idaapi.NEC850_TST1
NEC850_TST = _idaapi.NEC850_TST
NEC850_TRAP = _idaapi.NEC850_TRAP
NEC850_SUBR = _idaapi.NEC850_SUBR
NEC850_SUB = _idaapi.NEC850_SUB
NEC850_STSR = _idaapi.NEC850_STSR
NEC850_ST_B = _idaapi.NEC850_ST_B
NEC850_ST_H = _idaapi.NEC850_ST_H
NEC850_ST_W = _idaapi.NEC850_ST_W
NEC850_SST_B = _idaapi.NEC850_SST_B
NEC850_SST_H = _idaapi.NEC850_SST_H
NEC850_SST_W = _idaapi.NEC850_SST_W
NEC850_SLD_B = _idaapi.NEC850_SLD_B
NEC850_SLD_H = _idaapi.NEC850_SLD_H
NEC850_SLD_W = _idaapi.NEC850_SLD_W
NEC850_SHR = _idaapi.NEC850_SHR
NEC850_SHL = _idaapi.NEC850_SHL
NEC850_SET1 = _idaapi.NEC850_SET1
NEC850_SETFV = _idaapi.NEC850_SETFV
NEC850_SETFL = _idaapi.NEC850_SETFL
NEC850_SETFZ = _idaapi.NEC850_SETFZ
NEC850_SETFNH = _idaapi.NEC850_SETFNH
NEC850_SETFN = _idaapi.NEC850_SETFN
NEC850_SETFT = _idaapi.NEC850_SETFT
NEC850_SETFLT = _idaapi.NEC850_SETFLT
NEC850_SETFLE = _idaapi.NEC850_SETFLE
NEC850_SETFNV = _idaapi.NEC850_SETFNV
NEC850_SETFNC = _idaapi.NEC850_SETFNC
NEC850_SETFNZ = _idaapi.NEC850_SETFNZ
NEC850_SETFH = _idaapi.NEC850_SETFH
NEC850_SETFP = _idaapi.NEC850_SETFP
NEC850_SETFSA = _idaapi.NEC850_SETFSA
NEC850_SETFGE = _idaapi.NEC850_SETFGE
NEC850_SETFGT = _idaapi.NEC850_SETFGT
NEC850_SATSUBR = _idaapi.NEC850_SATSUBR
NEC850_SATSUBI = _idaapi.NEC850_SATSUBI
NEC850_SATSUB = _idaapi.NEC850_SATSUB
NEC850_SATADD = _idaapi.NEC850_SATADD
NEC850_SAR = _idaapi.NEC850_SAR
NEC850_RETI = _idaapi.NEC850_RETI
NEC850_ORI = _idaapi.NEC850_ORI
NEC850_OR = _idaapi.NEC850_OR
NEC850_NOT1 = _idaapi.NEC850_NOT1
NEC850_NOT = _idaapi.NEC850_NOT
NEC850_NOP = _idaapi.NEC850_NOP
NEC850_MULHI = _idaapi.NEC850_MULHI
NEC850_MULH = _idaapi.NEC850_MULH
NEC850_MOVHI = _idaapi.NEC850_MOVHI
NEC850_MOVEA = _idaapi.NEC850_MOVEA
NEC850_MOV = _idaapi.NEC850_MOV
NEC850_LDSR = _idaapi.NEC850_LDSR
NEC850_LD_B = _idaapi.NEC850_LD_B
NEC850_LD_H = _idaapi.NEC850_LD_H
NEC850_LD_W = _idaapi.NEC850_LD_W
NEC850_JR = _idaapi.NEC850_JR
NEC850_JMP = _idaapi.NEC850_JMP
NEC850_JARL = _idaapi.NEC850_JARL
NEC850_HALT = _idaapi.NEC850_HALT
NEC850_EI = _idaapi.NEC850_EI
NEC850_DIVH = _idaapi.NEC850_DIVH
NEC850_DI = _idaapi.NEC850_DI
NEC850_CMP = _idaapi.NEC850_CMP
NEC850_CLR1 = _idaapi.NEC850_CLR1
NEC850_BV = _idaapi.NEC850_BV
NEC850_BL = _idaapi.NEC850_BL
NEC850_BZ = _idaapi.NEC850_BZ
NEC850_BNH = _idaapi.NEC850_BNH
NEC850_BN = _idaapi.NEC850_BN
NEC850_BR = _idaapi.NEC850_BR
NEC850_BLT = _idaapi.NEC850_BLT
NEC850_BLE = _idaapi.NEC850_BLE
NEC850_BNV = _idaapi.NEC850_BNV
NEC850_BNC = _idaapi.NEC850_BNC
NEC850_BNZ = _idaapi.NEC850_BNZ
NEC850_BH = _idaapi.NEC850_BH
NEC850_BP = _idaapi.NEC850_BP
NEC850_BSA = _idaapi.NEC850_BSA
NEC850_BGE = _idaapi.NEC850_BGE
NEC850_BGT = _idaapi.NEC850_BGT
NEC850_ANDI = _idaapi.NEC850_ANDI
NEC850_AND = _idaapi.NEC850_AND
NEC850_ADDI = _idaapi.NEC850_ADDI
NEC850_ADD = _idaapi.NEC850_ADD
NEC850_SWITCH = _idaapi.NEC850_SWITCH
NEC850_ZXB = _idaapi.NEC850_ZXB
NEC850_SXB = _idaapi.NEC850_SXB
NEC850_ZXH = _idaapi.NEC850_ZXH
NEC850_SXH = _idaapi.NEC850_SXH
NEC850_DISPOSE_r0 = _idaapi.NEC850_DISPOSE_r0
NEC850_DISPOSE_r = _idaapi.NEC850_DISPOSE_r
NEC850_CALLT = _idaapi.NEC850_CALLT
NEC850_DBTRAP = _idaapi.NEC850_DBTRAP
NEC850_DBRET = _idaapi.NEC850_DBRET
NEC850_CTRET = _idaapi.NEC850_CTRET
NEC850_SASFV = _idaapi.NEC850_SASFV
NEC850_SASFL = _idaapi.NEC850_SASFL
NEC850_SASFZ = _idaapi.NEC850_SASFZ
NEC850_SASFNH = _idaapi.NEC850_SASFNH
NEC850_SASFN = _idaapi.NEC850_SASFN
NEC850_SASFT = _idaapi.NEC850_SASFT
NEC850_SASFLT = _idaapi.NEC850_SASFLT
NEC850_SASFLE = _idaapi.NEC850_SASFLE
NEC850_SASFNV = _idaapi.NEC850_SASFNV
NEC850_SASFNC = _idaapi.NEC850_SASFNC
NEC850_SASFNZ = _idaapi.NEC850_SASFNZ
NEC850_SASFH = _idaapi.NEC850_SASFH
NEC850_SASFP = _idaapi.NEC850_SASFP
NEC850_SASFSA = _idaapi.NEC850_SASFSA
NEC850_SASFGE = _idaapi.NEC850_SASFGE
NEC850_SASFGT = _idaapi.NEC850_SASFGT
NEC850_PREPARE_sp = _idaapi.NEC850_PREPARE_sp
NEC850_PREPARE_i = _idaapi.NEC850_PREPARE_i
NEC850_MUL = _idaapi.NEC850_MUL
NEC850_MULU = _idaapi.NEC850_MULU
NEC850_DIVH_r3 = _idaapi.NEC850_DIVH_r3
NEC850_DIVHU = _idaapi.NEC850_DIVHU
NEC850_DIV = _idaapi.NEC850_DIV
NEC850_DIVU = _idaapi.NEC850_DIVU
NEC850_BSW = _idaapi.NEC850_BSW
NEC850_BSH = _idaapi.NEC850_BSH
NEC850_HSW = _idaapi.NEC850_HSW
NEC850_CMOVV = _idaapi.NEC850_CMOVV
NEC850_CMOVL = _idaapi.NEC850_CMOVL
NEC850_CMOVZ = _idaapi.NEC850_CMOVZ
NEC850_CMOVNH = _idaapi.NEC850_CMOVNH
NEC850_CMOVN = _idaapi.NEC850_CMOVN
NEC850_CMOV = _idaapi.NEC850_CMOV
NEC850_CMOVLT = _idaapi.NEC850_CMOVLT
NEC850_CMOVLE = _idaapi.NEC850_CMOVLE
NEC850_CMOVNV = _idaapi.NEC850_CMOVNV
NEC850_CMOVNC = _idaapi.NEC850_CMOVNC
NEC850_CMOVNZ = _idaapi.NEC850_CMOVNZ
NEC850_CMOVH = _idaapi.NEC850_CMOVH
NEC850_CMOVP = _idaapi.NEC850_CMOVP
NEC850_CMOVSA = _idaapi.NEC850_CMOVSA
NEC850_CMOVGE = _idaapi.NEC850_CMOVGE
NEC850_CMOVGT = _idaapi.NEC850_CMOVGT
NEC850_SLD_BU = _idaapi.NEC850_SLD_BU
NEC850_SLD_HU = _idaapi.NEC850_SLD_HU
NEC850_LD_BU = _idaapi.NEC850_LD_BU
NEC850_LD_HU = _idaapi.NEC850_LD_HU
NEC850_LAST_INSTRUCTION = _idaapi.NEC850_LAST_INSTRUCTION
class area_t(object):
    """Proxy of C++ area_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    startEA = _swig_property(_idaapi.area_t_startEA_get, _idaapi.area_t_startEA_set)
    endEA = _swig_property(_idaapi.area_t_endEA_get, _idaapi.area_t_endEA_set)
    def __init__(self, *args): 
        """
        __init__(self) -> area_t
        __init__(self, ea_t ea1, ea_t ea2) -> area_t
        """
        this = _idaapi.new_area_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def compare(self, *args):
        """compare(self, area_t r) -> int"""
        return _idaapi.area_t_compare(self, *args)

    def __eq__(self, *args):
        """__eq__(self, area_t r) -> bool"""
        return _idaapi.area_t___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, area_t r) -> bool"""
        return _idaapi.area_t___ne__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, area_t r) -> bool"""
        return _idaapi.area_t___gt__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, area_t r) -> bool"""
        return _idaapi.area_t___lt__(self, *args)

    def contains(self, *args):
        """
        contains(self, ea_t ea) -> bool
        contains(self, area_t r) -> bool
        """
        return _idaapi.area_t_contains(self, *args)

    def overlaps(self, *args):
        """overlaps(self, area_t r) -> bool"""
        return _idaapi.area_t_overlaps(self, *args)

    def clear(self, *args):
        """clear(self)"""
        return _idaapi.area_t_clear(self, *args)

    def empty(self, *args):
        """empty(self) -> bool"""
        return _idaapi.area_t_empty(self, *args)

    def size(self, *args):
        """size(self) -> asize_t"""
        return _idaapi.area_t_size(self, *args)

    def intersect(self, *args):
        """intersect(self, area_t r)"""
        return _idaapi.area_t_intersect(self, *args)

    def extend(self, *args):
        """extend(self, ea_t ea)"""
        return _idaapi.area_t_extend(self, *args)

    __swig_destroy__ = _idaapi.delete_area_t
    __del__ = lambda self : None;
area_t_swigregister = _idaapi.area_t_swigregister
area_t_swigregister(area_t)

class area_visitor2_t(object):
    """Proxy of C++ area_visitor2_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def visit_area(self, *args):
        """visit_area(self, area_t a) -> int"""
        return _idaapi.area_visitor2_t_visit_area(self, *args)

    __swig_destroy__ = _idaapi.delete_area_visitor2_t
    __del__ = lambda self : None;
area_visitor2_t_swigregister = _idaapi.area_visitor2_t_swigregister
area_visitor2_t_swigregister(area_visitor2_t)

class areacb_t(object):
    """Proxy of C++ areacb_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def zero(self, *args):
        """zero(self)"""
        return _idaapi.areacb_t_zero(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> areacb_t"""
        this = _idaapi.new_areacb_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def terminate(self, *args):
        """terminate(self)"""
        return _idaapi.areacb_t_terminate(self, *args)

    __swig_destroy__ = _idaapi.delete_areacb_t
    __del__ = lambda self : None;
    def save(self, *args):
        """save(self)"""
        return _idaapi.areacb_t_save(self, *args)

    def link(self, *args):
        """link(self, char file, char name, int infosize) -> bool"""
        return _idaapi.areacb_t_link(self, *args)

    def create(self, *args):
        """create(self, char file, char name, uint infosize) -> bool"""
        return _idaapi.areacb_t_create(self, *args)

    def kill(self, *args):
        """kill(self)"""
        return _idaapi.areacb_t_kill(self, *args)

    def create_area(self, *args):
        """create_area(self, area_t info) -> bool"""
        return _idaapi.areacb_t_create_area(self, *args)

    def update(self, *args):
        """update(self, area_t info) -> bool"""
        return _idaapi.areacb_t_update(self, *args)

    def get_area(self, *args):
        """get_area(self, ea_t ea) -> area_t"""
        return _idaapi.areacb_t_get_area(self, *args)

    def getn_area(self, *args):
        """getn_area(self, unsigned int n) -> area_t"""
        return _idaapi.areacb_t_getn_area(self, *args)

    def get_area_num(self, *args):
        """get_area_num(self, ea_t ea) -> int"""
        return _idaapi.areacb_t_get_area_num(self, *args)

    def prepare_to_create(self, *args):
        """prepare_to_create(self, ea_t start, ea_t end) -> ea_t"""
        return _idaapi.areacb_t_prepare_to_create(self, *args)

    def get_next_area(self, *args):
        """get_next_area(self, ea_t ea) -> int"""
        return _idaapi.areacb_t_get_next_area(self, *args)

    def get_prev_area(self, *args):
        """get_prev_area(self, ea_t ea) -> int"""
        return _idaapi.areacb_t_get_prev_area(self, *args)

    def next_area_ptr(self, *args):
        """next_area_ptr(self, ea_t ea) -> area_t"""
        return _idaapi.areacb_t_next_area_ptr(self, *args)

    def prev_area_ptr(self, *args):
        """prev_area_ptr(self, ea_t ea) -> area_t"""
        return _idaapi.areacb_t_prev_area_ptr(self, *args)

    def first_area_ptr(self, *args):
        """first_area_ptr(self) -> area_t"""
        return _idaapi.areacb_t_first_area_ptr(self, *args)

    def last_area_ptr(self, *args):
        """last_area_ptr(self) -> area_t"""
        return _idaapi.areacb_t_last_area_ptr(self, *args)

    def del_area(self, *args):
        """del_area(self, ea_t ea, bool delcmt = True) -> bool"""
        return _idaapi.areacb_t_del_area(self, *args)

    def may_start_at(self, *args):
        """may_start_at(self, uint n, ea_t newstart) -> bool"""
        return _idaapi.areacb_t_may_start_at(self, *args)

    def may_end_at(self, *args):
        """may_end_at(self, uint n, ea_t newend) -> bool"""
        return _idaapi.areacb_t_may_end_at(self, *args)

    def set_start(self, *args):
        """set_start(self, uint n, ea_t newstart) -> bool"""
        return _idaapi.areacb_t_set_start(self, *args)

    def set_end(self, *args):
        """set_end(self, uint n, ea_t newend) -> bool"""
        return _idaapi.areacb_t_set_end(self, *args)

    def make_hole(self, *args):
        """make_hole(self, ea_t ea1, ea_t ea2, bool create_tail_area)"""
        return _idaapi.areacb_t_make_hole(self, *args)

    def resize_areas(self, *args):
        """resize_areas(self, uint n, ea_t newstart) -> bool"""
        return _idaapi.areacb_t_resize_areas(self, *args)

    def get_area_qty(self, *args):
        """get_area_qty(self) -> uint"""
        return _idaapi.areacb_t_get_area_qty(self, *args)

    def set_area_cmt(self, *args):
        """set_area_cmt(self, area_t a, char cmt, bool repeatable) -> bool"""
        return _idaapi.areacb_t_set_area_cmt(self, *args)

    def del_area_cmt(self, *args):
        """del_area_cmt(self, area_t a, bool repeatable)"""
        return _idaapi.areacb_t_del_area_cmt(self, *args)

    def get_area_cmt(self, *args):
        """get_area_cmt(self, area_t a, bool repeatable) -> char"""
        return _idaapi.areacb_t_get_area_cmt(self, *args)

    def for_all_areas2(self, *args):
        """for_all_areas2(self, ea_t ea1, ea_t ea2, area_visitor2_t av) -> int"""
        return _idaapi.areacb_t_for_all_areas2(self, *args)

areacb_t_swigregister = _idaapi.areacb_t_swigregister
areacb_t_swigregister(areacb_t)

class auto_display_t(object):
    """Proxy of C++ auto_display_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_idaapi.auto_display_t_type_get, _idaapi.auto_display_t_type_set)
    ea = _swig_property(_idaapi.auto_display_t_ea_get, _idaapi.auto_display_t_ea_set)
    state = _swig_property(_idaapi.auto_display_t_state_get, _idaapi.auto_display_t_state_set)
    def __init__(self, *args): 
        """__init__(self) -> auto_display_t"""
        this = _idaapi.new_auto_display_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_auto_display_t
    __del__ = lambda self : None;
auto_display_t_swigregister = _idaapi.auto_display_t_swigregister
auto_display_t_swigregister(auto_display_t)
AU_NONE = cvar.AU_NONE
AU_UNK = cvar.AU_UNK
AU_CODE = cvar.AU_CODE
AU_WEAK = cvar.AU_WEAK
AU_PROC = cvar.AU_PROC
AU_TAIL = cvar.AU_TAIL
AU_TRSP = cvar.AU_TRSP
AU_USED = cvar.AU_USED
AU_TYPE = cvar.AU_TYPE
AU_LIBF = cvar.AU_LIBF
AU_LBF2 = cvar.AU_LBF2
AU_LBF3 = cvar.AU_LBF3
AU_CHLB = cvar.AU_CHLB
AU_FINAL = cvar.AU_FINAL
st_Ready = cvar.st_Ready
st_Think = cvar.st_Think
st_Waiting = cvar.st_Waiting
st_Work = cvar.st_Work


def showAuto(*args):
  """showAuto(ea_t ea, atype_t type = AU_NONE)"""
  return _idaapi.showAuto(*args)

def showAddr(*args):
  """showAddr(ea_t ea)"""
  return _idaapi.showAddr(*args)

def setStat(*args):
  """setStat(idastate_t st) -> idastate_t"""
  return _idaapi.setStat(*args)

def may_create_stkvars(*args):
  """may_create_stkvars() -> bool"""
  return _idaapi.may_create_stkvars(*args)

def may_trace_sp(*args):
  """may_trace_sp() -> bool"""
  return _idaapi.may_trace_sp(*args)

def auto_mark_range(*args):
  """auto_mark_range(ea_t start, ea_t end, atype_t type)"""
  return _idaapi.auto_mark_range(*args)

def autoMark(*args):
  """autoMark(ea_t ea, atype_t type)"""
  return _idaapi.autoMark(*args)

def autoUnmark(*args):
  """autoUnmark(ea_t start, ea_t end, atype_t type)"""
  return _idaapi.autoUnmark(*args)

def auto_make_code(*args):
  """auto_make_code(ea_t ea)"""
  return _idaapi.auto_make_code(*args)

def auto_make_proc(*args):
  """auto_make_proc(ea_t ea)"""
  return _idaapi.auto_make_proc(*args)

def reanalyze_callers(*args):
  """reanalyze_callers(ea_t ea, bool noret)"""
  return _idaapi.reanalyze_callers(*args)

def auto_apply_type(*args):
  """auto_apply_type(ea_t caller, ea_t callee)"""
  return _idaapi.auto_apply_type(*args)

def analyze_area(*args):
  """analyze_area(ea_t sEA, ea_t eEA) -> int"""
  return _idaapi.analyze_area(*args)

def autoWait(*args):
  """autoWait() -> bool"""
  return _idaapi.autoWait(*args)

def autoCancel(*args):
  """autoCancel(ea_t ea1, ea_t ea2)"""
  return _idaapi.autoCancel(*args)

def autoIsOk(*args):
  """autoIsOk() -> bool"""
  return _idaapi.autoIsOk(*args)

def autoStep(*args):
  """autoStep() -> bool"""
  return _idaapi.autoStep(*args)

def auto_get(*args):
  """auto_get(ea_t lowEA, ea_t highEA, atype_t type) -> ea_t"""
  return _idaapi.auto_get(*args)

def autoGetName(*args):
  """autoGetName(atype_t type) -> char"""
  return _idaapi.autoGetName(*args)

def enable_flags(*args):
  """enable_flags(ea_t startEA, ea_t endEA, storage_type_t stt) -> error_t"""
  return _idaapi.enable_flags(*args)

def disable_flags(*args):
  """disable_flags(ea_t startEA, ea_t endEA) -> error_t"""
  return _idaapi.disable_flags(*args)

def change_storage_type(*args):
  """change_storage_type(ea_t startEA, ea_t endEA, storage_type_t stt) -> error_t"""
  return _idaapi.change_storage_type(*args)

def nextaddr(*args):
  """nextaddr(ea_t ea) -> ea_t"""
  return _idaapi.nextaddr(*args)

def prevaddr(*args):
  """prevaddr(ea_t ea) -> ea_t"""
  return _idaapi.prevaddr(*args)

def nextchunk(*args):
  """nextchunk(ea_t ea) -> ea_t"""
  return _idaapi.nextchunk(*args)

def prevchunk(*args):
  """prevchunk(ea_t ea) -> ea_t"""
  return _idaapi.prevchunk(*args)

def chunkstart(*args):
  """chunkstart(ea_t ea) -> ea_t"""
  return _idaapi.chunkstart(*args)

def chunksize(*args):
  """chunksize(ea_t ea) -> asize_t"""
  return _idaapi.chunksize(*args)

def freechunk(*args):
  """freechunk(ea_t bottom, asize_t size, int32 step) -> ea_t"""
  return _idaapi.freechunk(*args)

def next_unknown(*args):
  """next_unknown(ea_t ea, ea_t maxea) -> ea_t"""
  return _idaapi.next_unknown(*args)

def prev_unknown(*args):
  """prev_unknown(ea_t ea, ea_t minea) -> ea_t"""
  return _idaapi.prev_unknown(*args)

def prev_head(*args):
  """prev_head(ea_t ea, ea_t minea) -> ea_t"""
  return _idaapi.prev_head(*args)

def next_head(*args):
  """next_head(ea_t ea, ea_t maxea) -> ea_t"""
  return _idaapi.next_head(*args)

def prev_not_tail(*args):
  """prev_not_tail(ea_t ea) -> ea_t"""
  return _idaapi.prev_not_tail(*args)

def next_not_tail(*args):
  """next_not_tail(ea_t ea) -> ea_t"""
  return _idaapi.next_not_tail(*args)

def get_item_end(*args):
  """get_item_end(ea_t ea) -> ea_t"""
  return _idaapi.get_item_end(*args)
ITEM_END_FIXUP = _idaapi.ITEM_END_FIXUP
ITEM_END_INITED = _idaapi.ITEM_END_INITED
ITEM_END_NAME = _idaapi.ITEM_END_NAME
ITEM_END_XREF = _idaapi.ITEM_END_XREF

def calc_max_item_end(*args):
  """calc_max_item_end(ea_t ea, int how = 15) -> ea_t"""
  return _idaapi.calc_max_item_end(*args)

def get_item_size(*args):
  """get_item_size(ea_t ea) -> asize_t"""
  return _idaapi.get_item_size(*args)

def isEnabled(*args):
  """isEnabled(ea_t ea) -> bool"""
  return _idaapi.isEnabled(*args)

def get_flags_ex(*args):
  """get_flags_ex(ea_t ea, int how) -> flags_t"""
  return _idaapi.get_flags_ex(*args)
GFE_NOVALUE = _idaapi.GFE_NOVALUE

def get_flags_novalue(*args):
  """get_flags_novalue(ea_t ea) -> flags_t"""
  return _idaapi.get_flags_novalue(*args)

def getFlags(*args):
  """getFlags(ea_t ea) -> flags_t"""
  return _idaapi.getFlags(*args)

def get_item_flag(*args):
  """get_item_flag(ea_t frm, int n, ea_t ea, bool appzero) -> flags_t"""
  return _idaapi.get_item_flag(*args)

def setFlags(*args):
  """setFlags(ea_t ea, flags_t flags)"""
  return _idaapi.setFlags(*args)
MS_VAL = _idaapi.MS_VAL
FF_IVL = _idaapi.FF_IVL

def hasValue(*args):
  """hasValue(flags_t F) -> bool"""
  return _idaapi.hasValue(*args)

def f_hasValue(*args):
  """f_hasValue(flags_t f, void arg1) -> bool"""
  return _idaapi.f_hasValue(*args)

def delValue(*args):
  """delValue(ea_t ea)"""
  return _idaapi.delValue(*args)

def isLoaded(*args):
  """isLoaded(ea_t ea) -> bool"""
  return _idaapi.isLoaded(*args)

def get_byte(*args):
  """get_byte(ea_t ea) -> uchar"""
  return _idaapi.get_byte(*args)

def get_db_byte(*args):
  """get_db_byte(ea_t ea) -> uchar"""
  return _idaapi.get_db_byte(*args)

def get_dbg_byte(*args):
  """get_dbg_byte(ea_t ea, uint32 x) -> bool"""
  return _idaapi.get_dbg_byte(*args)

def get_word(*args):
  """get_word(ea_t ea) -> ushort"""
  return _idaapi.get_word(*args)

def get_3byte(*args):
  """get_3byte(ea_t ea) -> uint32"""
  return _idaapi.get_3byte(*args)

def get_long(*args):
  """get_long(ea_t ea) -> uint32"""
  return _idaapi.get_long(*args)

def get_qword(*args):
  """get_qword(ea_t ea) -> uint64"""
  return _idaapi.get_qword(*args)

def get_full_byte(*args):
  """get_full_byte(ea_t ea) -> uint32"""
  return _idaapi.get_full_byte(*args)

def get_full_word(*args):
  """get_full_word(ea_t ea) -> uint64"""
  return _idaapi.get_full_word(*args)

def get_full_long(*args):
  """get_full_long(ea_t ea) -> uint64"""
  return _idaapi.get_full_long(*args)

def get_16bit(*args):
  """get_16bit(ea_t ea) -> uint32"""
  return _idaapi.get_16bit(*args)

def get_32bit(*args):
  """get_32bit(ea_t ea) -> uint32"""
  return _idaapi.get_32bit(*args)

def get_64bit(*args):
  """get_64bit(ea_t ea) -> uint64"""
  return _idaapi.get_64bit(*args)

def get_data_value(*args):
  """get_data_value(ea_t ea, uval_t v, asize_t size) -> bool"""
  return _idaapi.get_data_value(*args)

def get_original_byte(*args):
  """get_original_byte(ea_t ea) -> uint32"""
  return _idaapi.get_original_byte(*args)

def get_original_word(*args):
  """get_original_word(ea_t ea) -> uint64"""
  return _idaapi.get_original_word(*args)

def get_original_long(*args):
  """get_original_long(ea_t ea) -> uint64"""
  return _idaapi.get_original_long(*args)

def put_byte(*args):
  """put_byte(ea_t ea, uint32 x) -> bool"""
  return _idaapi.put_byte(*args)

def put_dbg_byte(*args):
  """put_dbg_byte(ea_t ea, uint32 x) -> bool"""
  return _idaapi.put_dbg_byte(*args)

def put_word(*args):
  """put_word(ea_t ea, uint64 x)"""
  return _idaapi.put_word(*args)

def put_long(*args):
  """put_long(ea_t ea, uint64 x)"""
  return _idaapi.put_long(*args)

def put_qword(*args):
  """put_qword(ea_t ea, uint64 x)"""
  return _idaapi.put_qword(*args)

def patch_byte(*args):
  """patch_byte(ea_t ea, uint32 x) -> bool"""
  return _idaapi.patch_byte(*args)

def patch_word(*args):
  """patch_word(ea_t ea, uint64 x) -> bool"""
  return _idaapi.patch_word(*args)

def patch_long(*args):
  """patch_long(ea_t ea, uint64 x) -> bool"""
  return _idaapi.patch_long(*args)

def add_byte(*args):
  """add_byte(ea_t ea, uint32 value)"""
  return _idaapi.add_byte(*args)

def add_word(*args):
  """add_word(ea_t ea, uint64 value)"""
  return _idaapi.add_word(*args)

def add_long(*args):
  """add_long(ea_t ea, uint64 value)"""
  return _idaapi.add_long(*args)

def add_qword(*args):
  """add_qword(ea_t ea, uint64 value)"""
  return _idaapi.add_qword(*args)

def get_zero_areas(*args):
  """get_zero_areas(areaset_t zareas, area_t range) -> bool"""
  return _idaapi.get_zero_areas(*args)

def put_many_bytes(*args):
  """put_many_bytes(ea_t ea, void buf)"""
  return _idaapi.put_many_bytes(*args)

def patch_many_bytes(*args):
  """patch_many_bytes(ea_t ea, void buf)"""
  return _idaapi.patch_many_bytes(*args)
MS_CLS = _idaapi.MS_CLS
FF_CODE = _idaapi.FF_CODE
FF_DATA = _idaapi.FF_DATA
FF_TAIL = _idaapi.FF_TAIL
FF_UNK = _idaapi.FF_UNK

def isCode(*args):
  """isCode(flags_t F) -> bool"""
  return _idaapi.isCode(*args)

def f_isCode(*args):
  """f_isCode(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isCode(*args)

def isData(*args):
  """isData(flags_t F) -> bool"""
  return _idaapi.isData(*args)

def f_isData(*args):
  """f_isData(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isData(*args)

def isTail(*args):
  """isTail(flags_t F) -> bool"""
  return _idaapi.isTail(*args)

def f_isTail(*args):
  """f_isTail(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isTail(*args)

def isNotTail(*args):
  """isNotTail(flags_t F) -> bool"""
  return _idaapi.isNotTail(*args)

def f_isNotTail(*args):
  """f_isNotTail(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isNotTail(*args)

def isUnknown(*args):
  """isUnknown(flags_t F) -> bool"""
  return _idaapi.isUnknown(*args)

def isHead(*args):
  """isHead(flags_t F) -> bool"""
  return _idaapi.isHead(*args)

def f_isHead(*args):
  """f_isHead(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isHead(*args)

def do_unknown(*args):
  """do_unknown(ea_t ea, int flags)"""
  return _idaapi.do_unknown(*args)
DOUNK_SIMPLE = _idaapi.DOUNK_SIMPLE
DOUNK_EXPAND = _idaapi.DOUNK_EXPAND
DOUNK_DELNAMES = _idaapi.DOUNK_DELNAMES

def do_unknown_range(*args):
  """do_unknown_range(ea_t ea, size_t size, int flags)"""
  return _idaapi.do_unknown_range(*args)

def is_manual_insn(*args):
  """is_manual_insn(ea_t ea) -> bool"""
  return _idaapi.is_manual_insn(*args)

def get_manual_insn(*args):
  """get_manual_insn(ea_t ea) -> char"""
  return _idaapi.get_manual_insn(*args)

def set_manual_insn(*args):
  """set_manual_insn(ea_t ea, char manual_insn)"""
  return _idaapi.set_manual_insn(*args)
MS_COMM = _idaapi.MS_COMM
FF_COMM = _idaapi.FF_COMM
FF_REF = _idaapi.FF_REF
FF_LINE = _idaapi.FF_LINE
FF_NAME = _idaapi.FF_NAME
FF_LABL = _idaapi.FF_LABL
FF_FLOW = _idaapi.FF_FLOW
FF_SIGN = _idaapi.FF_SIGN
FF_BNOT = _idaapi.FF_BNOT
FF_VAR = _idaapi.FF_VAR

def isFlow(*args):
  """isFlow(flags_t F) -> bool"""
  return _idaapi.isFlow(*args)

def isVar(*args):
  """isVar(flags_t F) -> bool"""
  return _idaapi.isVar(*args)

def hasExtra(*args):
  """hasExtra(flags_t F) -> bool"""
  return _idaapi.hasExtra(*args)

def has_cmt(*args):
  """has_cmt(flags_t F) -> bool"""
  return _idaapi.has_cmt(*args)

def hasRef(*args):
  """hasRef(flags_t F) -> bool"""
  return _idaapi.hasRef(*args)

def f_hasRef(*args):
  """f_hasRef(flags_t f, void arg1) -> bool"""
  return _idaapi.f_hasRef(*args)

def has_name(*args):
  """has_name(flags_t F) -> bool"""
  return _idaapi.has_name(*args)

def f_has_name(*args):
  """f_has_name(flags_t f, void arg1) -> bool"""
  return _idaapi.f_has_name(*args)
FF_ANYNAME = _idaapi.FF_ANYNAME

def has_dummy_name(*args):
  """has_dummy_name(flags_t F) -> bool"""
  return _idaapi.has_dummy_name(*args)

def f_has_dummy_name(*args):
  """f_has_dummy_name(flags_t f, void arg1) -> bool"""
  return _idaapi.f_has_dummy_name(*args)

def has_auto_name(*args):
  """has_auto_name(flags_t F) -> bool"""
  return _idaapi.has_auto_name(*args)

def has_any_name(*args):
  """has_any_name(flags_t F) -> bool"""
  return _idaapi.has_any_name(*args)

def has_user_name(*args):
  """has_user_name(flags_t F) -> bool"""
  return _idaapi.has_user_name(*args)

def f_has_user_name(*args):
  """f_has_user_name(flags_t F, void arg1) -> bool"""
  return _idaapi.f_has_user_name(*args)

def is_invsign(*args):
  """is_invsign(ea_t ea, flags_t F, int n) -> bool"""
  return _idaapi.is_invsign(*args)

def toggle_sign(*args):
  """toggle_sign(ea_t ea, int n) -> bool"""
  return _idaapi.toggle_sign(*args)

def signed_data_flag(*args):
  """signed_data_flag() -> flags_t"""
  return _idaapi.signed_data_flag(*args)

def is_signed_data(*args):
  """is_signed_data(flags_t F) -> bool"""
  return _idaapi.is_signed_data(*args)

def is_bnot(*args):
  """is_bnot(ea_t ea, flags_t F, int n) -> bool"""
  return _idaapi.is_bnot(*args)

def toggle_bnot(*args):
  """toggle_bnot(ea_t ea, int n) -> bool"""
  return _idaapi.toggle_bnot(*args)

def bnot_data_flag(*args):
  """bnot_data_flag() -> flags_t"""
  return _idaapi.bnot_data_flag(*args)

def is_bnot_data(*args):
  """is_bnot_data(flags_t F) -> bool"""
  return _idaapi.is_bnot_data(*args)

def is_lzero(*args):
  """is_lzero(ea_t ea, int n) -> bool"""
  return _idaapi.is_lzero(*args)

def set_lzero(*args):
  """set_lzero(ea_t ea, int n) -> bool"""
  return _idaapi.set_lzero(*args)

def clr_lzero(*args):
  """clr_lzero(ea_t ea, int n) -> bool"""
  return _idaapi.clr_lzero(*args)

def toggle_lzero(*args):
  """toggle_lzero(ea_t ea, int n) -> bool"""
  return _idaapi.toggle_lzero(*args)

def leading_zero_important(*args):
  """leading_zero_important(ea_t ea, int n) -> bool"""
  return _idaapi.leading_zero_important(*args)

def doVar(*args):
  """doVar(ea_t ea, bool isvar = True)"""
  return _idaapi.doVar(*args)
MS_0TYPE = _idaapi.MS_0TYPE
FF_0VOID = _idaapi.FF_0VOID
FF_0NUMH = _idaapi.FF_0NUMH
FF_0NUMD = _idaapi.FF_0NUMD
FF_0CHAR = _idaapi.FF_0CHAR
FF_0SEG = _idaapi.FF_0SEG
FF_0OFF = _idaapi.FF_0OFF
FF_0NUMB = _idaapi.FF_0NUMB
FF_0NUMO = _idaapi.FF_0NUMO
FF_0ENUM = _idaapi.FF_0ENUM
FF_0FOP = _idaapi.FF_0FOP
FF_0STRO = _idaapi.FF_0STRO
FF_0STK = _idaapi.FF_0STK
FF_0FLT = _idaapi.FF_0FLT
MS_1TYPE = _idaapi.MS_1TYPE
FF_1VOID = _idaapi.FF_1VOID
FF_1NUMH = _idaapi.FF_1NUMH
FF_1NUMD = _idaapi.FF_1NUMD
FF_1CHAR = _idaapi.FF_1CHAR
FF_1SEG = _idaapi.FF_1SEG
FF_1OFF = _idaapi.FF_1OFF
FF_1NUMB = _idaapi.FF_1NUMB
FF_1NUMO = _idaapi.FF_1NUMO
FF_1ENUM = _idaapi.FF_1ENUM
FF_1FOP = _idaapi.FF_1FOP
FF_1STRO = _idaapi.FF_1STRO
FF_1STK = _idaapi.FF_1STK
FF_1FLT = _idaapi.FF_1FLT

def isDefArg0(*args):
  """isDefArg0(flags_t F) -> bool"""
  return _idaapi.isDefArg0(*args)

def isDefArg1(*args):
  """isDefArg1(flags_t F) -> bool"""
  return _idaapi.isDefArg1(*args)

def isOff0(*args):
  """isOff0(flags_t F) -> bool"""
  return _idaapi.isOff0(*args)

def isOff1(*args):
  """isOff1(flags_t F) -> bool"""
  return _idaapi.isOff1(*args)

def isChar0(*args):
  """isChar0(flags_t F) -> bool"""
  return _idaapi.isChar0(*args)

def isChar1(*args):
  """isChar1(flags_t F) -> bool"""
  return _idaapi.isChar1(*args)

def isSeg0(*args):
  """isSeg0(flags_t F) -> bool"""
  return _idaapi.isSeg0(*args)

def isSeg1(*args):
  """isSeg1(flags_t F) -> bool"""
  return _idaapi.isSeg1(*args)

def isEnum0(*args):
  """isEnum0(flags_t F) -> bool"""
  return _idaapi.isEnum0(*args)

def isEnum1(*args):
  """isEnum1(flags_t F) -> bool"""
  return _idaapi.isEnum1(*args)

def isFop0(*args):
  """isFop0(flags_t F) -> bool"""
  return _idaapi.isFop0(*args)

def isFop1(*args):
  """isFop1(flags_t F) -> bool"""
  return _idaapi.isFop1(*args)

def isStroff0(*args):
  """isStroff0(flags_t F) -> bool"""
  return _idaapi.isStroff0(*args)

def isStroff1(*args):
  """isStroff1(flags_t F) -> bool"""
  return _idaapi.isStroff1(*args)

def isStkvar0(*args):
  """isStkvar0(flags_t F) -> bool"""
  return _idaapi.isStkvar0(*args)

def isStkvar1(*args):
  """isStkvar1(flags_t F) -> bool"""
  return _idaapi.isStkvar1(*args)

def isFloat0(*args):
  """isFloat0(flags_t F) -> bool"""
  return _idaapi.isFloat0(*args)

def isFloat1(*args):
  """isFloat1(flags_t F) -> bool"""
  return _idaapi.isFloat1(*args)

def isNum0(*args):
  """isNum0(flags_t F) -> bool"""
  return _idaapi.isNum0(*args)

def isNum1(*args):
  """isNum1(flags_t F) -> bool"""
  return _idaapi.isNum1(*args)

def get_optype_flags0(*args):
  """get_optype_flags0(flags_t F) -> flags_t"""
  return _idaapi.get_optype_flags0(*args)

def get_optype_flags1(*args):
  """get_optype_flags1(flags_t F) -> flags_t"""
  return _idaapi.get_optype_flags1(*args)
OPND_OUTER = _idaapi.OPND_OUTER
OPND_MASK = _idaapi.OPND_MASK
OPND_ALL = _idaapi.OPND_ALL

def isDefArg(*args):
  """isDefArg(flags_t F, int n) -> bool"""
  return _idaapi.isDefArg(*args)

def isOff(*args):
  """isOff(flags_t F, int n) -> bool"""
  return _idaapi.isOff(*args)

def isChar(*args):
  """isChar(flags_t F, int n) -> bool"""
  return _idaapi.isChar(*args)

def isSeg(*args):
  """isSeg(flags_t F, int n) -> bool"""
  return _idaapi.isSeg(*args)

def isEnum(*args):
  """isEnum(flags_t F, int n) -> bool"""
  return _idaapi.isEnum(*args)

def isFop(*args):
  """isFop(flags_t F, int n) -> bool"""
  return _idaapi.isFop(*args)

def isStroff(*args):
  """isStroff(flags_t F, int n) -> bool"""
  return _idaapi.isStroff(*args)

def isStkvar(*args):
  """isStkvar(flags_t F, int n) -> bool"""
  return _idaapi.isStkvar(*args)

def isFltnum(*args):
  """isFltnum(flags_t F, int n) -> bool"""
  return _idaapi.isFltnum(*args)

def isNum(*args):
  """isNum(flags_t F, int n) -> bool"""
  return _idaapi.isNum(*args)

def isVoid(*args):
  """isVoid(ea_t ea, flags_t F, int n) -> bool"""
  return _idaapi.isVoid(*args)

def set_op_type(*args):
  """set_op_type(ea_t ea, flags_t type, int n) -> bool"""
  return _idaapi.set_op_type(*args)

def typeflag(*args):
  """typeflag(ea_t ea, flags_t oldflag, flags_t type, int n) -> flags_t"""
  return _idaapi.typeflag(*args)

def op_seg(*args):
  """op_seg(ea_t ea, int n) -> bool"""
  return _idaapi.op_seg(*args)

def op_enum(*args):
  """op_enum(ea_t ea, int n, enum_t id, uchar serial) -> bool"""
  return _idaapi.op_enum(*args)

def get_enum_id(*args):
  """get_enum_id(ea_t ea, int n) -> enum_t"""
  return _idaapi.get_enum_id(*args)

def op_stroff(*args):
  """op_stroff(ea_t ea, int n, tid_t path, int path_len, adiff_t delta) -> bool"""
  return _idaapi.op_stroff(*args)

def set_stroff_path(*args):
  """set_stroff_path(ea_t ea, int n, tid_t path, int plen, adiff_t delta) -> bool"""
  return _idaapi.set_stroff_path(*args)

def get_stroff_path(*args):
  """get_stroff_path(ea_t ea, int n, tid_t path, adiff_t delta) -> int"""
  return _idaapi.get_stroff_path(*args)

def del_stroff_path(*args):
  """del_stroff_path(ea_t ea, int n) -> bool"""
  return _idaapi.del_stroff_path(*args)

def op_stkvar(*args):
  """op_stkvar(ea_t ea, int n) -> bool"""
  return _idaapi.op_stkvar(*args)

def set_forced_operand(*args):
  """set_forced_operand(ea_t ea, int n, char op) -> bool"""
  return _idaapi.set_forced_operand(*args)

def get_forced_operand(*args):
  """get_forced_operand(ea_t ea, int n) -> ssize_t"""
  return _idaapi.get_forced_operand(*args)

def is_forced_operand(*args):
  """is_forced_operand(ea_t ea, int n) -> bool"""
  return _idaapi.is_forced_operand(*args)

def charflag(*args):
  """charflag() -> flags_t"""
  return _idaapi.charflag(*args)

def offflag(*args):
  """offflag() -> flags_t"""
  return _idaapi.offflag(*args)

def enumflag(*args):
  """enumflag() -> flags_t"""
  return _idaapi.enumflag(*args)

def stroffflag(*args):
  """stroffflag() -> flags_t"""
  return _idaapi.stroffflag(*args)

def stkvarflag(*args):
  """stkvarflag() -> flags_t"""
  return _idaapi.stkvarflag(*args)

def fltflag(*args):
  """fltflag() -> flags_t"""
  return _idaapi.fltflag(*args)

def segflag(*args):
  """segflag() -> flags_t"""
  return _idaapi.segflag(*args)

def numflag(*args):
  """numflag() -> flags_t"""
  return _idaapi.numflag(*args)

def hexflag(*args):
  """hexflag() -> flags_t"""
  return _idaapi.hexflag(*args)

def decflag(*args):
  """decflag() -> flags_t"""
  return _idaapi.decflag(*args)

def octflag(*args):
  """octflag() -> flags_t"""
  return _idaapi.octflag(*args)

def binflag(*args):
  """binflag() -> flags_t"""
  return _idaapi.binflag(*args)

def op_chr(*args):
  """op_chr(ea_t ea, int n) -> bool"""
  return _idaapi.op_chr(*args)

def op_num(*args):
  """op_num(ea_t ea, int n) -> bool"""
  return _idaapi.op_num(*args)

def op_hex(*args):
  """op_hex(ea_t ea, int n) -> bool"""
  return _idaapi.op_hex(*args)

def op_dec(*args):
  """op_dec(ea_t ea, int n) -> bool"""
  return _idaapi.op_dec(*args)

def op_oct(*args):
  """op_oct(ea_t ea, int n) -> bool"""
  return _idaapi.op_oct(*args)

def op_bin(*args):
  """op_bin(ea_t ea, int n) -> bool"""
  return _idaapi.op_bin(*args)

def op_flt(*args):
  """op_flt(ea_t ea, int n) -> bool"""
  return _idaapi.op_flt(*args)

def noType(*args):
  """noType(ea_t ea, int n) -> bool"""
  return _idaapi.noType(*args)

def getDefaultRadix(*args):
  """getDefaultRadix() -> int"""
  return _idaapi.getDefaultRadix(*args)

def getRadix(*args):
  """getRadix(flags_t F, int n) -> int"""
  return _idaapi.getRadix(*args)

def getRadixEA(*args):
  """getRadixEA(ea_t ea, int n) -> int"""
  return _idaapi.getRadixEA(*args)
DT_TYPE = _idaapi.DT_TYPE
FF_BYTE = _idaapi.FF_BYTE
FF_WORD = _idaapi.FF_WORD
FF_DWRD = _idaapi.FF_DWRD
FF_QWRD = _idaapi.FF_QWRD
FF_TBYT = _idaapi.FF_TBYT
FF_ASCI = _idaapi.FF_ASCI
FF_STRU = _idaapi.FF_STRU
FF_OWRD = _idaapi.FF_OWRD
FF_FLOAT = _idaapi.FF_FLOAT
FF_DOUBLE = _idaapi.FF_DOUBLE
FF_PACKREAL = _idaapi.FF_PACKREAL
FF_ALIGN = _idaapi.FF_ALIGN
FF_3BYTE = _idaapi.FF_3BYTE

def codeflag(*args):
  """codeflag() -> flags_t"""
  return _idaapi.codeflag(*args)

def byteflag(*args):
  """byteflag() -> flags_t"""
  return _idaapi.byteflag(*args)

def wordflag(*args):
  """wordflag() -> flags_t"""
  return _idaapi.wordflag(*args)

def dwrdflag(*args):
  """dwrdflag() -> flags_t"""
  return _idaapi.dwrdflag(*args)

def qwrdflag(*args):
  """qwrdflag() -> flags_t"""
  return _idaapi.qwrdflag(*args)

def owrdflag(*args):
  """owrdflag() -> flags_t"""
  return _idaapi.owrdflag(*args)

def tbytflag(*args):
  """tbytflag() -> flags_t"""
  return _idaapi.tbytflag(*args)

def asciflag(*args):
  """asciflag() -> flags_t"""
  return _idaapi.asciflag(*args)

def struflag(*args):
  """struflag() -> flags_t"""
  return _idaapi.struflag(*args)

def alignflag(*args):
  """alignflag() -> flags_t"""
  return _idaapi.alignflag(*args)

def floatflag(*args):
  """floatflag() -> flags_t"""
  return _idaapi.floatflag(*args)

def doubleflag(*args):
  """doubleflag() -> flags_t"""
  return _idaapi.doubleflag(*args)

def tribyteflag(*args):
  """tribyteflag() -> flags_t"""
  return _idaapi.tribyteflag(*args)

def packrealflag(*args):
  """packrealflag() -> flags_t"""
  return _idaapi.packrealflag(*args)

def get_flags_by_size(*args):
  """get_flags_by_size(size_t size) -> flags_t"""
  return _idaapi.get_flags_by_size(*args)

def do_data_ex(*args):
  """do_data_ex(ea_t ea, flags_t dataflag, asize_t size, tid_t tid) -> bool"""
  return _idaapi.do_data_ex(*args)

def doByte(*args):
  """doByte(ea_t ea, asize_t length) -> bool"""
  return _idaapi.doByte(*args)

def doWord(*args):
  """doWord(ea_t ea, asize_t length) -> bool"""
  return _idaapi.doWord(*args)

def doDwrd(*args):
  """doDwrd(ea_t ea, asize_t length) -> bool"""
  return _idaapi.doDwrd(*args)

def doQwrd(*args):
  """doQwrd(ea_t ea, asize_t length) -> bool"""
  return _idaapi.doQwrd(*args)

def doOwrd(*args):
  """doOwrd(ea_t ea, asize_t length) -> bool"""
  return _idaapi.doOwrd(*args)

def doTbyt(*args):
  """doTbyt(ea_t ea, asize_t length) -> bool"""
  return _idaapi.doTbyt(*args)

def doFloat(*args):
  """doFloat(ea_t ea, asize_t length) -> bool"""
  return _idaapi.doFloat(*args)

def doDouble(*args):
  """doDouble(ea_t ea, asize_t length) -> bool"""
  return _idaapi.doDouble(*args)

def doPackReal(*args):
  """doPackReal(ea_t ea, asize_t length) -> bool"""
  return _idaapi.doPackReal(*args)

def doASCI(*args):
  """doASCI(ea_t ea, asize_t length) -> bool"""
  return _idaapi.doASCI(*args)

def do3byte(*args):
  """do3byte(ea_t ea, asize_t length) -> bool"""
  return _idaapi.do3byte(*args)

def doStruct(*args):
  """doStruct(ea_t ea, asize_t length, tid_t tid) -> bool"""
  return _idaapi.doStruct(*args)

def doAlign(*args):
  """doAlign(ea_t ea, asize_t length, int alignment) -> bool"""
  return _idaapi.doAlign(*args)

def calc_min_align(*args):
  """calc_min_align(asize_t length) -> int"""
  return _idaapi.calc_min_align(*args)

def calc_max_align(*args):
  """calc_max_align(ea_t endea) -> int"""
  return _idaapi.calc_max_align(*args)

def calc_def_align(*args):
  """calc_def_align(ea_t ea, int mina, int maxa) -> int"""
  return _idaapi.calc_def_align(*args)

def do16bit(*args):
  """do16bit(ea_t ea, asize_t length) -> bool"""
  return _idaapi.do16bit(*args)

def do32bit(*args):
  """do32bit(ea_t ea, asize_t length) -> bool"""
  return _idaapi.do32bit(*args)

def isByte(*args):
  """isByte(flags_t F) -> bool"""
  return _idaapi.isByte(*args)

def isWord(*args):
  """isWord(flags_t F) -> bool"""
  return _idaapi.isWord(*args)

def isDwrd(*args):
  """isDwrd(flags_t F) -> bool"""
  return _idaapi.isDwrd(*args)

def isQwrd(*args):
  """isQwrd(flags_t F) -> bool"""
  return _idaapi.isQwrd(*args)

def isOwrd(*args):
  """isOwrd(flags_t F) -> bool"""
  return _idaapi.isOwrd(*args)

def isTbyt(*args):
  """isTbyt(flags_t F) -> bool"""
  return _idaapi.isTbyt(*args)

def isFloat(*args):
  """isFloat(flags_t F) -> bool"""
  return _idaapi.isFloat(*args)

def isDouble(*args):
  """isDouble(flags_t F) -> bool"""
  return _idaapi.isDouble(*args)

def isPackReal(*args):
  """isPackReal(flags_t F) -> bool"""
  return _idaapi.isPackReal(*args)

def isASCII(*args):
  """isASCII(flags_t F) -> bool"""
  return _idaapi.isASCII(*args)

def isStruct(*args):
  """isStruct(flags_t F) -> bool"""
  return _idaapi.isStruct(*args)

def isAlign(*args):
  """isAlign(flags_t F) -> bool"""
  return _idaapi.isAlign(*args)

def is3byte(*args):
  """is3byte(flags_t F) -> bool"""
  return _idaapi.is3byte(*args)

def f_isByte(*args):
  """f_isByte(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isByte(*args)

def f_isWord(*args):
  """f_isWord(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isWord(*args)

def f_isDwrd(*args):
  """f_isDwrd(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isDwrd(*args)

def f_isQwrd(*args):
  """f_isQwrd(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isQwrd(*args)

def f_isOwrd(*args):
  """f_isOwrd(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isOwrd(*args)

def f_isTbyt(*args):
  """f_isTbyt(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isTbyt(*args)

def f_isFloat(*args):
  """f_isFloat(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isFloat(*args)

def f_isDouble(*args):
  """f_isDouble(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isDouble(*args)

def f_isPackReal(*args):
  """f_isPackReal(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isPackReal(*args)

def f_isASCII(*args):
  """f_isASCII(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isASCII(*args)

def f_isStruct(*args):
  """f_isStruct(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isStruct(*args)

def f_isAlign(*args):
  """f_isAlign(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isAlign(*args)

def f_is3byte(*args):
  """f_is3byte(flags_t F, void arg1) -> bool"""
  return _idaapi.f_is3byte(*args)

def is_same_data_type(*args):
  """is_same_data_type(flags_t F1, flags_t F2) -> bool"""
  return _idaapi.is_same_data_type(*args)

def get_max_ascii_length(*args):
  """get_max_ascii_length(ea_t ea, int32 strtype, bool ignore_heads = False) -> size_t"""
  return _idaapi.get_max_ascii_length(*args)

def get_ascii_contents(*args):
  """get_ascii_contents(ea_t ea, size_t len, int32 type) -> bool"""
  return _idaapi.get_ascii_contents(*args)

def make_ascii_string(*args):
  """make_ascii_string(ea_t start, size_t len, int32 strtype) -> bool"""
  return _idaapi.make_ascii_string(*args)

def print_ascii_string_type(*args):
  """print_ascii_string_type(int32 strtype) -> char"""
  return _idaapi.print_ascii_string_type(*args)

def get_typeinfo(*args):
  """get_typeinfo(ea_t ea, int n, flags_t flags, typeinfo_t buf) -> typeinfo_t"""
  return _idaapi.get_typeinfo(*args)

def set_typeinfo(*args):
  """set_typeinfo(ea_t ea, int n, flags_t flag, typeinfo_t ti) -> bool"""
  return _idaapi.set_typeinfo(*args)

def get_data_elsize(*args):
  """get_data_elsize(ea_t ea, flags_t F, typeinfo_t ti = None) -> asize_t"""
  return _idaapi.get_data_elsize(*args)

def can_define_item(*args):
  """can_define_item(ea_t ea, asize_t length, flags_t flags) -> bool"""
  return _idaapi.can_define_item(*args)
MS_CODE = _idaapi.MS_CODE
FF_FUNC = _idaapi.FF_FUNC
FF_IMMD = _idaapi.FF_IMMD
FF_JUMP = _idaapi.FF_JUMP

def isImmd(*args):
  """isImmd(flags_t F) -> bool"""
  return _idaapi.isImmd(*args)

def isFunc(*args):
  """isFunc(flags_t F) -> bool"""
  return _idaapi.isFunc(*args)

def doImmd(*args):
  """doImmd(ea_t ea)"""
  return _idaapi.doImmd(*args)

def noImmd(*args):
  """noImmd(ea_t ea)"""
  return _idaapi.noImmd(*args)
MS_TAIL = _idaapi.MS_TAIL
TL_TSFT = _idaapi.TL_TSFT
TL_TOFF = _idaapi.TL_TOFF
MAX_TOFF = _idaapi.MAX_TOFF

def gettof(*args):
  """gettof(flags_t F) -> ushort"""
  return _idaapi.gettof(*args)

def set_cmt(*args):
  """set_cmt(ea_t ea, char comm, bool rptble) -> bool"""
  return _idaapi.set_cmt(*args)

def get_cmt(*args):
  """get_cmt(ea_t ea, bool rptble) -> ssize_t"""
  return _idaapi.get_cmt(*args)

def append_cmt(*args):
  """append_cmt(ea_t ea, char str, bool rptble) -> bool"""
  return _idaapi.append_cmt(*args)

def find_byte(*args):
  """find_byte(ea_t sEA, asize_t size, uchar value, bool sense_case) -> ea_t"""
  return _idaapi.find_byte(*args)

def find_byter(*args):
  """find_byter(ea_t sEA, asize_t size, uchar value, bool sense_case) -> ea_t"""
  return _idaapi.find_byter(*args)

def bin_search(*args):
  """
    bin_search(ea_t startEA, ea_t endEA, uchar image, uchar mask, 
        size_t len, int step, int flags) -> ea_t
    """
  return _idaapi.bin_search(*args)
BIN_SEARCH_FORWARD = _idaapi.BIN_SEARCH_FORWARD
BIN_SEARCH_BACKWARD = _idaapi.BIN_SEARCH_BACKWARD
BIN_SEARCH_CASE = _idaapi.BIN_SEARCH_CASE
BIN_SEARCH_NOCASE = _idaapi.BIN_SEARCH_NOCASE
BIN_SEARCH_NOBREAK = _idaapi.BIN_SEARCH_NOBREAK

def equal_bytes(*args):
  """equal_bytes(ea_t ea, uchar image, uchar mask, size_t len, bool sense_case) -> bool"""
  return _idaapi.equal_bytes(*args)

def invalidate_dbgmem_config(*args):
  """invalidate_dbgmem_config()"""
  return _idaapi.invalidate_dbgmem_config(*args)

def invalidate_dbgmem_contents(*args):
  """invalidate_dbgmem_contents(ea_t ea, asize_t size)"""
  return _idaapi.invalidate_dbgmem_contents(*args)

def is_debugger_on(*args):
  """is_debugger_on() -> bool"""
  return _idaapi.is_debugger_on(*args)
class hidden_area_t(area_t):
    """Proxy of C++ hidden_area_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    description = _swig_property(_idaapi.hidden_area_t_description_get, _idaapi.hidden_area_t_description_set)
    header = _swig_property(_idaapi.hidden_area_t_header_get, _idaapi.hidden_area_t_header_set)
    footer = _swig_property(_idaapi.hidden_area_t_footer_get, _idaapi.hidden_area_t_footer_set)
    visible = _swig_property(_idaapi.hidden_area_t_visible_get, _idaapi.hidden_area_t_visible_set)
    color = _swig_property(_idaapi.hidden_area_t_color_get, _idaapi.hidden_area_t_color_set)
    def __init__(self, *args): 
        """__init__(self) -> hidden_area_t"""
        this = _idaapi.new_hidden_area_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_hidden_area_t
    __del__ = lambda self : None;
hidden_area_t_swigregister = _idaapi.hidden_area_t_swigregister
hidden_area_t_swigregister(hidden_area_t)

def noUsed(*args):
  """
    noUsed(ea_t ea)
    noUsed(ea_t sEA, ea_t eEA)
    """
  return _idaapi.noUsed(*args)


def update_hidden_area(*args):
  """update_hidden_area(hidden_area_t ha) -> bool"""
  return _idaapi.update_hidden_area(*args)

def add_hidden_area(*args):
  """
    add_hidden_area(ea_t ea1, ea_t ea2, char description, char header, 
        char footer, bgcolor_t color) -> bool
    """
  return _idaapi.add_hidden_area(*args)

def get_hidden_area(*args):
  """get_hidden_area(ea_t ea) -> hidden_area_t"""
  return _idaapi.get_hidden_area(*args)

def getn_hidden_area(*args):
  """getn_hidden_area(int n) -> hidden_area_t"""
  return _idaapi.getn_hidden_area(*args)

def get_hidden_area_qty(*args):
  """get_hidden_area_qty() -> int"""
  return _idaapi.get_hidden_area_qty(*args)

def get_hidden_area_num(*args):
  """get_hidden_area_num(ea_t ea) -> int"""
  return _idaapi.get_hidden_area_num(*args)

def get_prev_hidden_area(*args):
  """get_prev_hidden_area(ea_t ea) -> hidden_area_t"""
  return _idaapi.get_prev_hidden_area(*args)

def get_next_hidden_area(*args):
  """get_next_hidden_area(ea_t ea) -> hidden_area_t"""
  return _idaapi.get_next_hidden_area(*args)

def del_hidden_area(*args):
  """del_hidden_area(ea_t ea) -> bool"""
  return _idaapi.del_hidden_area(*args)

def get_data_type_size(*args):
  """get_data_type_size(flags_t F, typeinfo_t ti) -> asize_t"""
  return _idaapi.get_data_type_size(*args)

def f_isUnknown(*args):
  """f_isUnknown(flags_t F, void arg1) -> bool"""
  return _idaapi.f_isUnknown(*args)
class bpt_t(object):
    """Proxy of C++ bpt_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ea = _swig_property(_idaapi.bpt_t_ea_get, _idaapi.bpt_t_ea_set)
    size = _swig_property(_idaapi.bpt_t_size_get, _idaapi.bpt_t_size_set)
    type = _swig_property(_idaapi.bpt_t_type_get, _idaapi.bpt_t_type_set)
    pass_count = _swig_property(_idaapi.bpt_t_pass_count_get, _idaapi.bpt_t_pass_count_set)
    flags = _swig_property(_idaapi.bpt_t_flags_get, _idaapi.bpt_t_flags_set)
    condition = _swig_property(_idaapi.bpt_t_condition_get, _idaapi.bpt_t_condition_set)
    def __init__(self, *args): 
        """__init__(self) -> bpt_t"""
        this = _idaapi.new_bpt_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_bpt_t
    __del__ = lambda self : None;
bpt_t_swigregister = _idaapi.bpt_t_swigregister
bpt_t_swigregister(bpt_t)
power2 = cvar.power2
lowbits = cvar.lowbits
dbg = cvar.dbg
BPT_BRK = _idaapi.BPT_BRK
BPT_TRACE = _idaapi.BPT_TRACE

tev_none = _idaapi.tev_none
tev_insn = _idaapi.tev_insn
tev_call = _idaapi.tev_call
tev_ret = _idaapi.tev_ret
tev_bpt = _idaapi.tev_bpt
class tev_info_t(object):
    """Proxy of C++ tev_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_idaapi.tev_info_t_type_get, _idaapi.tev_info_t_type_set)
    tid = _swig_property(_idaapi.tev_info_t_tid_get, _idaapi.tev_info_t_tid_set)
    ea = _swig_property(_idaapi.tev_info_t_ea_get, _idaapi.tev_info_t_ea_set)
    def __init__(self, *args): 
        """__init__(self) -> tev_info_t"""
        this = _idaapi.new_tev_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_tev_info_t
    __del__ = lambda self : None;
tev_info_t_swigregister = _idaapi.tev_info_t_swigregister
tev_info_t_swigregister(tev_info_t)

DEC_NOTASK = _idaapi.DEC_NOTASK
DEC_ERROR = _idaapi.DEC_ERROR
DEC_TIMEOUT = _idaapi.DEC_TIMEOUT

def wait_for_next_event(*args):
  """wait_for_next_event(int wfne, int timeout_in_secs) -> dbg_event_code_t"""
  return _idaapi.wait_for_next_event(*args)
WFNE_ANY = _idaapi.WFNE_ANY
WFNE_SUSP = _idaapi.WFNE_SUSP
WFNE_SILENT = _idaapi.WFNE_SILENT
WFNE_CONT = _idaapi.WFNE_CONT
WFNE_NOWAIT = _idaapi.WFNE_NOWAIT
WFNE_USEC = _idaapi.WFNE_USEC

def get_debug_event(*args):
  """get_debug_event() -> debug_event_t"""
  return _idaapi.get_debug_event(*args)

def set_debugger_options(*args):
  """set_debugger_options(uint options) -> uint"""
  return _idaapi.set_debugger_options(*args)
DOPT_SEGM_MSGS = _idaapi.DOPT_SEGM_MSGS
DOPT_START_BPT = _idaapi.DOPT_START_BPT
DOPT_THREAD_MSGS = _idaapi.DOPT_THREAD_MSGS
DOPT_THREAD_BPT = _idaapi.DOPT_THREAD_BPT
DOPT_BPT_MSGS = _idaapi.DOPT_BPT_MSGS
DOPT_LIB_MSGS = _idaapi.DOPT_LIB_MSGS
DOPT_LIB_BPT = _idaapi.DOPT_LIB_BPT
DOPT_INFO_MSGS = _idaapi.DOPT_INFO_MSGS
DOPT_INFO_BPT = _idaapi.DOPT_INFO_BPT
DOPT_REAL_MEMORY = _idaapi.DOPT_REAL_MEMORY
DOPT_REDO_STACK = _idaapi.DOPT_REDO_STACK
DOPT_ENTRY_BPT = _idaapi.DOPT_ENTRY_BPT
DOPT_EXCDLG = _idaapi.DOPT_EXCDLG
EXCDLG_NEVER = _idaapi.EXCDLG_NEVER
EXCDLG_UNKNOWN = _idaapi.EXCDLG_UNKNOWN
EXCDLG_ALWAYS = _idaapi.EXCDLG_ALWAYS
DOPT_LOAD_DINFO = _idaapi.DOPT_LOAD_DINFO

def set_remote_debugger(*args):
  """set_remote_debugger(char host, char _pass, int port = -1)"""
  return _idaapi.set_remote_debugger(*args)

def get_process_options(*args):
  """
    get_process_options(qstring path, qstring args, qstring sdir, qstring host, 
        qstring _pass, int port)
    """
  return _idaapi.get_process_options(*args)

def set_process_options(*args):
  """
    set_process_options(char path, char args, char sdir, char host, char _pass, 
        int port)
    """
  return _idaapi.set_process_options(*args)

def retrieve_exceptions(*args):
  """retrieve_exceptions() -> excvec_t"""
  return _idaapi.retrieve_exceptions(*args)

def store_exceptions(*args):
  """store_exceptions() -> bool"""
  return _idaapi.store_exceptions(*args)

def define_exception(*args):
  """define_exception(uint code, char name, char desc, int flags) -> char"""
  return _idaapi.define_exception(*args)

def have_set_options(*args):
  """have_set_options( dbg) -> bool"""
  return _idaapi.have_set_options(*args)

def set_dbg_options(*args):
  """set_dbg_options(char keyword, int value_type, void value) -> char"""
  return _idaapi.set_dbg_options(*args)

def run_requests(*args):
  """run_requests() -> bool"""
  return _idaapi.run_requests(*args)

def get_running_request(*args):
  """get_running_request() -> ui_notification_t"""
  return _idaapi.get_running_request(*args)

def get_running_notification(*args):
  """get_running_notification() -> dbg_notification_t"""
  return _idaapi.get_running_notification(*args)

def clear_requests_queue(*args):
  """clear_requests_queue()"""
  return _idaapi.clear_requests_queue(*args)

def get_process_state(*args):
  """get_process_state() -> int"""
  return _idaapi.get_process_state(*args)

def start_process(*args):
  """start_process(char path, char args, char sdir) -> int"""
  return _idaapi.start_process(*args)

def request_start_process(*args):
  """request_start_process(char path, char args, char sdir) -> int"""
  return _idaapi.request_start_process(*args)

def suspend_process(*args):
  """suspend_process() -> bool"""
  return _idaapi.suspend_process(*args)

def request_suspend_process(*args):
  """request_suspend_process() -> bool"""
  return _idaapi.request_suspend_process(*args)

def continue_process(*args):
  """continue_process() -> bool"""
  return _idaapi.continue_process(*args)

def request_continue_process(*args):
  """request_continue_process() -> bool"""
  return _idaapi.request_continue_process(*args)

def exit_process(*args):
  """exit_process() -> bool"""
  return _idaapi.exit_process(*args)

def request_exit_process(*args):
  """request_exit_process() -> bool"""
  return _idaapi.request_exit_process(*args)

def get_process_qty(*args):
  """get_process_qty() -> int"""
  return _idaapi.get_process_qty(*args)

def get_process_info(*args):
  """get_process_info(int n, process_info_t process_info) -> pid_t"""
  return _idaapi.get_process_info(*args)

def attach_process(*args):
  """attach_process(pid_t pid, int event_id) -> int"""
  return _idaapi.attach_process(*args)

def request_attach_process(*args):
  """request_attach_process(pid_t pid, int event_id) -> int"""
  return _idaapi.request_attach_process(*args)

def detach_process(*args):
  """detach_process() -> bool"""
  return _idaapi.detach_process(*args)

def request_detach_process(*args):
  """request_detach_process() -> bool"""
  return _idaapi.request_detach_process(*args)

def get_thread_qty(*args):
  """get_thread_qty() -> int"""
  return _idaapi.get_thread_qty(*args)

def getn_thread(*args):
  """getn_thread(int n) -> thid_t"""
  return _idaapi.getn_thread(*args)

def select_thread(*args):
  """select_thread(thid_t tid) -> bool"""
  return _idaapi.select_thread(*args)

def request_select_thread(*args):
  """request_select_thread(thid_t tid) -> bool"""
  return _idaapi.request_select_thread(*args)

def step_into(*args):
  """step_into() -> bool"""
  return _idaapi.step_into(*args)

def request_step_into(*args):
  """request_step_into() -> bool"""
  return _idaapi.request_step_into(*args)

def step_over(*args):
  """step_over() -> bool"""
  return _idaapi.step_over(*args)

def request_step_over(*args):
  """request_step_over() -> bool"""
  return _idaapi.request_step_over(*args)

def run_to(*args):
  """run_to(ea_t ea) -> bool"""
  return _idaapi.run_to(*args)

def request_run_to(*args):
  """request_run_to(ea_t ea) -> bool"""
  return _idaapi.request_run_to(*args)

def step_until_ret(*args):
  """step_until_ret() -> bool"""
  return _idaapi.step_until_ret(*args)

def request_step_until_ret(*args):
  """request_step_until_ret() -> bool"""
  return _idaapi.request_step_until_ret(*args)

def get_reg_val(*args):
  """get_reg_val(char regname, regval_t regval) -> bool"""
  return _idaapi.get_reg_val(*args)

def set_reg_val(*args):
  """set_reg_val(char regname, regval_t regval) -> bool"""
  return _idaapi.set_reg_val(*args)

def request_set_reg_val(*args):
  """request_set_reg_val(char regname, regval_t regval) -> bool"""
  return _idaapi.request_set_reg_val(*args)

def get_bpt_qty(*args):
  """get_bpt_qty() -> int"""
  return _idaapi.get_bpt_qty(*args)

def getn_bpt(*args):
  """getn_bpt(int n, bpt_t bpt) -> bool"""
  return _idaapi.getn_bpt(*args)

def get_bpt(*args):
  """get_bpt(ea_t ea, bpt_t bpt) -> bool"""
  return _idaapi.get_bpt(*args)

def add_bpt(*args):
  """add_bpt(ea_t ea, asize_t size, bpttype_t type) -> bool"""
  return _idaapi.add_bpt(*args)

def request_add_bpt(*args):
  """request_add_bpt(ea_t ea, asize_t size, bpttype_t type) -> bool"""
  return _idaapi.request_add_bpt(*args)

def del_bpt(*args):
  """del_bpt(ea_t ea) -> bool"""
  return _idaapi.del_bpt(*args)

def request_del_bpt(*args):
  """request_del_bpt(ea_t ea) -> bool"""
  return _idaapi.request_del_bpt(*args)

def update_bpt(*args):
  """update_bpt(bpt_t bpt) -> bool"""
  return _idaapi.update_bpt(*args)

def enable_bpt(*args):
  """enable_bpt(ea_t ea, bool enable) -> bool"""
  return _idaapi.enable_bpt(*args)

def request_enable_bpt(*args):
  """request_enable_bpt(ea_t ea, bool enable) -> bool"""
  return _idaapi.request_enable_bpt(*args)

def set_trace_size(*args):
  """set_trace_size(int size) -> bool"""
  return _idaapi.set_trace_size(*args)

def clear_trace(*args):
  """clear_trace()"""
  return _idaapi.clear_trace(*args)

def request_clear_trace(*args):
  """request_clear_trace()"""
  return _idaapi.request_clear_trace(*args)

def is_step_trace_enabled(*args):
  """is_step_trace_enabled() -> bool"""
  return _idaapi.is_step_trace_enabled(*args)

def enable_step_trace(*args):
  """enable_step_trace(int enable) -> bool"""
  return _idaapi.enable_step_trace(*args)

def request_enable_step_trace(*args):
  """request_enable_step_trace(int enable) -> bool"""
  return _idaapi.request_enable_step_trace(*args)

def get_step_trace_options(*args):
  """get_step_trace_options() -> int"""
  return _idaapi.get_step_trace_options(*args)

def set_step_trace_options(*args):
  """set_step_trace_options(int options)"""
  return _idaapi.set_step_trace_options(*args)

def request_set_step_trace_options(*args):
  """request_set_step_trace_options(int options)"""
  return _idaapi.request_set_step_trace_options(*args)

def is_insn_trace_enabled(*args):
  """is_insn_trace_enabled() -> bool"""
  return _idaapi.is_insn_trace_enabled(*args)

def enable_insn_trace(*args):
  """enable_insn_trace(int enable) -> bool"""
  return _idaapi.enable_insn_trace(*args)

def request_enable_insn_trace(*args):
  """request_enable_insn_trace(int enable) -> bool"""
  return _idaapi.request_enable_insn_trace(*args)

def get_insn_trace_options(*args):
  """get_insn_trace_options() -> int"""
  return _idaapi.get_insn_trace_options(*args)

def set_insn_trace_options(*args):
  """set_insn_trace_options(int options)"""
  return _idaapi.set_insn_trace_options(*args)

def request_set_insn_trace_options(*args):
  """request_set_insn_trace_options(int options)"""
  return _idaapi.request_set_insn_trace_options(*args)

def is_func_trace_enabled(*args):
  """is_func_trace_enabled() -> bool"""
  return _idaapi.is_func_trace_enabled(*args)

def enable_func_trace(*args):
  """enable_func_trace(int enable) -> bool"""
  return _idaapi.enable_func_trace(*args)

def request_enable_func_trace(*args):
  """request_enable_func_trace(int enable) -> bool"""
  return _idaapi.request_enable_func_trace(*args)

def get_func_trace_options(*args):
  """get_func_trace_options() -> int"""
  return _idaapi.get_func_trace_options(*args)

def set_func_trace_options(*args):
  """set_func_trace_options(int options)"""
  return _idaapi.set_func_trace_options(*args)

def request_set_func_trace_options(*args):
  """request_set_func_trace_options(int options)"""
  return _idaapi.request_set_func_trace_options(*args)

def get_tev_qty(*args):
  """get_tev_qty() -> int"""
  return _idaapi.get_tev_qty(*args)

def get_tev_info(*args):
  """get_tev_info(int n, tev_info_t tev_info) -> bool"""
  return _idaapi.get_tev_info(*args)

def get_insn_tev_reg_val(*args):
  """get_insn_tev_reg_val(int n, char regname, regval_t regval) -> bool"""
  return _idaapi.get_insn_tev_reg_val(*args)

def get_insn_tev_reg_result(*args):
  """get_insn_tev_reg_result(int n, char regname, regval_t regval) -> bool"""
  return _idaapi.get_insn_tev_reg_result(*args)

def get_call_tev_callee(*args):
  """get_call_tev_callee(int n) -> ea_t"""
  return _idaapi.get_call_tev_callee(*args)

def get_ret_tev_return(*args):
  """get_ret_tev_return(int n) -> ea_t"""
  return _idaapi.get_ret_tev_return(*args)

def get_bpt_tev_ea(*args):
  """get_bpt_tev_ea(int n) -> ea_t"""
  return _idaapi.get_bpt_tev_ea(*args)

def is_reg_integer(*args):
  """is_reg_integer(char regname) -> bool"""
  return _idaapi.is_reg_integer(*args)

def get_first_module(*args):
  """get_first_module(module_info_t modinfo) -> bool"""
  return _idaapi.get_first_module(*args)

def get_next_module(*args):
  """get_next_module(module_info_t modinfo) -> bool"""
  return _idaapi.get_next_module(*args)

def bring_debugger_to_front(*args):
  """bring_debugger_to_front()"""
  return _idaapi.bring_debugger_to_front(*args)

def get_current_thread(*args):
  """get_current_thread() -> thid_t"""
  return _idaapi.get_current_thread(*args)

def load_debugger(*args):
  """load_debugger(char dbgname, bool use_remote) -> bool"""
  return _idaapi.load_debugger(*args)

def suspend_thread(*args):
  """suspend_thread(thid_t tid) -> int"""
  return _idaapi.suspend_thread(*args)

def request_suspend_thread(*args):
  """request_suspend_thread(thid_t tid) -> int"""
  return _idaapi.request_suspend_thread(*args)

def resume_thread(*args):
  """resume_thread(thid_t tid) -> int"""
  return _idaapi.resume_thread(*args)

def request_resume_thread(*args):
  """request_resume_thread(thid_t tid) -> int"""
  return _idaapi.request_resume_thread(*args)

def check_bpt(*args):
  """check_bpt(ea_t ea) -> int"""
  return _idaapi.check_bpt(*args)

def set_process_state(*args):
  """set_process_state(int newstate, thid_t p_thid, int dbginv) -> int"""
  return _idaapi.set_process_state(*args)

def get_manual_regions(*args):
  """get_manual_regions(meminfo_vec_t areas)"""
  return _idaapi.get_manual_regions(*args)

def set_manual_regions(*args):
  """set_manual_regions(meminfo_vec_t areas)"""
  return _idaapi.set_manual_regions(*args)

def enable_manual_regions(*args):
  """enable_manual_regions(bool enable)"""
  return _idaapi.enable_manual_regions(*args)

def is_debugger_busy(*args):
  """is_debugger_busy() -> bool"""
  return _idaapi.is_debugger_busy(*args)

def DBG_Callback(*args):
  """DBG_Callback(void ud, int notification_code, va_list va) -> int"""
  return _idaapi.DBG_Callback(*args)
class DBG_Hooks(object):
    """Proxy of C++ DBG_Hooks class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _idaapi.delete_DBG_Hooks
    __del__ = lambda self : None;
    def hook(self, *args):
        """hook(self) -> bool"""
        return _idaapi.DBG_Hooks_hook(self, *args)

    def unhook(self, *args):
        """unhook(self) -> bool"""
        return _idaapi.DBG_Hooks_unhook(self, *args)

    def dbg_process_start(self, *args):
        """
        dbg_process_start(self, pid_t pid, thid_t tid, ea_t ea, char name, ea_t base, 
            asize_t size)
        """
        return _idaapi.DBG_Hooks_dbg_process_start(self, *args)

    def dbg_process_exit(self, *args):
        """dbg_process_exit(self, pid_t pid, thid_t tid, ea_t ea, int exit_code)"""
        return _idaapi.DBG_Hooks_dbg_process_exit(self, *args)

    def dbg_process_attach(self, *args):
        """
        dbg_process_attach(self, pid_t pid, thid_t tid, ea_t ea, char name, ea_t base, 
            asize_t size)
        """
        return _idaapi.DBG_Hooks_dbg_process_attach(self, *args)

    def dbg_process_detach(self, *args):
        """dbg_process_detach(self, pid_t pid, thid_t tid, ea_t ea)"""
        return _idaapi.DBG_Hooks_dbg_process_detach(self, *args)

    def dbg_thread_start(self, *args):
        """dbg_thread_start(self, pid_t pid, thid_t tid, ea_t ea)"""
        return _idaapi.DBG_Hooks_dbg_thread_start(self, *args)

    def dbg_thread_exit(self, *args):
        """dbg_thread_exit(self, pid_t pid, thid_t tid, ea_t ea, int exit_code)"""
        return _idaapi.DBG_Hooks_dbg_thread_exit(self, *args)

    def dbg_library_load(self, *args):
        """
        dbg_library_load(self, pid_t pid, thid_t tid, ea_t ea, char name, ea_t base, 
            asize_t size)
        """
        return _idaapi.DBG_Hooks_dbg_library_load(self, *args)

    def dbg_library_unload(self, *args):
        """dbg_library_unload(self, pid_t pid, thid_t tid, ea_t ea, char libname)"""
        return _idaapi.DBG_Hooks_dbg_library_unload(self, *args)

    def dbg_information(self, *args):
        """dbg_information(self, pid_t pid, thid_t tid, ea_t ea, char info)"""
        return _idaapi.DBG_Hooks_dbg_information(self, *args)

    def dbg_exception(self, *args):
        """
        dbg_exception(self, pid_t pid, thid_t tid, ea_t ea, int code, bool can_cont, 
            ea_t exc_ea, char info) -> int
        """
        return _idaapi.DBG_Hooks_dbg_exception(self, *args)

    def dbg_suspend_process(self, *args):
        """dbg_suspend_process(self)"""
        return _idaapi.DBG_Hooks_dbg_suspend_process(self, *args)

    def dbg_bpt(self, *args):
        """dbg_bpt(self, thid_t tid, ea_t breakpoint_ea) -> int"""
        return _idaapi.DBG_Hooks_dbg_bpt(self, *args)

    def dbg_trace(self, *args):
        """dbg_trace(self, thid_t tid, ea_t ip) -> int"""
        return _idaapi.DBG_Hooks_dbg_trace(self, *args)

    def dbg_request_error(self, *args):
        """dbg_request_error(self, ui_notification_t failed_command, dbg_notification_t failed_dbg_notification)"""
        return _idaapi.DBG_Hooks_dbg_request_error(self, *args)

    def dbg_step_into(self, *args):
        """dbg_step_into(self)"""
        return _idaapi.DBG_Hooks_dbg_step_into(self, *args)

    def dbg_step_over(self, *args):
        """dbg_step_over(self)"""
        return _idaapi.DBG_Hooks_dbg_step_over(self, *args)

    def dbg_run_to(self, *args):
        """dbg_run_to(self, thid_t tid)"""
        return _idaapi.DBG_Hooks_dbg_run_to(self, *args)

    def dbg_step_until_ret(self, *args):
        """dbg_step_until_ret(self)"""
        return _idaapi.DBG_Hooks_dbg_step_until_ret(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> DBG_Hooks"""
        if self.__class__ == DBG_Hooks:
            _self = None
        else:
            _self = self
        this = _idaapi.new_DBG_Hooks(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _idaapi.disown_DBG_Hooks(self)
        return weakref_proxy(self)
DBG_Hooks_swigregister = _idaapi.DBG_Hooks_swigregister
DBG_Hooks_swigregister(DBG_Hooks)


def idadir(*args):
  """idadir(char subdir) -> char"""
  return _idaapi.idadir(*args)

def getsysfile(*args):
  """getsysfile(char filename, char subdir) -> char"""
  return _idaapi.getsysfile(*args)
CFG_SUBDIR = _idaapi.CFG_SUBDIR
IDC_SUBDIR = _idaapi.IDC_SUBDIR
IDS_SUBDIR = _idaapi.IDS_SUBDIR
IDP_SUBDIR = _idaapi.IDP_SUBDIR
LDR_SUBDIR = _idaapi.LDR_SUBDIR
SIG_SUBDIR = _idaapi.SIG_SUBDIR
TIL_SUBDIR = _idaapi.TIL_SUBDIR
PLG_SUBDIR = _idaapi.PLG_SUBDIR

def get_user_idadir(*args):
  """get_user_idadir() -> char"""
  return _idaapi.get_user_idadir(*args)

def fopenWT(*args):
  """fopenWT(char file) -> FILE"""
  return _idaapi.fopenWT(*args)

def fopenWB(*args):
  """fopenWB(char file) -> FILE"""
  return _idaapi.fopenWB(*args)

def fopenRT(*args):
  """fopenRT(char file) -> FILE"""
  return _idaapi.fopenRT(*args)

def fopenRB(*args):
  """fopenRB(char file) -> FILE"""
  return _idaapi.fopenRB(*args)

def fopenM(*args):
  """fopenM(char file) -> FILE"""
  return _idaapi.fopenM(*args)

def fopenA(*args):
  """fopenA(char file) -> FILE"""
  return _idaapi.fopenA(*args)

def openR(*args):
  """openR(char file) -> FILE"""
  return _idaapi.openR(*args)

def openRT(*args):
  """openRT(char file) -> FILE"""
  return _idaapi.openRT(*args)

def openM(*args):
  """openM(char file) -> FILE"""
  return _idaapi.openM(*args)

def ecreate(*args):
  """ecreate(char file) -> FILE"""
  return _idaapi.ecreate(*args)

def ecreateT(*args):
  """ecreateT(char file) -> FILE"""
  return _idaapi.ecreateT(*args)

def eclose(*args):
  """eclose(FILE fp)"""
  return _idaapi.eclose(*args)

def eseek(*args):
  """eseek(FILE fp, int32 pos)"""
  return _idaapi.eseek(*args)

def efilelength(*args):
  """efilelength(FILE fp) -> uint32"""
  return _idaapi.efilelength(*args)

def echsize(*args):
  """echsize(FILE fp, uint32 size)"""
  return _idaapi.echsize(*args)

def getdspace(*args):
  """getdspace(char path) -> uint64"""
  return _idaapi.getdspace(*args)

def call_system(*args):
  """call_system(char command) -> int"""
  return _idaapi.call_system(*args)
LINPUT_NONE = _idaapi.LINPUT_NONE
LINPUT_LOCAL = _idaapi.LINPUT_LOCAL
LINPUT_RFILE = _idaapi.LINPUT_RFILE
LINPUT_PROCMEM = _idaapi.LINPUT_PROCMEM
LINPUT_GENERIC = _idaapi.LINPUT_GENERIC

def qlgetz(*args):
  """qlgetz(linput_t li, int32 fpos) -> char"""
  return _idaapi.qlgetz(*args)

def open_linput(*args):
  """open_linput(char file, bool remote) -> linput_t"""
  return _idaapi.open_linput(*args)

def close_linput(*args):
  """close_linput(linput_t li)"""
  return _idaapi.close_linput(*args)
class generic_linput_t(object):
    """Proxy of C++ generic_linput_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    filesize = _swig_property(_idaapi.generic_linput_t_filesize_get, _idaapi.generic_linput_t_filesize_set)
    blocksize = _swig_property(_idaapi.generic_linput_t_blocksize_get, _idaapi.generic_linput_t_blocksize_set)
    __swig_destroy__ = _idaapi.delete_generic_linput_t
    __del__ = lambda self : None;
generic_linput_t_swigregister = _idaapi.generic_linput_t_swigregister
generic_linput_t_swigregister(generic_linput_t)


def create_generic_linput(*args):
  """create_generic_linput(generic_linput_t gl) -> linput_t"""
  return _idaapi.create_generic_linput(*args)

def create_memory_linput(*args):
  """create_memory_linput(ea_t start, asize_t size) -> linput_t"""
  return _idaapi.create_memory_linput(*args)

def get_linput_type(*args):
  """get_linput_type(linput_t li) -> linput_type_t"""
  return _idaapi.get_linput_type(*args)

def get_entry_qty(*args):
  """get_entry_qty() -> size_t"""
  return _idaapi.get_entry_qty(*args)

def add_entry(*args):
  """add_entry(uval_t ord, ea_t ea, char name, bool makecode) -> bool"""
  return _idaapi.add_entry(*args)

def get_entry_ordinal(*args):
  """get_entry_ordinal(size_t idx) -> uval_t"""
  return _idaapi.get_entry_ordinal(*args)

def get_entry(*args):
  """get_entry(uval_t ord) -> ea_t"""
  return _idaapi.get_entry(*args)

def get_entry_name(*args):
  """get_entry_name(uval_t ord) -> ssize_t"""
  return _idaapi.get_entry_name(*args)

def rename_entry(*args):
  """rename_entry(uval_t ord, char name) -> bool"""
  return _idaapi.rename_entry(*args)
ENUM_FLAGS_FROMTIL = _idaapi.ENUM_FLAGS_FROMTIL
ENUM_FLAGS_WIDTH = _idaapi.ENUM_FLAGS_WIDTH

def get_enum_qty(*args):
  """get_enum_qty() -> size_t"""
  return _idaapi.get_enum_qty(*args)

def getn_enum(*args):
  """getn_enum(size_t n) -> enum_t"""
  return _idaapi.getn_enum(*args)

def get_enum_idx(*args):
  """get_enum_idx(enum_t id) -> uval_t"""
  return _idaapi.get_enum_idx(*args)

def get_enum(*args):
  """get_enum(char name) -> enum_t"""
  return _idaapi.get_enum(*args)

def is_bf(*args):
  """is_bf(enum_t id) -> bool"""
  return _idaapi.is_bf(*args)

def is_enum_hidden(*args):
  """is_enum_hidden(enum_t id) -> bool"""
  return _idaapi.is_enum_hidden(*args)

def set_enum_hidden(*args):
  """set_enum_hidden(enum_t id, bool hidden) -> bool"""
  return _idaapi.set_enum_hidden(*args)

def is_enum_fromtil(*args):
  """is_enum_fromtil(enum_t id) -> bool"""
  return _idaapi.is_enum_fromtil(*args)

def set_enum_fromtil(*args):
  """set_enum_fromtil(enum_t id, bool fromtil) -> bool"""
  return _idaapi.set_enum_fromtil(*args)

def get_enum_name(*args):
  """get_enum_name(enum_t id) -> ssize_t"""
  return _idaapi.get_enum_name(*args)

def get_enum_width(*args):
  """get_enum_width(enum_t id) -> size_t"""
  return _idaapi.get_enum_width(*args)

def set_enum_width(*args):
  """set_enum_width(enum_t id, int width) -> bool"""
  return _idaapi.set_enum_width(*args)

def get_enum_cmt(*args):
  """get_enum_cmt(enum_t id, bool repeatable) -> ssize_t"""
  return _idaapi.get_enum_cmt(*args)

def get_enum_size(*args):
  """get_enum_size(enum_t id) -> size_t"""
  return _idaapi.get_enum_size(*args)

def get_enum_flag(*args):
  """get_enum_flag(enum_t id) -> flags_t"""
  return _idaapi.get_enum_flag(*args)

def get_const_by_name(*args):
  """get_const_by_name(char name) -> const_t"""
  return _idaapi.get_const_by_name(*args)

def get_const_value(*args):
  """get_const_value(const_t id) -> uval_t"""
  return _idaapi.get_const_value(*args)

def get_const_enum(*args):
  """get_const_enum(const_t id) -> enum_t"""
  return _idaapi.get_const_enum(*args)

def get_const_bmask(*args):
  """get_const_bmask(const_t id) -> bmask_t"""
  return _idaapi.get_const_bmask(*args)

def get_const(*args):
  """get_const(enum_t id, uval_t value, uchar serial, bmask_t mask) -> const_t"""
  return _idaapi.get_const(*args)

def get_first_bmask(*args):
  """get_first_bmask(enum_t id) -> bmask_t"""
  return _idaapi.get_first_bmask(*args)

def get_last_bmask(*args):
  """get_last_bmask(enum_t id) -> bmask_t"""
  return _idaapi.get_last_bmask(*args)

def get_next_bmask(*args):
  """get_next_bmask(enum_t id, bmask_t bmask) -> bmask_t"""
  return _idaapi.get_next_bmask(*args)

def get_prev_bmask(*args):
  """get_prev_bmask(enum_t id, bmask_t bmask) -> bmask_t"""
  return _idaapi.get_prev_bmask(*args)

def get_first_const(*args):
  """get_first_const(enum_t id, bmask_t bmask = (bmask_t(-1))) -> uval_t"""
  return _idaapi.get_first_const(*args)

def get_last_const(*args):
  """get_last_const(enum_t id, bmask_t bmask = (bmask_t(-1))) -> uval_t"""
  return _idaapi.get_last_const(*args)

def get_next_const(*args):
  """get_next_const(enum_t id, uval_t value, bmask_t bmask = (bmask_t(-1))) -> uval_t"""
  return _idaapi.get_next_const(*args)

def get_prev_const(*args):
  """get_prev_const(enum_t id, uval_t value, bmask_t bmask = (bmask_t(-1))) -> uval_t"""
  return _idaapi.get_prev_const(*args)

def get_const_name(*args):
  """get_const_name(const_t id) -> ssize_t"""
  return _idaapi.get_const_name(*args)

def get_const_cmt(*args):
  """get_const_cmt(const_t id, bool repeatable) -> ssize_t"""
  return _idaapi.get_const_cmt(*args)

def get_first_serial_const(*args):
  """get_first_serial_const(enum_t id, uval_t value, bmask_t bmask) -> const_t"""
  return _idaapi.get_first_serial_const(*args)

def get_last_serial_const(*args):
  """get_last_serial_const(enum_t id, uval_t value, bmask_t bmask) -> const_t"""
  return _idaapi.get_last_serial_const(*args)

def get_next_serial_const(*args):
  """get_next_serial_const(const_t first_cid) -> const_t"""
  return _idaapi.get_next_serial_const(*args)

def get_prev_serial_const(*args):
  """get_prev_serial_const(const_t first_cid) -> const_t"""
  return _idaapi.get_prev_serial_const(*args)
class const_visitor_t(object):
    """Proxy of C++ const_visitor_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def visit_const(self, *args):
        """visit_const(self, const_t cid, uval_t value) -> int"""
        return _idaapi.const_visitor_t_visit_const(self, *args)

    __swig_destroy__ = _idaapi.delete_const_visitor_t
    __del__ = lambda self : None;
const_visitor_t_swigregister = _idaapi.const_visitor_t_swigregister
const_visitor_t_swigregister(const_visitor_t)
MAX_ENUM_SERIAL = cvar.MAX_ENUM_SERIAL


def for_all_consts(*args):
  """for_all_consts(enum_t id, const_visitor_t cv) -> int"""
  return _idaapi.for_all_consts(*args)

def get_const_serial(*args):
  """get_const_serial(const_t cid) -> uchar"""
  return _idaapi.get_const_serial(*args)

def get_enum_type_ordinal(*args):
  """get_enum_type_ordinal(enum_t id) -> int32"""
  return _idaapi.get_enum_type_ordinal(*args)

def set_enum_type_ordinal(*args):
  """set_enum_type_ordinal(enum_t id, int32 ord)"""
  return _idaapi.set_enum_type_ordinal(*args)

def add_enum(*args):
  """add_enum(size_t idx, char name, flags_t flag) -> enum_t"""
  return _idaapi.add_enum(*args)

def del_enum(*args):
  """del_enum(enum_t id)"""
  return _idaapi.del_enum(*args)

def set_enum_idx(*args):
  """set_enum_idx(enum_t id, size_t idx) -> bool"""
  return _idaapi.set_enum_idx(*args)

def set_enum_bf(*args):
  """set_enum_bf(enum_t id, bool bf) -> bool"""
  return _idaapi.set_enum_bf(*args)

def set_enum_name(*args):
  """set_enum_name(enum_t id, char name) -> bool"""
  return _idaapi.set_enum_name(*args)

def set_enum_cmt(*args):
  """set_enum_cmt(enum_t id, char cmt, bool repeatable) -> bool"""
  return _idaapi.set_enum_cmt(*args)

def add_const(*args):
  """add_const(enum_t id, char name, uval_t value, bmask_t bmask = (bmask_t(-1))) -> int"""
  return _idaapi.add_const(*args)
CONST_ERROR_NAME = _idaapi.CONST_ERROR_NAME
CONST_ERROR_VALUE = _idaapi.CONST_ERROR_VALUE
CONST_ERROR_ENUM = _idaapi.CONST_ERROR_ENUM
CONST_ERROR_MASK = _idaapi.CONST_ERROR_MASK
CONST_ERROR_ILLV = _idaapi.CONST_ERROR_ILLV

def del_const(*args):
  """del_const(enum_t id, uval_t value, uchar serial, bmask_t bmask) -> bool"""
  return _idaapi.del_const(*args)

def set_const_name(*args):
  """set_const_name(const_t id, char name) -> bool"""
  return _idaapi.set_const_name(*args)

def set_const_cmt(*args):
  """set_const_cmt(const_t id, char cmt, bool repeatable) -> bool"""
  return _idaapi.set_const_cmt(*args)

def is_one_bit_mask(*args):
  """is_one_bit_mask(bmask_t mask) -> bool"""
  return _idaapi.is_one_bit_mask(*args)

def get_bmask_node(*args):
  """get_bmask_node(enum_t id, bmask_t bmask) -> netnode"""
  return _idaapi.get_bmask_node(*args)

def set_bmask_name(*args):
  """set_bmask_name(enum_t id, bmask_t bmask, char name) -> bool"""
  return _idaapi.set_bmask_name(*args)

def get_bmask_name(*args):
  """get_bmask_name(enum_t id, bmask_t bmask) -> ssize_t"""
  return _idaapi.get_bmask_name(*args)

def set_bmask_cmt(*args):
  """set_bmask_cmt(enum_t id, bmask_t bmask, char cmt, bool repeatable) -> bool"""
  return _idaapi.set_bmask_cmt(*args)

def get_bmask_cmt(*args):
  """get_bmask_cmt(enum_t id, bmask_t bmask, bool repeatable) -> ssize_t"""
  return _idaapi.get_bmask_cmt(*args)

def enum_encode(*args):
  """enum_encode(enum_t id, uchar serial) -> uval_t"""
  return _idaapi.enum_encode(*args)

def enum_decode(*args):
  """enum_decode(uval_t code) -> enum_t"""
  return _idaapi.enum_decode(*args)

def CompileEx(*args):
  """CompileEx(char file, bool del_macros) -> bool"""
  return _idaapi.CompileEx(*args)

def Compile(*args):
  """Compile(char file) -> bool"""
  return _idaapi.Compile(*args)

def calcexpr(*args):
  """calcexpr(ea_t where, char line, idc_value_t rv) -> bool"""
  return _idaapi.calcexpr(*args)

def calc_idc_expr(*args):
  """calc_idc_expr(ea_t where, char line, idc_value_t rv) -> bool"""
  return _idaapi.calc_idc_expr(*args)

def CompileLine(*args):
  """CompileLine(char line) -> bool"""
  return _idaapi.CompileLine(*args)

def VarAssign(*args):
  """VarAssign(idc_value_t a1, idc_value_t a2)"""
  return _idaapi.VarAssign(*args)
class idc_value_t(object):
    """Proxy of C++ idc_value_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    vtype = _swig_property(_idaapi.idc_value_t_vtype_get, _idaapi.idc_value_t_vtype_set)
    str = _swig_property(_idaapi.idc_value_t_str_get, _idaapi.idc_value_t_str_set)
    num = _swig_property(_idaapi.idc_value_t_num_get, _idaapi.idc_value_t_num_set)
    e = _swig_property(_idaapi.idc_value_t_e_get, _idaapi.idc_value_t_e_set)
    def __init__(self, *args): 
        """
        __init__(self) -> idc_value_t
        __init__(self, idc_value_t r) -> idc_value_t
        """
        this = _idaapi.new_idc_value_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_idc_value_t
    __del__ = lambda self : None;
    def clear(self, *args):
        """clear(self)"""
        return _idaapi.idc_value_t_clear(self, *args)

idc_value_t_swigregister = _idaapi.idc_value_t_swigregister
idc_value_t_swigregister(idc_value_t)
VT_STR = _idaapi.VT_STR
VT_LONG = _idaapi.VT_LONG
VT_FLOAT = _idaapi.VT_FLOAT
VT_WILD = _idaapi.VT_WILD
VT_OBJ = _idaapi.VT_OBJ

class idc_global_t(object):
    """Proxy of C++ idc_global_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_idaapi.idc_global_t_name_get, _idaapi.idc_global_t_name_set)
    value = _swig_property(_idaapi.idc_global_t_value_get, _idaapi.idc_global_t_value_set)
    def __init__(self, *args): 
        """
        __init__(self) -> idc_global_t
        __init__(self, char n) -> idc_global_t
        """
        this = _idaapi.new_idc_global_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_idc_global_t
    __del__ = lambda self : None;
idc_global_t_swigregister = _idaapi.idc_global_t_swigregister
idc_global_t_swigregister(idc_global_t)


def get_extlang_fileext(*args):
  """get_extlang_fileext() -> char"""
  return _idaapi.get_extlang_fileext(*args)

def get_idcpath(*args):
  """get_idcpath() -> char"""
  return _idaapi.get_idcpath(*args)

def set_header_path(*args):
  """set_header_path(char path, bool add) -> bool"""
  return _idaapi.set_header_path(*args)

def get_idc_filename(*args):
  """get_idc_filename(char file) -> char"""
  return _idaapi.get_idc_filename(*args)

def dosysfile(*args):
  """dosysfile(bool complain_if_no_file, char file) -> bool"""
  return _idaapi.dosysfile(*args)

def execute(*args):
  """execute(char line) -> bool"""
  return _idaapi.execute(*args)

def compile_script_file(*args):
  """compile_script_file(char file) -> bool"""
  return _idaapi.compile_script_file(*args)

def compile_script_func(*args):
  """compile_script_func(char name, ea_t current_ea, char expr) -> bool"""
  return _idaapi.compile_script_func(*args)

def run_script_func(*args):
  """run_script_func(char fname, int argsnum, idc_value_t args, idc_value_t result) -> bool"""
  return _idaapi.run_script_func(*args)
class fixup_data_t(object):
    """Proxy of C++ fixup_data_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_idaapi.fixup_data_t_type_get, _idaapi.fixup_data_t_type_set)
    sel = _swig_property(_idaapi.fixup_data_t_sel_get, _idaapi.fixup_data_t_sel_set)
    off = _swig_property(_idaapi.fixup_data_t_off_get, _idaapi.fixup_data_t_off_set)
    displacement = _swig_property(_idaapi.fixup_data_t_displacement_get, _idaapi.fixup_data_t_displacement_set)
    def is_custom(self, *args):
        """is_custom(self) -> bool"""
        return _idaapi.fixup_data_t_is_custom(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> fixup_data_t"""
        this = _idaapi.new_fixup_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_fixup_data_t
    __del__ = lambda self : None;
fixup_data_t_swigregister = _idaapi.fixup_data_t_swigregister
fixup_data_t_swigregister(fixup_data_t)
FIXUP_MASK = _idaapi.FIXUP_MASK
FIXUP_OFF8 = _idaapi.FIXUP_OFF8
FIXUP_OFF16 = _idaapi.FIXUP_OFF16
FIXUP_SEG16 = _idaapi.FIXUP_SEG16
FIXUP_PTR16 = _idaapi.FIXUP_PTR16
FIXUP_OFF32 = _idaapi.FIXUP_OFF32
FIXUP_PTR32 = _idaapi.FIXUP_PTR32
FIXUP_HI8 = _idaapi.FIXUP_HI8
FIXUP_HI16 = _idaapi.FIXUP_HI16
FIXUP_LOW8 = _idaapi.FIXUP_LOW8
FIXUP_LOW16 = _idaapi.FIXUP_LOW16
FIXUP_VHIGH = _idaapi.FIXUP_VHIGH
FIXUP_VLOW = _idaapi.FIXUP_VLOW
FIXUP_OFF64 = _idaapi.FIXUP_OFF64
FIXUP_CUSTOM = _idaapi.FIXUP_CUSTOM
FIXUP_REL = _idaapi.FIXUP_REL
FIXUP_SELFREL = _idaapi.FIXUP_SELFREL
FIXUP_EXTDEF = _idaapi.FIXUP_EXTDEF
FIXUP_UNUSED = _idaapi.FIXUP_UNUSED
FIXUP_CREATED = _idaapi.FIXUP_CREATED


def set_fixup(*args):
  """set_fixup(ea_t source, fixup_data_t fp)"""
  return _idaapi.set_fixup(*args)

def set_fixup_ex(*args):
  """set_fixup_ex(ea_t source, fixup_data_t fd, ea_t offset_base)"""
  return _idaapi.set_fixup_ex(*args)

def del_fixup(*args):
  """del_fixup(ea_t source)"""
  return _idaapi.del_fixup(*args)

def get_fixup(*args):
  """get_fixup(ea_t source, fixup_data_t fd) -> bool"""
  return _idaapi.get_fixup(*args)

def get_first_fixup_ea(*args):
  """get_first_fixup_ea() -> ea_t"""
  return _idaapi.get_first_fixup_ea(*args)

def get_next_fixup_ea(*args):
  """get_next_fixup_ea(ea_t ea) -> ea_t"""
  return _idaapi.get_next_fixup_ea(*args)

def get_prev_fixup_ea(*args):
  """get_prev_fixup_ea(ea_t ea) -> ea_t"""
  return _idaapi.get_prev_fixup_ea(*args)

def get_fixup_base(*args):
  """get_fixup_base(ea_t source, fixup_data_t fd) -> ea_t"""
  return _idaapi.get_fixup_base(*args)

def get_fixup_desc(*args):
  """get_fixup_desc(ea_t source, fixup_data_t fdp) -> char"""
  return _idaapi.get_fixup_desc(*args)

def contains_fixups(*args):
  """contains_fixups(ea_t ea, asize_t size) -> int"""
  return _idaapi.contains_fixups(*args)

def gen_fix_fixups(*args):
  """gen_fix_fixups(ea_t frm, ea_t to, asize_t size)"""
  return _idaapi.gen_fix_fixups(*args)
class stkpnt_t(object):
    """Proxy of C++ stkpnt_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ea = _swig_property(_idaapi.stkpnt_t_ea_get, _idaapi.stkpnt_t_ea_set)
    spd = _swig_property(_idaapi.stkpnt_t_spd_get, _idaapi.stkpnt_t_spd_set)
    def __init__(self, *args): 
        """__init__(self) -> stkpnt_t"""
        this = _idaapi.new_stkpnt_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_stkpnt_t
    __del__ = lambda self : None;
stkpnt_t_swigregister = _idaapi.stkpnt_t_swigregister
stkpnt_t_swigregister(stkpnt_t)

def get_fixup_extdef_ea(*args):
  """
    get_fixup_extdef_ea(ea_t source, fixup_data_t fd) -> ea_t
    get_fixup_extdef_ea(ea_t ea) -> ea_t
    """
  return _idaapi.get_fixup_extdef_ea(*args)

def get_fixup_segdef_sel(*args):
  """
    get_fixup_segdef_sel(fixup_data_t fd) -> sel_t
    get_fixup_segdef_sel(ea_t ea) -> sel_t
    """
  return _idaapi.get_fixup_segdef_sel(*args)


def add_frame(*args):
  """add_frame(func_t pfn, asize_t frsize, ushort frregs, asize_t argsize) -> bool"""
  return _idaapi.add_frame(*args)

def del_frame(*args):
  """del_frame(func_t pfn) -> bool"""
  return _idaapi.del_frame(*args)

def set_frame_size(*args):
  """set_frame_size(func_t pfn, asize_t frsize, ushort frregs, asize_t argsize) -> bool"""
  return _idaapi.set_frame_size(*args)

def get_frame_size(*args):
  """get_frame_size(func_t pfn) -> asize_t"""
  return _idaapi.get_frame_size(*args)

def get_frame_retsize(*args):
  """get_frame_retsize(func_t pfn) -> int"""
  return _idaapi.get_frame_retsize(*args)

def update_fpd(*args):
  """update_fpd(func_t pfn, asize_t fpd) -> bool"""
  return _idaapi.update_fpd(*args)

def set_purged(*args):
  """set_purged(ea_t ea, int nbytes, bool override_old_value) -> bool"""
  return _idaapi.set_purged(*args)

def get_stkvar(*args):
  """get_stkvar(op_t x, sval_t v, sval_t actval) -> member_t"""
  return _idaapi.get_stkvar(*args)

def add_stkvar3(*args):
  """add_stkvar3(op_t x, sval_t v, int flags) -> bool"""
  return _idaapi.add_stkvar3(*args)
STKVAR_VALID_SIZE = _idaapi.STKVAR_VALID_SIZE

def add_stkvar2(*args):
  """
    add_stkvar2(func_t pfn, char name, sval_t off, flags_t flags, typeinfo_t ti, 
        asize_t nbytes) -> bool
    """
  return _idaapi.add_stkvar2(*args)

def build_stkvar_name(*args):
  """build_stkvar_name(func_t pfn, sval_t v) -> char"""
  return _idaapi.build_stkvar_name(*args)

def calc_stkvar_struc_offset(*args):
  """calc_stkvar_struc_offset(func_t pfn, ea_t ea, int n) -> ea_t"""
  return _idaapi.calc_stkvar_struc_offset(*args)

def delete_unreferenced_stkvars(*args):
  """delete_unreferenced_stkvars(func_t pfn) -> int"""
  return _idaapi.delete_unreferenced_stkvars(*args)

def delete_wrong_stkvar_ops(*args):
  """delete_wrong_stkvar_ops(func_t pfn) -> int"""
  return _idaapi.delete_wrong_stkvar_ops(*args)
class regvar_t(area_t):
    """Proxy of C++ regvar_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    canon = _swig_property(_idaapi.regvar_t_canon_get, _idaapi.regvar_t_canon_set)
    user = _swig_property(_idaapi.regvar_t_user_get, _idaapi.regvar_t_user_set)
    cmt = _swig_property(_idaapi.regvar_t_cmt_get, _idaapi.regvar_t_cmt_set)
    def __init__(self, *args): 
        """__init__(self) -> regvar_t"""
        this = _idaapi.new_regvar_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_regvar_t
    __del__ = lambda self : None;
regvar_t_swigregister = _idaapi.regvar_t_swigregister
regvar_t_swigregister(regvar_t)

def get_frame(*args):
  """
    get_frame(func_t pfn) -> struc_t
    get_frame(ea_t ea) -> struc_t
    """
  return _idaapi.get_frame(*args)


def add_regvar(*args):
  """
    add_regvar(func_t pfn, ea_t ea1, ea_t ea2, char canon, char user, 
        char cmt) -> int
    """
  return _idaapi.add_regvar(*args)
REGVAR_ERROR_OK = _idaapi.REGVAR_ERROR_OK
REGVAR_ERROR_ARG = _idaapi.REGVAR_ERROR_ARG
REGVAR_ERROR_RANGE = _idaapi.REGVAR_ERROR_RANGE
REGVAR_ERROR_NAME = _idaapi.REGVAR_ERROR_NAME

def rename_regvar(*args):
  """rename_regvar(func_t pfn, regvar_t v, char user) -> int"""
  return _idaapi.rename_regvar(*args)

def set_regvar_cmt(*args):
  """set_regvar_cmt(func_t pfn, regvar_t v, char cmt) -> int"""
  return _idaapi.set_regvar_cmt(*args)

def del_regvar(*args):
  """del_regvar(func_t pfn, ea_t ea1, ea_t ea2, char canon) -> int"""
  return _idaapi.del_regvar(*args)
class llabel_t(object):
    """Proxy of C++ llabel_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ea = _swig_property(_idaapi.llabel_t_ea_get, _idaapi.llabel_t_ea_set)
    name = _swig_property(_idaapi.llabel_t_name_get, _idaapi.llabel_t_name_set)
    def __init__(self, *args): 
        """__init__(self) -> llabel_t"""
        this = _idaapi.new_llabel_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_llabel_t
    __del__ = lambda self : None;
llabel_t_swigregister = _idaapi.llabel_t_swigregister
llabel_t_swigregister(llabel_t)

def find_regvar(*args):
  """
    find_regvar(func_t pfn, ea_t ea1, ea_t ea2, char canon, char user) -> regvar_t
    find_regvar(func_t pfn, ea_t ea, char canon) -> regvar_t
    """
  return _idaapi.find_regvar(*args)


def add_auto_stkpnt2(*args):
  """add_auto_stkpnt2(func_t pfn, ea_t ea, sval_t delta) -> bool"""
  return _idaapi.add_auto_stkpnt2(*args)

def add_user_stkpnt(*args):
  """add_user_stkpnt(ea_t ea, sval_t delta) -> bool"""
  return _idaapi.add_user_stkpnt(*args)

def del_stkpnt(*args):
  """del_stkpnt(func_t pfn, ea_t ea) -> bool"""
  return _idaapi.del_stkpnt(*args)

def get_spd(*args):
  """get_spd(func_t pfn, ea_t ea) -> sval_t"""
  return _idaapi.get_spd(*args)

def get_sp_delta(*args):
  """get_sp_delta(func_t pfn, ea_t ea) -> sval_t"""
  return _idaapi.get_sp_delta(*args)

def get_min_spd_ea(*args):
  """get_min_spd_ea(func_t pfn) -> ea_t"""
  return _idaapi.get_min_spd_ea(*args)

def recalc_spd(*args):
  """recalc_spd(ea_t cur_ea) -> bool"""
  return _idaapi.recalc_spd(*args)

def add_auto_stkpnt(*args):
  """add_auto_stkpnt(ea_t ea, sval_t delta) -> bool"""
  return _idaapi.add_auto_stkpnt(*args)

def add_stkvar(*args):
  """add_stkvar(op_t x, sval_t v) -> bool"""
  return _idaapi.add_stkvar(*args)
class regarg_t(object):
    """Proxy of C++ regarg_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    reg = _swig_property(_idaapi.regarg_t_reg_get, _idaapi.regarg_t_reg_set)
    type = _swig_property(_idaapi.regarg_t_type_get, _idaapi.regarg_t_type_set)
    name = _swig_property(_idaapi.regarg_t_name_get, _idaapi.regarg_t_name_set)
    def __init__(self, *args): 
        """__init__(self) -> regarg_t"""
        this = _idaapi.new_regarg_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_regarg_t
    __del__ = lambda self : None;
regarg_t_swigregister = _idaapi.regarg_t_swigregister
regarg_t_swigregister(regarg_t)

class func_t(area_t):
    """Proxy of C++ func_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    flags = _swig_property(_idaapi.func_t_flags_get, _idaapi.func_t_flags_set)
    def is_far(self, *args):
        """is_far(self) -> bool"""
        return _idaapi.func_t_is_far(self, *args)

    def does_return(self, *args):
        """does_return(self) -> bool"""
        return _idaapi.func_t_does_return(self, *args)

    def analyzed_sp(self, *args):
        """analyzed_sp(self) -> bool"""
        return _idaapi.func_t_analyzed_sp(self, *args)

    frame = _swig_property(_idaapi.func_t_frame_get, _idaapi.func_t_frame_set)
    frsize = _swig_property(_idaapi.func_t_frsize_get, _idaapi.func_t_frsize_set)
    frregs = _swig_property(_idaapi.func_t_frregs_get, _idaapi.func_t_frregs_set)
    argsize = _swig_property(_idaapi.func_t_argsize_get, _idaapi.func_t_argsize_set)
    fpd = _swig_property(_idaapi.func_t_fpd_get, _idaapi.func_t_fpd_set)
    color = _swig_property(_idaapi.func_t_color_get, _idaapi.func_t_color_set)
    pntqty = _swig_property(_idaapi.func_t_pntqty_get, _idaapi.func_t_pntqty_set)
    points = _swig_property(_idaapi.func_t_points_get, _idaapi.func_t_points_set)
    regvarqty = _swig_property(_idaapi.func_t_regvarqty_get, _idaapi.func_t_regvarqty_set)
    regvars = _swig_property(_idaapi.func_t_regvars_get, _idaapi.func_t_regvars_set)
    llabelqty = _swig_property(_idaapi.func_t_llabelqty_get, _idaapi.func_t_llabelqty_set)
    llabels = _swig_property(_idaapi.func_t_llabels_get, _idaapi.func_t_llabels_set)
    regargqty = _swig_property(_idaapi.func_t_regargqty_get, _idaapi.func_t_regargqty_set)
    regargs = _swig_property(_idaapi.func_t_regargs_get, _idaapi.func_t_regargs_set)
    tailqty = _swig_property(_idaapi.func_t_tailqty_get, _idaapi.func_t_tailqty_set)
    tails = _swig_property(_idaapi.func_t_tails_get, _idaapi.func_t_tails_set)
    owner = _swig_property(_idaapi.func_t_owner_get, _idaapi.func_t_owner_set)
    refqty = _swig_property(_idaapi.func_t_refqty_get, _idaapi.func_t_refqty_set)
    referers = _swig_property(_idaapi.func_t_referers_get, _idaapi.func_t_referers_set)
    def __init__(self, *args): 
        """__init__(self) -> func_t"""
        this = _idaapi.new_func_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_func_t
    __del__ = lambda self : None;
func_t_swigregister = _idaapi.func_t_swigregister
func_t_swigregister(func_t)
FUNC_NORET = _idaapi.FUNC_NORET
FUNC_FAR = _idaapi.FUNC_FAR
FUNC_LIB = _idaapi.FUNC_LIB
FUNC_STATIC = _idaapi.FUNC_STATIC
FUNC_FRAME = _idaapi.FUNC_FRAME
FUNC_USERFAR = _idaapi.FUNC_USERFAR
FUNC_HIDDEN = _idaapi.FUNC_HIDDEN
FUNC_THUNK = _idaapi.FUNC_THUNK
FUNC_BOTTOMBP = _idaapi.FUNC_BOTTOMBP
FUNC_NORET_PENDING = _idaapi.FUNC_NORET_PENDING
FUNC_SP_READY = _idaapi.FUNC_SP_READY
FUNC_PURGED_OK = _idaapi.FUNC_PURGED_OK
FUNC_TAIL = _idaapi.FUNC_TAIL


def is_func_entry(*args):
  """is_func_entry(func_t pfn) -> bool"""
  return _idaapi.is_func_entry(*args)

def is_func_tail(*args):
  """is_func_tail(func_t pfn) -> bool"""
  return _idaapi.is_func_tail(*args)

def get_func(*args):
  """get_func(ea_t ea) -> func_t"""
  return _idaapi.get_func(*args)

def get_func_chunknum(*args):
  """get_func_chunknum(func_t pfn, ea_t ea) -> int"""
  return _idaapi.get_func_chunknum(*args)

def func_contains(*args):
  """func_contains(func_t pfn, ea_t ea) -> bool"""
  return _idaapi.func_contains(*args)

def getn_func(*args):
  """getn_func(size_t n) -> func_t"""
  return _idaapi.getn_func(*args)

def get_func_qty(*args):
  """get_func_qty() -> size_t"""
  return _idaapi.get_func_qty(*args)

def get_func_num(*args):
  """get_func_num(ea_t ea) -> int"""
  return _idaapi.get_func_num(*args)

def get_prev_func(*args):
  """get_prev_func(ea_t ea) -> func_t"""
  return _idaapi.get_prev_func(*args)

def get_next_func(*args):
  """get_next_func(ea_t ea) -> func_t"""
  return _idaapi.get_next_func(*args)

def get_func_limits(*args):
  """get_func_limits(func_t pfn, area_t limits) -> bool"""
  return _idaapi.get_func_limits(*args)

def get_func_cmt(*args):
  """get_func_cmt(func_t fn, bool repeatable) -> char"""
  return _idaapi.get_func_cmt(*args)

def set_func_cmt(*args):
  """set_func_cmt(func_t fn, char cmt, bool repeatable) -> bool"""
  return _idaapi.set_func_cmt(*args)

def del_func_cmt(*args):
  """del_func_cmt(func_t fn, bool repeatable)"""
  return _idaapi.del_func_cmt(*args)

def update_func(*args):
  """update_func(func_t fn) -> bool"""
  return _idaapi.update_func(*args)

def add_func_ex(*args):
  """add_func_ex(func_t fn) -> bool"""
  return _idaapi.add_func_ex(*args)

def add_func(*args):
  """add_func(ea_t ea1, ea_t ea2) -> bool"""
  return _idaapi.add_func(*args)

def del_func(*args):
  """del_func(ea_t ea) -> bool"""
  return _idaapi.del_func(*args)

def func_setstart(*args):
  """func_setstart(ea_t ea, ea_t newstart) -> int"""
  return _idaapi.func_setstart(*args)
MOVE_FUNC_OK = _idaapi.MOVE_FUNC_OK
MOVE_FUNC_NOCODE = _idaapi.MOVE_FUNC_NOCODE
MOVE_FUNC_BADSTART = _idaapi.MOVE_FUNC_BADSTART
MOVE_FUNC_NOFUNC = _idaapi.MOVE_FUNC_NOFUNC
MOVE_FUNC_REFUSED = _idaapi.MOVE_FUNC_REFUSED

def func_setend(*args):
  """func_setend(ea_t ea, ea_t newend) -> bool"""
  return _idaapi.func_setend(*args)

def reanalyze_function(*args):
  """reanalyze_function(func_t pfn, ea_t ea1 = 0, ea_t ea2 = ea_t(-1), bool analyze_parents = False)"""
  return _idaapi.reanalyze_function(*args)

def clear_func_struct(*args):
  """clear_func_struct(func_t fn)"""
  return _idaapi.clear_func_struct(*args)
FIND_FUNC_NORMAL = _idaapi.FIND_FUNC_NORMAL
FIND_FUNC_DEFINE = _idaapi.FIND_FUNC_DEFINE

def find_func_bounds(*args):
  """find_func_bounds(ea_t ea, func_t nfn, int flags) -> int"""
  return _idaapi.find_func_bounds(*args)
FIND_FUNC_UNDEF = _idaapi.FIND_FUNC_UNDEF
FIND_FUNC_OK = _idaapi.FIND_FUNC_OK
FIND_FUNC_EXIST = _idaapi.FIND_FUNC_EXIST

def get_func_name(*args):
  """get_func_name(ea_t ea) -> char"""
  return _idaapi.get_func_name(*args)

def get_func_bitness(*args):
  """get_func_bitness(func_t pfn) -> int"""
  return _idaapi.get_func_bitness(*args)

def get_func_bits(*args):
  """get_func_bits(func_t pfn) -> int"""
  return _idaapi.get_func_bits(*args)

def get_func_bytes(*args):
  """get_func_bytes(func_t pfn) -> int"""
  return _idaapi.get_func_bytes(*args)

def is_visible_func(*args):
  """is_visible_func(func_t pfn) -> bool"""
  return _idaapi.is_visible_func(*args)

def is_finally_visible_func(*args):
  """is_finally_visible_func(func_t pfn) -> bool"""
  return _idaapi.is_finally_visible_func(*args)

def set_visible_func(*args):
  """set_visible_func(func_t pfn, bool visible)"""
  return _idaapi.set_visible_func(*args)

def set_func_name_if_jumpfunc(*args):
  """set_func_name_if_jumpfunc(func_t fn, char oldname) -> int"""
  return _idaapi.set_func_name_if_jumpfunc(*args)

def calc_thunk_func_target(*args):
  """calc_thunk_func_target(func_t fn, ea_t fptr) -> ea_t"""
  return _idaapi.calc_thunk_func_target(*args)

def a2funcoff(*args):
  """a2funcoff(ea_t ea) -> char"""
  return _idaapi.a2funcoff(*args)

def std_gen_func_header(*args):
  """std_gen_func_header(func_t pfn)"""
  return _idaapi.std_gen_func_header(*args)

def func_does_return(*args):
  """func_does_return(ea_t callee) -> bool"""
  return _idaapi.func_does_return(*args)

def set_noret_insn(*args):
  """set_noret_insn(ea_t insn_ea, bool noret) -> bool"""
  return _idaapi.set_noret_insn(*args)

def get_fchunk(*args):
  """get_fchunk(ea_t ea) -> func_t"""
  return _idaapi.get_fchunk(*args)

def getn_fchunk(*args):
  """getn_fchunk(int n) -> func_t"""
  return _idaapi.getn_fchunk(*args)

def get_fchunk_qty(*args):
  """get_fchunk_qty() -> size_t"""
  return _idaapi.get_fchunk_qty(*args)

def get_fchunk_num(*args):
  """get_fchunk_num(ea_t ea) -> int"""
  return _idaapi.get_fchunk_num(*args)

def get_prev_fchunk(*args):
  """get_prev_fchunk(ea_t ea) -> func_t"""
  return _idaapi.get_prev_fchunk(*args)

def get_next_fchunk(*args):
  """get_next_fchunk(ea_t ea) -> func_t"""
  return _idaapi.get_next_fchunk(*args)

def append_func_tail(*args):
  """append_func_tail(func_t pfn, ea_t ea1, ea_t ea2) -> bool"""
  return _idaapi.append_func_tail(*args)

def remove_func_tail(*args):
  """remove_func_tail(func_t pfn, ea_t tail_ea) -> bool"""
  return _idaapi.remove_func_tail(*args)

def set_tail_owner(*args):
  """set_tail_owner(func_t fnt, ea_t func_start) -> bool"""
  return _idaapi.set_tail_owner(*args)

def func_tail_iterator_set(*args):
  """func_tail_iterator_set(func_tail_iterator_t fti, func_t pfn, ea_t ea) -> bool"""
  return _idaapi.func_tail_iterator_set(*args)

def func_tail_iterator_set_ea(*args):
  """func_tail_iterator_set_ea(func_tail_iterator_t fti, ea_t ea) -> bool"""
  return _idaapi.func_tail_iterator_set_ea(*args)

def func_parent_iterator_set(*args):
  """func_parent_iterator_set(func_parent_iterator_t fpi, func_t pfn) -> bool"""
  return _idaapi.func_parent_iterator_set(*args)

def func_item_iterator_next(*args):
  """func_item_iterator_next(func_item_iterator_t fii,  testf, void ud) -> bool"""
  return _idaapi.func_item_iterator_next(*args)

def func_item_iterator_prev(*args):
  """func_item_iterator_prev(func_item_iterator_t fii,  testf, void ud) -> bool"""
  return _idaapi.func_item_iterator_prev(*args)

def func_item_iterator_decode_prev_insn(*args):
  """func_item_iterator_decode_prev_insn(func_item_iterator_t fii) -> bool"""
  return _idaapi.func_item_iterator_decode_prev_insn(*args)

def func_item_iterator_decode_preceding_insn(*args):
  """func_item_iterator_decode_preceding_insn(func_item_iterator_t fii, eavec_t visited, bool p_farref) -> bool"""
  return _idaapi.func_item_iterator_decode_preceding_insn(*args)
class func_tail_iterator_t(object):
    """Proxy of C++ func_tail_iterator_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> func_tail_iterator_t
        __init__(self, func_t pfn, ea_t ea = ea_t(-1)) -> func_tail_iterator_t
        """
        this = _idaapi.new_func_tail_iterator_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """set(self, func_t pfn, ea_t ea = ea_t(-1)) -> bool"""
        return _idaapi.func_tail_iterator_t_set(self, *args)

    def set_ea(self, *args):
        """set_ea(self, ea_t ea) -> bool"""
        return _idaapi.func_tail_iterator_t_set_ea(self, *args)

    def set_range(self, *args):
        """set_range(self, ea_t ea1, ea_t ea2) -> bool"""
        return _idaapi.func_tail_iterator_t_set_range(self, *args)

    def chunk(self, *args):
        """chunk(self) -> area_t"""
        return _idaapi.func_tail_iterator_t_chunk(self, *args)

    def first(self, *args):
        """first(self) -> bool"""
        return _idaapi.func_tail_iterator_t_first(self, *args)

    def last(self, *args):
        """last(self) -> bool"""
        return _idaapi.func_tail_iterator_t_last(self, *args)

    def next(self, *args):
        """next(self) -> bool"""
        return _idaapi.func_tail_iterator_t_next(self, *args)

    def prev(self, *args):
        """prev(self) -> bool"""
        return _idaapi.func_tail_iterator_t_prev(self, *args)

    def main(self, *args):
        """main(self) -> bool"""
        return _idaapi.func_tail_iterator_t_main(self, *args)

    def reset_func(self, *args):
        """reset_func(self, func_t _pfn)"""
        return _idaapi.func_tail_iterator_t_reset_func(self, *args)

    __swig_destroy__ = _idaapi.delete_func_tail_iterator_t
    __del__ = lambda self : None;
func_tail_iterator_t_swigregister = _idaapi.func_tail_iterator_t_swigregister
func_tail_iterator_t_swigregister(func_tail_iterator_t)

class func_item_iterator_t(object):
    """Proxy of C++ func_item_iterator_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> func_item_iterator_t
        __init__(self, func_t pfn, ea_t ea = ea_t(-1)) -> func_item_iterator_t
        """
        this = _idaapi.new_func_item_iterator_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """set(self, func_t pfn, ea_t _ea = ea_t(-1)) -> bool"""
        return _idaapi.func_item_iterator_t_set(self, *args)

    def reset_func(self, *args):
        """reset_func(self, func_t pfn)"""
        return _idaapi.func_item_iterator_t_reset_func(self, *args)

    def set_range(self, *args):
        """set_range(self, ea_t ea1, ea_t ea2) -> bool"""
        return _idaapi.func_item_iterator_t_set_range(self, *args)

    def first(self, *args):
        """first(self) -> bool"""
        return _idaapi.func_item_iterator_t_first(self, *args)

    def last(self, *args):
        """last(self) -> bool"""
        return _idaapi.func_item_iterator_t_last(self, *args)

    def current(self, *args):
        """current(self) -> ea_t"""
        return _idaapi.func_item_iterator_t_current(self, *args)

    def chunk(self, *args):
        """chunk(self) -> area_t"""
        return _idaapi.func_item_iterator_t_chunk(self, *args)

    def next(self, *args):
        """next(self,  func, void ud) -> bool"""
        return _idaapi.func_item_iterator_t_next(self, *args)

    def prev(self, *args):
        """prev(self,  func, void ud) -> bool"""
        return _idaapi.func_item_iterator_t_prev(self, *args)

    def next_addr(self, *args):
        """next_addr(self) -> bool"""
        return _idaapi.func_item_iterator_t_next_addr(self, *args)

    def next_head(self, *args):
        """next_head(self) -> bool"""
        return _idaapi.func_item_iterator_t_next_head(self, *args)

    def next_code(self, *args):
        """next_code(self) -> bool"""
        return _idaapi.func_item_iterator_t_next_code(self, *args)

    def next_data(self, *args):
        """next_data(self) -> bool"""
        return _idaapi.func_item_iterator_t_next_data(self, *args)

    def next_not_tail(self, *args):
        """next_not_tail(self) -> bool"""
        return _idaapi.func_item_iterator_t_next_not_tail(self, *args)

    def prev_addr(self, *args):
        """prev_addr(self) -> bool"""
        return _idaapi.func_item_iterator_t_prev_addr(self, *args)

    def prev_head(self, *args):
        """prev_head(self) -> bool"""
        return _idaapi.func_item_iterator_t_prev_head(self, *args)

    def prev_code(self, *args):
        """prev_code(self) -> bool"""
        return _idaapi.func_item_iterator_t_prev_code(self, *args)

    def prev_data(self, *args):
        """prev_data(self) -> bool"""
        return _idaapi.func_item_iterator_t_prev_data(self, *args)

    def prev_not_tail(self, *args):
        """prev_not_tail(self) -> bool"""
        return _idaapi.func_item_iterator_t_prev_not_tail(self, *args)

    def decode_prev_insn(self, *args):
        """decode_prev_insn(self) -> bool"""
        return _idaapi.func_item_iterator_t_decode_prev_insn(self, *args)

    def decode_preceding_insn(self, *args):
        """decode_preceding_insn(self, eavec_t visited, bool p_farref) -> bool"""
        return _idaapi.func_item_iterator_t_decode_preceding_insn(self, *args)

    __swig_destroy__ = _idaapi.delete_func_item_iterator_t
    __del__ = lambda self : None;
func_item_iterator_t_swigregister = _idaapi.func_item_iterator_t_swigregister
func_item_iterator_t_swigregister(func_item_iterator_t)

class func_parent_iterator_t(object):
    """Proxy of C++ func_parent_iterator_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> func_parent_iterator_t
        __init__(self, func_t fnt) -> func_parent_iterator_t
        """
        this = _idaapi.new_func_parent_iterator_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """set(self, func_t fnt) -> bool"""
        return _idaapi.func_parent_iterator_t_set(self, *args)

    def parent(self, *args):
        """parent(self) -> ea_t"""
        return _idaapi.func_parent_iterator_t_parent(self, *args)

    def first(self, *args):
        """first(self) -> bool"""
        return _idaapi.func_parent_iterator_t_first(self, *args)

    def last(self, *args):
        """last(self) -> bool"""
        return _idaapi.func_parent_iterator_t_last(self, *args)

    def next(self, *args):
        """next(self) -> bool"""
        return _idaapi.func_parent_iterator_t_next(self, *args)

    def prev(self, *args):
        """prev(self) -> bool"""
        return _idaapi.func_parent_iterator_t_prev(self, *args)

    def reset_fnt(self, *args):
        """reset_fnt(self, func_t _fnt)"""
        return _idaapi.func_parent_iterator_t_reset_fnt(self, *args)

    __swig_destroy__ = _idaapi.delete_func_parent_iterator_t
    __del__ = lambda self : None;
func_parent_iterator_t_swigregister = _idaapi.func_parent_iterator_t_swigregister
func_parent_iterator_t_swigregister(func_parent_iterator_t)


def get_prev_func_addr(*args):
  """get_prev_func_addr(func_t pfn, ea_t ea) -> ea_t"""
  return _idaapi.get_prev_func_addr(*args)

def get_next_func_addr(*args):
  """get_next_func_addr(func_t pfn, ea_t ea) -> ea_t"""
  return _idaapi.get_next_func_addr(*args)

def read_regargs(*args):
  """read_regargs(func_t pfn)"""
  return _idaapi.read_regargs(*args)

def add_regarg(*args):
  """add_regarg(func_t pfn, int reg, type_t type, char name)"""
  return _idaapi.add_regarg(*args)
IDASGN_OK = _idaapi.IDASGN_OK
IDASGN_BADARG = _idaapi.IDASGN_BADARG
IDASGN_APPLIED = _idaapi.IDASGN_APPLIED
IDASGN_CURRENT = _idaapi.IDASGN_CURRENT
IDASGN_PLANNED = _idaapi.IDASGN_PLANNED

def plan_to_apply_idasgn(*args):
  """plan_to_apply_idasgn(char fname) -> int"""
  return _idaapi.plan_to_apply_idasgn(*args)

def apply_idasgn(*args):
  """apply_idasgn(int advance) -> bool"""
  return _idaapi.apply_idasgn(*args)

def apply_idasgn_to(*args):
  """apply_idasgn_to(char signame, ea_t ea, int is_startup) -> int"""
  return _idaapi.apply_idasgn_to(*args)

def get_idasgn_qty(*args):
  """get_idasgn_qty() -> int"""
  return _idaapi.get_idasgn_qty(*args)

def get_current_idasgn(*args):
  """get_current_idasgn() -> int"""
  return _idaapi.get_current_idasgn(*args)

def calc_idasgn_state(*args):
  """calc_idasgn_state(int n) -> int"""
  return _idaapi.calc_idasgn_state(*args)

def del_idasgn(*args):
  """del_idasgn(int n) -> int"""
  return _idaapi.del_idasgn(*args)

def get_sig_filename(*args):
  """get_sig_filename(char signame) -> char"""
  return _idaapi.get_sig_filename(*args)

def get_idasgn_title(*args):
  """get_idasgn_title(char name) -> char"""
  return _idaapi.get_idasgn_title(*args)

def apply_startup_sig(*args):
  """apply_startup_sig(ea_t ea, char startup) -> bool"""
  return _idaapi.apply_startup_sig(*args)

def try_to_add_libfunc(*args):
  """try_to_add_libfunc(ea_t ea) -> int"""
  return _idaapi.try_to_add_libfunc(*args)
LIBFUNC_FOUND = _idaapi.LIBFUNC_FOUND
LIBFUNC_NONE = _idaapi.LIBFUNC_NONE
LIBFUNC_DELAY = _idaapi.LIBFUNC_DELAY

def get_fchunk_referer(*args):
  """get_fchunk_referer(ea_t ea, size_t idx) -> ea_t"""
  return _idaapi.get_fchunk_referer(*args)

def get_inf_structure(*args):
  """get_inf_structure() -> idainfo"""
  return _idaapi.get_inf_structure(*args)
fcb_normal = _idaapi.fcb_normal
fcb_indjump = _idaapi.fcb_indjump
fcb_ret = _idaapi.fcb_ret
fcb_cndret = _idaapi.fcb_cndret
fcb_noret = _idaapi.fcb_noret
fcb_enoret = _idaapi.fcb_enoret
fcb_extern = _idaapi.fcb_extern
fcb_error = _idaapi.fcb_error
class intseq_t(object):
    """Proxy of C++ intseq_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def index(self, *args):
        """index(self, int value) -> int"""
        return _idaapi.intseq_t_index(self, *args)

    def contains(self, *args):
        """contains(self, int value) -> bool"""
        return _idaapi.intseq_t_contains(self, *args)

    def add(self, *args):
        """add(self, int value)"""
        return _idaapi.intseq_t_add(self, *args)

    def get(self, *args):
        """get(self) -> int"""
        return _idaapi.intseq_t_get(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> intseq_t"""
        this = _idaapi.new_intseq_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_intseq_t
    __del__ = lambda self : None;
intseq_t_swigregister = _idaapi.intseq_t_swigregister
intseq_t_swigregister(intseq_t)

class intset_t(object):
    """Proxy of C++ intset_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def has(self, *args):
        """has(self, int value) -> bool"""
        return _idaapi.intset_t_has(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> intset_t"""
        this = _idaapi.new_intset_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_intset_t
    __del__ = lambda self : None;
intset_t_swigregister = _idaapi.intset_t_swigregister
intset_t_swigregister(intset_t)

class intmap_t(object):
    """Proxy of C++ intmap_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> intmap_t"""
        this = _idaapi.new_intmap_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_intmap_t
    __del__ = lambda self : None;
intmap_t_swigregister = _idaapi.intmap_t_swigregister
intmap_t_swigregister(intmap_t)

class node_set_t(intset_t):
    """Proxy of C++ node_set_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def has(self, *args):
        """has(self, int node) -> bool"""
        return _idaapi.node_set_t_has(self, *args)

    def first(self, *args):
        """first(self) -> int"""
        return _idaapi.node_set_t_first(self, *args)

    __swig_destroy__ = _idaapi.delete_node_set_t
    __del__ = lambda self : None;
node_set_t_swigregister = _idaapi.node_set_t_swigregister
node_set_t_swigregister(node_set_t)

class node_iterator(object):
    """Proxy of C++ node_iterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, gdl_graph_t _g, int n) -> node_iterator"""
        this = _idaapi.new_node_iterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, node_iterator n) -> bool"""
        return _idaapi.node_iterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, node_iterator n) -> bool"""
        return _idaapi.node_iterator___ne__(self, *args)

    def __ref__(self, *args):
        """__ref__(self) -> int"""
        return _idaapi.node_iterator___ref__(self, *args)

    __swig_destroy__ = _idaapi.delete_node_iterator
    __del__ = lambda self : None;
node_iterator_swigregister = _idaapi.node_iterator_swigregister
node_iterator_swigregister(node_iterator)

class gdl_graph_t(object):
    """Proxy of C++ gdl_graph_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def get_node_label(self, *args):
        """get_node_label(self, int arg0, char buf, int arg2) -> char"""
        return _idaapi.gdl_graph_t_get_node_label(self, *args)

    def print_graph_attributes(self, *args):
        """print_graph_attributes(self, FILE arg0)"""
        return _idaapi.gdl_graph_t_print_graph_attributes(self, *args)

    def print_node(self, *args):
        """print_node(self, FILE arg0, int arg1) -> bool"""
        return _idaapi.gdl_graph_t_print_node(self, *args)

    def print_edge(self, *args):
        """print_edge(self, FILE arg0, int arg1, int arg2) -> bool"""
        return _idaapi.gdl_graph_t_print_edge(self, *args)

    def print_node_attributes(self, *args):
        """print_node_attributes(self, FILE arg0, int arg1)"""
        return _idaapi.gdl_graph_t_print_node_attributes(self, *args)

    __swig_destroy__ = _idaapi.delete_gdl_graph_t
    __del__ = lambda self : None;
    def size(self, *args):
        """size(self) -> int"""
        return _idaapi.gdl_graph_t_size(self, *args)

    def node_qty(self, *args):
        """node_qty(self) -> int"""
        return _idaapi.gdl_graph_t_node_qty(self, *args)

    def exists(self, *args):
        """exists(self, int arg0) -> bool"""
        return _idaapi.gdl_graph_t_exists(self, *args)

    def entry(self, *args):
        """entry(self) -> int"""
        return _idaapi.gdl_graph_t_entry(self, *args)

    def exit(self, *args):
        """exit(self) -> int"""
        return _idaapi.gdl_graph_t_exit(self, *args)

    def nsucc(self, *args):
        """nsucc(self, int node) -> int"""
        return _idaapi.gdl_graph_t_nsucc(self, *args)

    def npred(self, *args):
        """npred(self, int node) -> int"""
        return _idaapi.gdl_graph_t_npred(self, *args)

    def succ(self, *args):
        """succ(self, int node, int i) -> int"""
        return _idaapi.gdl_graph_t_succ(self, *args)

    def pred(self, *args):
        """pred(self, int node, int i) -> int"""
        return _idaapi.gdl_graph_t_pred(self, *args)

    def empty(self, *args):
        """empty(self) -> bool"""
        return _idaapi.gdl_graph_t_empty(self, *args)

    def get_node_color(self, *args):
        """get_node_color(self, int arg0) -> bgcolor_t"""
        return _idaapi.gdl_graph_t_get_node_color(self, *args)

    def get_edge_color(self, *args):
        """get_edge_color(self, int arg0, int arg1) -> bgcolor_t"""
        return _idaapi.gdl_graph_t_get_edge_color(self, *args)

    def nedge(self, *args):
        """nedge(self, int node, bool ispred) -> size_t"""
        return _idaapi.gdl_graph_t_nedge(self, *args)

    def edge(self, *args):
        """edge(self, int node, int i, bool ispred) -> int"""
        return _idaapi.gdl_graph_t_edge(self, *args)

    def front(self, *args):
        """front(self) -> int"""
        return _idaapi.gdl_graph_t_front(self, *args)

    def begin(self, *args):
        """begin(self) -> node_iterator"""
        return _idaapi.gdl_graph_t_begin(self, *args)

    def end(self, *args):
        """end(self) -> node_iterator"""
        return _idaapi.gdl_graph_t_end(self, *args)

gdl_graph_t_swigregister = _idaapi.gdl_graph_t_swigregister
gdl_graph_t_swigregister(gdl_graph_t)


def gen_gdl(*args):
  """gen_gdl(gdl_graph_t g, char fname)"""
  return _idaapi.gen_gdl(*args)

def display_gdl(*args):
  """display_gdl(char fname) -> int"""
  return _idaapi.display_gdl(*args)

def gen_flow_graph(*args):
  """
    gen_flow_graph(char filename, char title, func_t pfn, ea_t ea1, ea_t ea2, 
        int gflags) -> bool
    """
  return _idaapi.gen_flow_graph(*args)
CHART_PRINT_NAMES = _idaapi.CHART_PRINT_NAMES
CHART_GEN_DOT = _idaapi.CHART_GEN_DOT
CHART_GEN_GDL = _idaapi.CHART_GEN_GDL
CHART_WINGRAPH = _idaapi.CHART_WINGRAPH

def gen_simple_call_chart(*args):
  """gen_simple_call_chart(char filename, char wait, char title, int gflags) -> bool"""
  return _idaapi.gen_simple_call_chart(*args)
CHART_NOLIBFUNCS = _idaapi.CHART_NOLIBFUNCS

def gen_complex_call_chart(*args):
  """
    gen_complex_call_chart(char filename, char wait, char title, ea_t ea1, ea_t ea2, 
        int flags, int32 recursion_depth = -1) -> bool
    """
  return _idaapi.gen_complex_call_chart(*args)
CHART_REFERENCING = _idaapi.CHART_REFERENCING
CHART_REFERENCED = _idaapi.CHART_REFERENCED
CHART_RECURSIVE = _idaapi.CHART_RECURSIVE
CHART_FOLLOW_DIRECTION = _idaapi.CHART_FOLLOW_DIRECTION
CHART_IGNORE_XTRN = _idaapi.CHART_IGNORE_XTRN
CHART_IGNORE_DATA_BSS = _idaapi.CHART_IGNORE_DATA_BSS
CHART_IGNORE_LIB_TO = _idaapi.CHART_IGNORE_LIB_TO
CHART_IGNORE_LIB_FROM = _idaapi.CHART_IGNORE_LIB_FROM
CHART_PRINT_COMMENTS = _idaapi.CHART_PRINT_COMMENTS
CHART_PRINT_DOTS = _idaapi.CHART_PRINT_DOTS
class cancellable_graph_t(gdl_graph_t):
    """Proxy of C++ cancellable_graph_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    cancelled = _swig_property(_idaapi.cancellable_graph_t_cancelled_get, _idaapi.cancellable_graph_t_cancelled_set)
    __swig_destroy__ = _idaapi.delete_cancellable_graph_t
    __del__ = lambda self : None;
cancellable_graph_t_swigregister = _idaapi.cancellable_graph_t_swigregister
cancellable_graph_t_swigregister(cancellable_graph_t)

class qbasic_block_t(area_t):
    """Proxy of C++ qbasic_block_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    succ = _swig_property(_idaapi.qbasic_block_t_succ_get, _idaapi.qbasic_block_t_succ_set)
    pred = _swig_property(_idaapi.qbasic_block_t_pred_get, _idaapi.qbasic_block_t_pred_set)
    def __init__(self, *args): 
        """__init__(self) -> qbasic_block_t"""
        this = _idaapi.new_qbasic_block_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_qbasic_block_t
    __del__ = lambda self : None;
qbasic_block_t_swigregister = _idaapi.qbasic_block_t_swigregister
qbasic_block_t_swigregister(qbasic_block_t)


def is_noret_block(*args):
  """is_noret_block(fc_block_type_t btype) -> bool"""
  return _idaapi.is_noret_block(*args)

def is_ret_block(*args):
  """is_ret_block(fc_block_type_t btype) -> bool"""
  return _idaapi.is_ret_block(*args)
class qflow_chart_t(cancellable_graph_t):
    """Proxy of C++ qflow_chart_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    title = _swig_property(_idaapi.qflow_chart_t_title_get, _idaapi.qflow_chart_t_title_set)
    bounds = _swig_property(_idaapi.qflow_chart_t_bounds_get, _idaapi.qflow_chart_t_bounds_set)
    pfn = _swig_property(_idaapi.qflow_chart_t_pfn_get, _idaapi.qflow_chart_t_pfn_set)
    flags = _swig_property(_idaapi.qflow_chart_t_flags_get, _idaapi.qflow_chart_t_flags_set)
    blocks = _swig_property(_idaapi.qflow_chart_t_blocks_get, _idaapi.qflow_chart_t_blocks_set)
    nproper = _swig_property(_idaapi.qflow_chart_t_nproper_get, _idaapi.qflow_chart_t_nproper_set)
    def __init__(self, *args): 
        """
        __init__(self) -> qflow_chart_t
        __init__(self, char _title, func_t _pfn, ea_t _ea1, ea_t _ea2, int _flags) -> qflow_chart_t
        """
        this = _idaapi.new_qflow_chart_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(self, *args):
        """
        create(self, char _title, func_t _pfn, ea_t _ea1, ea_t _ea2, int _flags)
        create(self, char _title, areavec_t ranges, int _flags)
        """
        return _idaapi.qflow_chart_t_create(self, *args)

    def append_to_flowchart(self, *args):
        """append_to_flowchart(self, ea_t ea1, ea_t ea2)"""
        return _idaapi.qflow_chart_t_append_to_flowchart(self, *args)

    def refresh(self, *args):
        """refresh(self)"""
        return _idaapi.qflow_chart_t_refresh(self, *args)

    def calc_block_type(self, *args):
        """calc_block_type(self, size_t blknum) -> fc_block_type_t"""
        return _idaapi.qflow_chart_t_calc_block_type(self, *args)

    def is_ret_block(self, *args):
        """is_ret_block(self, size_t blknum) -> bool"""
        return _idaapi.qflow_chart_t_is_ret_block(self, *args)

    def is_noret_block(self, *args):
        """is_noret_block(self, size_t blknum) -> bool"""
        return _idaapi.qflow_chart_t_is_noret_block(self, *args)

    def print_node_attributes(self, *args):
        """print_node_attributes(self, FILE arg0, int arg1)"""
        return _idaapi.qflow_chart_t_print_node_attributes(self, *args)

    def nsucc(self, *args):
        """nsucc(self, int node) -> int"""
        return _idaapi.qflow_chart_t_nsucc(self, *args)

    def npred(self, *args):
        """npred(self, int node) -> int"""
        return _idaapi.qflow_chart_t_npred(self, *args)

    def succ(self, *args):
        """succ(self, int node, int i) -> int"""
        return _idaapi.qflow_chart_t_succ(self, *args)

    def pred(self, *args):
        """pred(self, int node, int i) -> int"""
        return _idaapi.qflow_chart_t_pred(self, *args)

    def print_names(self, *args):
        """print_names(self) -> bool"""
        return _idaapi.qflow_chart_t_print_names(self, *args)

    def get_node_label(self, *args):
        """get_node_label(self, int arg0, char arg1, int arg2) -> char"""
        return _idaapi.qflow_chart_t_get_node_label(self, *args)

    def size(self, *args):
        """size(self) -> int"""
        return _idaapi.qflow_chart_t_size(self, *args)

    __swig_destroy__ = _idaapi.delete_qflow_chart_t
    __del__ = lambda self : None;
qflow_chart_t_swigregister = _idaapi.qflow_chart_t_swigregister
qflow_chart_t_swigregister(qflow_chart_t)
FC_PRINT = _idaapi.FC_PRINT
FC_NOEXT = _idaapi.FC_NOEXT
FC_PREDS = _idaapi.FC_PREDS
FC_APPND = _idaapi.FC_APPND

class graph_intseq_t(object):
    """Proxy of C++ graph_intseq_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def add(self, *args):
        """add(self, int x)"""
        return _idaapi.graph_intseq_t_add(self, *args)

    def add_unique(self, *args):
        """add_unique(self, int x)"""
        return _idaapi.graph_intseq_t_add_unique(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> graph_intseq_t"""
        this = _idaapi.new_graph_intseq_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_graph_intseq_t
    __del__ = lambda self : None;
graph_intseq_t_swigregister = _idaapi.graph_intseq_t_swigregister
graph_intseq_t_swigregister(graph_intseq_t)

class basic_block_t(area_t):
    """Proxy of C++ basic_block_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    succ = _swig_property(_idaapi.basic_block_t_succ_get, _idaapi.basic_block_t_succ_set)
    def __init__(self, *args): 
        """__init__(self) -> basic_block_t"""
        this = _idaapi.new_basic_block_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_basic_block_t
    __del__ = lambda self : None;
basic_block_t_swigregister = _idaapi.basic_block_t_swigregister
basic_block_t_swigregister(basic_block_t)


def create_flow_chart(*args):
  """create_flow_chart( arg0)"""
  return _idaapi.create_flow_chart(*args)

def display_flow_graph(*args):
  """display_flow_graph(char title, func_t pfn, ea_t ea1, ea_t ea2, bool print_names) -> bool"""
  return _idaapi.display_flow_graph(*args)

def display_simple_call_chart(*args):
  """display_simple_call_chart(char wait, char title, bool ignore_libfuncs) -> bool"""
  return _idaapi.display_simple_call_chart(*args)

def display_complex_call_chart(*args):
  """
    display_complex_call_chart(char wait, char title, ea_t ea1, ea_t ea2, int flags, 
        int32 recursion_depth = -1) -> bool
    """
  return _idaapi.display_complex_call_chart(*args)

def refresh_lists(*args):
  """refresh_lists()"""
  return _idaapi.refresh_lists(*args)
def asklong(defval, format):
    res, val = _idaapi._asklong(defval, format)

    if res == 1:
        return val
    else:
        return None

def askaddr(defval, format):
    res, ea = _idaapi._askaddr(defval, format)

    if res == 1:
        return ea
    else:
        return None

def askseg(defval, format):
    res, sel = _idaapi._askseg(defval, format)

    if res == 1:
        return sel
    else:
        return None


mbox_internal = _idaapi.mbox_internal
mbox_info = _idaapi.mbox_info
mbox_warning = _idaapi.mbox_warning
mbox_error = _idaapi.mbox_error
mbox_nomem = _idaapi.mbox_nomem
mbox_feedback = _idaapi.mbox_feedback
mbox_readerror = _idaapi.mbox_readerror
mbox_writeerror = _idaapi.mbox_writeerror
mbox_filestruct = _idaapi.mbox_filestruct
mbox_wait = _idaapi.mbox_wait
mbox_hide = _idaapi.mbox_hide
mbox_replace = _idaapi.mbox_replace
chtype_generic = _idaapi.chtype_generic
chtype_idasgn = _idaapi.chtype_idasgn
chtype_entry = _idaapi.chtype_entry
chtype_name = _idaapi.chtype_name
chtype_stkvar_xref = _idaapi.chtype_stkvar_xref
chtype_xref = _idaapi.chtype_xref
chtype_enum = _idaapi.chtype_enum
chtype_enum_by_value = _idaapi.chtype_enum_by_value
chtype_func = _idaapi.chtype_func
chtype_segm = _idaapi.chtype_segm
chtype_segreg = _idaapi.chtype_segreg
chtype_struc = _idaapi.chtype_struc
chtype_strpath = _idaapi.chtype_strpath
chtype_generic2 = _idaapi.chtype_generic2
chtype_idatil = _idaapi.chtype_idatil
beep_default = _idaapi.beep_default

def request_refresh(*args):
  """request_refresh(int mask)"""
  return _idaapi.request_refresh(*args)
BWN_EXPORTS = _idaapi.BWN_EXPORTS
BWN_IMPORTS = _idaapi.BWN_IMPORTS
BWN_NAMES = _idaapi.BWN_NAMES
BWN_FUNCS = _idaapi.BWN_FUNCS
BWN_STRINGS = _idaapi.BWN_STRINGS
BWN_SEGS = _idaapi.BWN_SEGS
BWN_SEGREGS = _idaapi.BWN_SEGREGS
BWN_SELS = _idaapi.BWN_SELS
BWN_SIGNS = _idaapi.BWN_SIGNS
BWN_TILS = _idaapi.BWN_TILS
BWN_LOCTYPS = _idaapi.BWN_LOCTYPS
BWN_CALLS = _idaapi.BWN_CALLS
BWN_PROBS = _idaapi.BWN_PROBS
BWN_BPTS = _idaapi.BWN_BPTS
BWN_THREADS = _idaapi.BWN_THREADS
BWN_MODULES = _idaapi.BWN_MODULES
BWN_TRACE = _idaapi.BWN_TRACE
BWN_STACK = _idaapi.BWN_STACK
BWN_XREFS = _idaapi.BWN_XREFS
BWN_SEARCHS = _idaapi.BWN_SEARCHS
BWN_FRAME = _idaapi.BWN_FRAME
BWN_NAVBAND = _idaapi.BWN_NAVBAND
BWN_ENUMS = _idaapi.BWN_ENUMS
BWN_STRUCTS = _idaapi.BWN_STRUCTS
BWN_DISASMS = _idaapi.BWN_DISASMS
BWN_DUMPS = _idaapi.BWN_DUMPS
BWN_NOTEPAD = _idaapi.BWN_NOTEPAD
IWID_EXPORTS = _idaapi.IWID_EXPORTS
IWID_IMPORTS = _idaapi.IWID_IMPORTS
IWID_NAMES = _idaapi.IWID_NAMES
IWID_FUNCS = _idaapi.IWID_FUNCS
IWID_STRINGS = _idaapi.IWID_STRINGS
IWID_SEGS = _idaapi.IWID_SEGS
IWID_SEGREGS = _idaapi.IWID_SEGREGS
IWID_SELS = _idaapi.IWID_SELS
IWID_SIGNS = _idaapi.IWID_SIGNS
IWID_TILS = _idaapi.IWID_TILS
IWID_LOCTYPS = _idaapi.IWID_LOCTYPS
IWID_CALLS = _idaapi.IWID_CALLS
IWID_PROBS = _idaapi.IWID_PROBS
IWID_BPTS = _idaapi.IWID_BPTS
IWID_THREADS = _idaapi.IWID_THREADS
IWID_MODULES = _idaapi.IWID_MODULES
IWID_TRACE = _idaapi.IWID_TRACE
IWID_STACK = _idaapi.IWID_STACK
IWID_XREFS = _idaapi.IWID_XREFS
IWID_SEARCHS = _idaapi.IWID_SEARCHS
IWID_FRAME = _idaapi.IWID_FRAME
IWID_NAVBAND = _idaapi.IWID_NAVBAND
IWID_ENUMS = _idaapi.IWID_ENUMS
IWID_STRUCTS = _idaapi.IWID_STRUCTS
IWID_DISASMS = _idaapi.IWID_DISASMS
IWID_DUMPS = _idaapi.IWID_DUMPS
IWID_NOTEPAD = _idaapi.IWID_NOTEPAD
IWID_IDAMEMOS = _idaapi.IWID_IDAMEMOS
IWID_ALL = _idaapi.IWID_ALL
CHOOSER_NO_SELECTION = _idaapi.CHOOSER_NO_SELECTION
CHOOSER_MULTI_SELECTION = _idaapi.CHOOSER_MULTI_SELECTION
CHOOSER_POPUP_MENU = _idaapi.CHOOSER_POPUP_MENU
CHOOSER_MENU_EDIT = _idaapi.CHOOSER_MENU_EDIT
CHOOSER_MENU_JUMP = _idaapi.CHOOSER_MENU_JUMP
CHOOSER_MENU_SEARCH = _idaapi.CHOOSER_MENU_SEARCH
CVH_USERDATA = _idaapi.CVH_USERDATA
CVH_KEYDOWN = _idaapi.CVH_KEYDOWN
CVH_POPUP = _idaapi.CVH_POPUP
CVH_DBLCLICK = _idaapi.CVH_DBLCLICK
CVH_CURPOS = _idaapi.CVH_CURPOS
CVH_CLOSE = _idaapi.CVH_CLOSE
CVH_CLICK = _idaapi.CVH_CLICK
class exec_request_t(object):
    """Proxy of C++ exec_request_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    MFF_MAGIC = _idaapi.exec_request_t_MFF_MAGIC
    def valid(self, *args):
        """valid(self) -> bool"""
        return _idaapi.exec_request_t_valid(self, *args)

    code = _swig_property(_idaapi.exec_request_t_code_get, _idaapi.exec_request_t_code_set)
    sem = _swig_property(_idaapi.exec_request_t_sem_get, _idaapi.exec_request_t_sem_set)
    def execute(self, *args):
        """execute(self) -> int"""
        return _idaapi.exec_request_t_execute(self, *args)

    __swig_destroy__ = _idaapi.delete_exec_request_t
    __del__ = lambda self : None;
exec_request_t_swigregister = _idaapi.exec_request_t_swigregister
exec_request_t_swigregister(exec_request_t)

MFF_FAST = _idaapi.MFF_FAST
MFF_READ = _idaapi.MFF_READ
MFF_WRITE = _idaapi.MFF_WRITE

def banner(*args):
  """banner(int wait) -> bool"""
  return _idaapi.banner(*args)

def is_msg_inited(*args):
  """is_msg_inited() -> bool"""
  return _idaapi.is_msg_inited(*args)

def refresh_idaview(*args):
  """refresh_idaview()"""
  return _idaapi.refresh_idaview(*args)

def refresh_idaview_anyway(*args):
  """refresh_idaview_anyway()"""
  return _idaapi.refresh_idaview_anyway(*args)

def analyzer_options(*args):
  """analyzer_options()"""
  return _idaapi.analyzer_options(*args)

def get_screen_ea(*args):
  """get_screen_ea() -> ea_t"""
  return _idaapi.get_screen_ea(*args)

def get_cursor(*args):
  """get_cursor() -> bool"""
  return _idaapi.get_cursor(*args)

def get_curline(*args):
  """get_curline() -> char"""
  return _idaapi.get_curline(*args)

def read_selection(*args):
  """read_selection() -> bool"""
  return _idaapi.read_selection(*args)

def unmark_selection(*args):
  """unmark_selection()"""
  return _idaapi.unmark_selection(*args)

def open_url(*args):
  """open_url(char url)"""
  return _idaapi.open_url(*args)

def get_hexdump_ea(*args):
  """get_hexdump_ea(int hexdump_num) -> ea_t"""
  return _idaapi.get_hexdump_ea(*args)

def get_xml(*args):
  """get_xml(char path, idc_value_t value) -> bool"""
  return _idaapi.get_xml(*args)

def del_xml(*args):
  """del_xml(char path) -> bool"""
  return _idaapi.del_xml(*args)

def push_xml(*args):
  """push_xml(char path) -> bool"""
  return _idaapi.push_xml(*args)

def pop_xml(*args):
  """pop_xml() -> bool"""
  return _idaapi.pop_xml(*args)

def get_key_code(*args):
  """get_key_code(char keyname) -> ushort"""
  return _idaapi.get_key_code(*args)

def refresh_navband(*args):
  """refresh_navband(bool force)"""
  return _idaapi.refresh_navband(*args)

def refresh_chooser(*args):
  """refresh_chooser(char title) -> bool"""
  return _idaapi.refresh_chooser(*args)

def close_chooser(*args):
  """close_chooser(char title) -> bool"""
  return _idaapi.close_chooser(*args)

def install_command_interpreter(*args):
  """install_command_interpreter( cp)"""
  return _idaapi.install_command_interpreter(*args)

def remove_command_interpreter(*args):
  """remove_command_interpreter( cp)"""
  return _idaapi.remove_command_interpreter(*args)

def gen_disasm_text(*args):
  """gen_disasm_text(ea_t ea1, ea_t ea2, text_t text, bool truncate_lines)"""
  return _idaapi.gen_disasm_text(*args)

def execute_sync(*args):
  """execute_sync(exec_request_t req, int reqf) -> int"""
  return _idaapi.execute_sync(*args)

def enable_input_hotkeys(*args):
  """enable_input_hotkeys(bool enable) -> bool"""
  return _idaapi.enable_input_hotkeys(*args)

def del_menu_item(*args):
  """del_menu_item(char menupath) -> bool"""
  return _idaapi.del_menu_item(*args)

def open_tform(*args):
  """open_tform(TForm form, int options)"""
  return _idaapi.open_tform(*args)

def close_tform(*args):
  """close_tform(TForm form, int options)"""
  return _idaapi.close_tform(*args)

def switchto_tform(*args):
  """switchto_tform(TForm form, bool take_focus)"""
  return _idaapi.switchto_tform(*args)

def find_tform(*args):
  """find_tform(char caption) -> TForm"""
  return _idaapi.find_tform(*args)

def get_current_tform(*args):
  """get_current_tform() -> TForm"""
  return _idaapi.get_current_tform(*args)

def create_custom_viewer(*args):
  """
    create_custom_viewer(char title, TWinControl parent, place_t minplace, place_t maxplace, 
        place_t curplace, int y, void ud) -> TCustomControl
    """
  return _idaapi.create_custom_viewer(*args)

def refresh_custom_viewer(*args):
  """refresh_custom_viewer(TCustomControl custom_viewer)"""
  return _idaapi.refresh_custom_viewer(*args)

def destroy_custom_viewer(*args):
  """destroy_custom_viewer(TCustomControl custom_viewer)"""
  return _idaapi.destroy_custom_viewer(*args)

def get_custom_viewer_place(*args):
  """get_custom_viewer_place(TCustomControl custom_viewer, bool mouse) -> place_t"""
  return _idaapi.get_custom_viewer_place(*args)

def set_custom_viewer_popup_menu(*args):
  """set_custom_viewer_popup_menu(TCustomControl custom_viewer, TPopupMenu menu)"""
  return _idaapi.set_custom_viewer_popup_menu(*args)

def add_custom_viewer_popup_item(*args):
  """
    add_custom_viewer_popup_item(TCustomControl custom_viewer, char title, char hotkey, 
        menu_item_callback_t cb, void ud)
    """
  return _idaapi.add_custom_viewer_popup_item(*args)

def set_custom_viewer_handlers(*args):
  """
    set_custom_viewer_handlers(TCustomControl custom_viewer, custom_viewer_keydown_t keyboard_handler, 
        custom_viewer_popup_t popup_handler, 
        custom_viewer_dblclick_t dblclick_handler, 
        custom_viewer_curpos_t curpos_handler, 
        custom_viewer_close_t close_handler, void user_data)
    """
  return _idaapi.set_custom_viewer_handlers(*args)

def set_custom_viewer_handler(*args):
  """
    set_custom_viewer_handler(TCustomControl custom_viewer, custom_viewer_handler_id_t handler_id, 
        void handler_or_data) -> void
    """
  return _idaapi.set_custom_viewer_handler(*args)

def get_custom_viewer_curline(*args):
  """get_custom_viewer_curline(TCustomControl custom_viewer, bool mouse) -> char"""
  return _idaapi.get_custom_viewer_curline(*args)

def get_current_viewer(*args):
  """get_current_viewer() -> TCustomControl"""
  return _idaapi.get_current_viewer(*args)

def set_custom_viewer_range(*args):
  """set_custom_viewer_range(TCustomControl custom_viewer, place_t minplace, place_t maxplace)"""
  return _idaapi.set_custom_viewer_range(*args)

def is_idaview(*args):
  """is_idaview(TCustomControl v) -> bool"""
  return _idaapi.is_idaview(*args)

def readsel2(*args):
  """readsel2(TCustomControl v, twinpos_t p1, twinpos_t p2) -> bool"""
  return _idaapi.readsel2(*args)

def clearBreak(*args):
  """clearBreak()"""
  return _idaapi.clearBreak(*args)

def setBreak(*args):
  """setBreak()"""
  return _idaapi.setBreak(*args)

def wasBreak(*args):
  """wasBreak() -> bool"""
  return _idaapi.wasBreak(*args)

def ui_load_new_file(*args):
  """ui_load_new_file(char filename, linput_t li, ushort neflags) -> bool"""
  return _idaapi.ui_load_new_file(*args)

def ui_run_debugger(*args):
  """ui_run_debugger(char dbgopts, char $ignore, int argc, char argv) -> bool"""
  return _idaapi.ui_run_debugger(*args)

def add_idc_hotkey(*args):
  """add_idc_hotkey(char hotkey, char idcfunc) -> int"""
  return _idaapi.add_idc_hotkey(*args)

def del_idc_hotkey(*args):
  """del_idc_hotkey(char hotkey) -> bool"""
  return _idaapi.del_idc_hotkey(*args)

def open_exports_window(*args):
  """open_exports_window(ea_t ea) -> TForm"""
  return _idaapi.open_exports_window(*args)

def open_imports_window(*args):
  """open_imports_window(ea_t ea) -> TForm"""
  return _idaapi.open_imports_window(*args)

def open_names_window(*args):
  """open_names_window(ea_t ea) -> TForm"""
  return _idaapi.open_names_window(*args)

def open_funcs_window(*args):
  """open_funcs_window(ea_t ea) -> TForm"""
  return _idaapi.open_funcs_window(*args)

def open_strings_window(*args):
  """open_strings_window(ea_t ea, ea_t selstart = ea_t(-1), ea_t selend = ea_t(-1)) -> TForm"""
  return _idaapi.open_strings_window(*args)

def open_segments_window(*args):
  """open_segments_window(ea_t ea) -> TForm"""
  return _idaapi.open_segments_window(*args)

def open_segregs_window(*args):
  """open_segregs_window(ea_t ea) -> TForm"""
  return _idaapi.open_segregs_window(*args)

def open_selectors_window(*args):
  """open_selectors_window() -> TForm"""
  return _idaapi.open_selectors_window(*args)

def open_signatures_window(*args):
  """open_signatures_window() -> TForm"""
  return _idaapi.open_signatures_window(*args)

def open_tils_window(*args):
  """open_tils_window() -> TForm"""
  return _idaapi.open_tils_window(*args)

def open_loctypes_window(*args):
  """open_loctypes_window(int ordinal) -> TForm"""
  return _idaapi.open_loctypes_window(*args)

def open_calls_window(*args):
  """open_calls_window(ea_t ea) -> TForm"""
  return _idaapi.open_calls_window(*args)

def open_problems_window(*args):
  """open_problems_window(ea_t ea) -> TForm"""
  return _idaapi.open_problems_window(*args)

def open_bpts_window(*args):
  """open_bpts_window(ea_t ea) -> TForm"""
  return _idaapi.open_bpts_window(*args)

def open_threads_window(*args):
  """open_threads_window() -> TForm"""
  return _idaapi.open_threads_window(*args)

def open_modules_window(*args):
  """open_modules_window() -> TForm"""
  return _idaapi.open_modules_window(*args)

def open_trace_window(*args):
  """open_trace_window() -> TForm"""
  return _idaapi.open_trace_window(*args)

def open_stack_window(*args):
  """open_stack_window() -> TForm"""
  return _idaapi.open_stack_window(*args)

def open_xrefs_window(*args):
  """open_xrefs_window(ea_t ea) -> TForm"""
  return _idaapi.open_xrefs_window(*args)

def open_frame_window(*args):
  """open_frame_window(func_t pfn, uval_t offset) -> TForm"""
  return _idaapi.open_frame_window(*args)

def open_navband_window(*args):
  """open_navband_window(ea_t ea, int zoom) -> TForm"""
  return _idaapi.open_navband_window(*args)

def open_enums_window(*args):
  """open_enums_window(tid_t const_id = ea_t(-1)) -> TForm"""
  return _idaapi.open_enums_window(*args)

def open_structs_window(*args):
  """open_structs_window(tid_t id = ea_t(-1), uval_t offset = 0) -> TForm"""
  return _idaapi.open_structs_window(*args)

def open_disasm_window(*args):
  """open_disasm_window(char window_title, areavec_t ranges = None) -> TForm"""
  return _idaapi.open_disasm_window(*args)

def open_hexdump_window(*args):
  """open_hexdump_window(char window_title) -> TForm"""
  return _idaapi.open_hexdump_window(*args)

def open_notepad_window(*args):
  """open_notepad_window() -> TForm"""
  return _idaapi.open_notepad_window(*args)

def choose_idasgn(*args):
  """choose_idasgn() -> char"""
  return _idaapi.choose_idasgn(*args)

def choose_til(*args):
  """choose_til() -> bool"""
  return _idaapi.choose_til(*args)

def choose_entry(*args):
  """choose_entry(char title) -> ea_t"""
  return _idaapi.choose_entry(*args)

def choose_name(*args):
  """choose_name(char title) -> ea_t"""
  return _idaapi.choose_name(*args)

def choose_stkvar_xref(*args):
  """choose_stkvar_xref(func_t pfn, member_t mptr) -> ea_t"""
  return _idaapi.choose_stkvar_xref(*args)

def choose_xref(*args):
  """choose_xref(ea_t to) -> ea_t"""
  return _idaapi.choose_xref(*args)

def choose_enum(*args):
  """choose_enum(char title, enum_t default_id) -> enum_t"""
  return _idaapi.choose_enum(*args)

def choose_enum_by_value(*args):
  """choose_enum_by_value(char title, enum_t default_id, uval_t value) -> enum_t"""
  return _idaapi.choose_enum_by_value(*args)

def choose_func(*args):
  """choose_func(char title, ea_t default_ea) -> func_t"""
  return _idaapi.choose_func(*args)

def choose_segm(*args):
  """choose_segm(char title, ea_t default_ea) -> segment_t"""
  return _idaapi.choose_segm(*args)

def choose_segreg(*args):
  """choose_segreg(char title) -> segreg_t"""
  return _idaapi.choose_segreg(*args)

def choose_struc(*args):
  """choose_struc(char title) -> struc_t"""
  return _idaapi.choose_struc(*args)

def add_chooser_command(*args):
  """
    add_chooser_command(char chooser_caption, char cmd_caption, chooser_cb_t chooser_cb, 
        int menu_index = -1, int icon = -1, 
        int flags = 0) -> bool
    """
  return _idaapi.add_chooser_command(*args)

def get_chooser_obj(*args):
  """get_chooser_obj(char chooser_caption) -> void"""
  return _idaapi.get_chooser_obj(*args)

def enable_chooser_item_attrs(*args):
  """enable_chooser_item_attrs(char chooser_caption, bool enable) -> bool"""
  return _idaapi.enable_chooser_item_attrs(*args)

def show_wait_box(*args):
  """show_wait_box(char format, v(...) *args)"""
  return _idaapi.show_wait_box(*args)

def hide_wait_box(*args):
  """hide_wait_box()"""
  return _idaapi.hide_wait_box(*args)

def replace_wait_box(*args):
  """replace_wait_box(char format, v(...) *args)"""
  return _idaapi.replace_wait_box(*args)

def beep(*args):
  """beep(beep_t beep_type = beep_default)"""
  return _idaapi.beep(*args)

def ask_for_feedback(*args):
  """ask_for_feedback(char format, v(...) *args)"""
  return _idaapi.ask_for_feedback(*args)

def askident(*args):
  """askident(char defval, char format, v(...) *args) -> char"""
  return _idaapi.askident(*args)

def _askaddr(*args):
  """_askaddr(ea_t addr, char format, v(...) *args) -> int"""
  return _idaapi._askaddr(*args)

def _askseg(*args):
  """_askseg(sel_t sel, char format, v(...) *args) -> int"""
  return _idaapi._askseg(*args)

def _asklong(*args):
  """_asklong(sval_t value, char format, v(...) *args) -> int"""
  return _idaapi._asklong(*args)

def display_copyright_warning(*args):
  """display_copyright_warning() -> bool"""
  return _idaapi.display_copyright_warning(*args)

def error(*args):
  """error(char format, v(...) *args)"""
  return _idaapi.error(*args)

def Err(*args):
  """Err(help_t format, v(...) *args)"""
  return _idaapi.Err(*args)

def warning(*args):
  """warning(char message, v(...) *args)"""
  return _idaapi.warning(*args)

def Warn(*args):
  """Warn(help_t format, v(...) *args)"""
  return _idaapi.Warn(*args)

def info(*args):
  """info(char message, v(...) *args)"""
  return _idaapi.info(*args)

def Info(*args):
  """Info(help_t format, v(...) *args)"""
  return _idaapi.Info(*args)

def nomem(*args):
  """nomem(char module, v(...) *args)"""
  return _idaapi.nomem(*args)

def msg(*args):
  """msg(char format, v(...) *args) -> int"""
  return _idaapi.msg(*args)

def askyn_c(*args):
  """askyn_c(int deflt, char format, v(...) *args) -> int"""
  return _idaapi.askyn_c(*args)

def askyn(*args):
  """askyn(int deflt, help_t format, v(...) *args) -> int"""
  return _idaapi.askyn(*args)

def askbuttons_c(*args):
  """
    askbuttons_c(char Yes, char No, char Cancel, int deflt, char format, 
        v(...) *args) -> int
    """
  return _idaapi.askbuttons_c(*args)

def askstr(*args):
  """askstr(int hist, char defval, char format, v(...) *args) -> char"""
  return _idaapi.askstr(*args)
HIST_SEG = _idaapi.HIST_SEG
HIST_CMT = _idaapi.HIST_CMT
HIST_SRCH = _idaapi.HIST_SRCH
HIST_ADDR = _idaapi.HIST_ADDR
HIST_IDENT = _idaapi.HIST_IDENT
HIST_NUM = _idaapi.HIST_NUM
HIST_FILE = _idaapi.HIST_FILE
HIST_TYPE = _idaapi.HIST_TYPE
HIST_CMD = _idaapi.HIST_CMD
HIST_DIR = _idaapi.HIST_DIR

def askfile_c(*args):
  """askfile_c(int savefile, char defval, char format, v(...) *args) -> char"""
  return _idaapi.askfile_c(*args)
class strarray_t(object):
    """Proxy of C++ strarray_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = _swig_property(_idaapi.strarray_t_code_get, _idaapi.strarray_t_code_set)
    text = _swig_property(_idaapi.strarray_t_text_get, _idaapi.strarray_t_text_set)
    def __init__(self, *args): 
        """__init__(self) -> strarray_t"""
        this = _idaapi.new_strarray_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_strarray_t
    __del__ = lambda self : None;
strarray_t_swigregister = _idaapi.strarray_t_swigregister
strarray_t_swigregister(strarray_t)

def add_menu_item(*args):
  """
    add_menu_item(char menupath, char name, char hotkey, int flags, PyObject pyfunc, 
        PyObject args) -> bool
    add_menu_item(char menupath, char name, char hotkey, int flags, menu_item_callback_t callback, 
        void ud) -> bool
    """
  return _idaapi.add_menu_item(*args)

def jumpto(*args):
  """
    jumpto(ea_t ea, int opnum = -1) -> bool
    jumpto(TCustomControl custom_viewer, place_t place, int x, 
        int y) -> bool
    """
  return _idaapi.jumpto(*args)

def set_xml(*args):
  """
    set_xml(char path, char name, char value) -> bool
    set_xml(char path, char name, int value) -> bool
    """
  return _idaapi.set_xml(*args)


def strarray(*args):
  """strarray(strarray_t array, size_t array_size, int code) -> char"""
  return _idaapi.strarray(*args)

def choose_choose(*args):
  """
    choose_choose(PyObject self, int flags, int x0, int y0, int x1, int y1, 
        int width) -> uint32
    """
  return _idaapi.choose_choose(*args)
class Choose:
	"""
	Choose - class for choose() with callbacks
	"""
	def __init__(self, list, title, flags=0):
		self.list = list
		self.title = title

		self.flags = flags
		self.x0 = -1
		self.x1 = -1
		self.y0 = -1
		self.y1 = -1

		self.width = -1

		# HACK: Add a circular reference for non-modal choosers. This prevents the GC
		# from collecting the class object the callbacks need. Unfortunately this means
		# that the class will never be collected, unless refhack is set to None explicitly.
		if (flags & 1) == 0:
			self.refhack = self

	def sizer(self):
		"""
		Callback: sizer - returns the length of the list
		"""
		return len(self.list)

	def getl(self, n):
		"""
		Callback: getl - get one item from the list
		"""
		if n == 0:
		   return self.title
		if n <= self.sizer():
			return str(self.list[n-1])
		else:
			return "<Empty>"

	def ins(self):
		pass

	def update(self, n):
		pass

	def edit(self, n):
		pass

	def enter(self, n):
		print "enter(%d) called" % n

	def destroy(self):
		pass

	def get_icon(self, n):
		pass

	def choose(self):
		"""
		choose - Display the choose dialogue
		"""
		return _idaapi.choose_choose(self, self.flags, self.x0, self.y0, self.x1, self.y1, self.width)

COLOR_ON = _idaapi.COLOR_ON
COLOR_OFF = _idaapi.COLOR_OFF
COLOR_ESC = _idaapi.COLOR_ESC
COLOR_INV = _idaapi.COLOR_INV
SCOLOR_ON = _idaapi.SCOLOR_ON
SCOLOR_OFF = _idaapi.SCOLOR_OFF
SCOLOR_ESC = _idaapi.SCOLOR_ESC
SCOLOR_INV = _idaapi.SCOLOR_INV

def requires_color_esc(*args):
  """requires_color_esc(char c) -> bool"""
  return _idaapi.requires_color_esc(*args)
SCOLOR_DEFAULT = _idaapi.SCOLOR_DEFAULT
SCOLOR_REGCMT = _idaapi.SCOLOR_REGCMT
SCOLOR_RPTCMT = _idaapi.SCOLOR_RPTCMT
SCOLOR_AUTOCMT = _idaapi.SCOLOR_AUTOCMT
SCOLOR_INSN = _idaapi.SCOLOR_INSN
SCOLOR_DATNAME = _idaapi.SCOLOR_DATNAME
SCOLOR_DNAME = _idaapi.SCOLOR_DNAME
SCOLOR_DEMNAME = _idaapi.SCOLOR_DEMNAME
SCOLOR_SYMBOL = _idaapi.SCOLOR_SYMBOL
SCOLOR_CHAR = _idaapi.SCOLOR_CHAR
SCOLOR_STRING = _idaapi.SCOLOR_STRING
SCOLOR_NUMBER = _idaapi.SCOLOR_NUMBER
SCOLOR_VOIDOP = _idaapi.SCOLOR_VOIDOP
SCOLOR_CREF = _idaapi.SCOLOR_CREF
SCOLOR_DREF = _idaapi.SCOLOR_DREF
SCOLOR_CREFTAIL = _idaapi.SCOLOR_CREFTAIL
SCOLOR_DREFTAIL = _idaapi.SCOLOR_DREFTAIL
SCOLOR_ERROR = _idaapi.SCOLOR_ERROR
SCOLOR_PREFIX = _idaapi.SCOLOR_PREFIX
SCOLOR_BINPREF = _idaapi.SCOLOR_BINPREF
SCOLOR_EXTRA = _idaapi.SCOLOR_EXTRA
SCOLOR_ALTOP = _idaapi.SCOLOR_ALTOP
SCOLOR_HIDNAME = _idaapi.SCOLOR_HIDNAME
SCOLOR_LIBNAME = _idaapi.SCOLOR_LIBNAME
SCOLOR_LOCNAME = _idaapi.SCOLOR_LOCNAME
SCOLOR_CODNAME = _idaapi.SCOLOR_CODNAME
SCOLOR_ASMDIR = _idaapi.SCOLOR_ASMDIR
SCOLOR_MACRO = _idaapi.SCOLOR_MACRO
SCOLOR_DSTR = _idaapi.SCOLOR_DSTR
SCOLOR_DCHAR = _idaapi.SCOLOR_DCHAR
SCOLOR_DNUM = _idaapi.SCOLOR_DNUM
SCOLOR_KEYWORD = _idaapi.SCOLOR_KEYWORD
SCOLOR_REG = _idaapi.SCOLOR_REG
SCOLOR_IMPNAME = _idaapi.SCOLOR_IMPNAME
SCOLOR_SEGNAME = _idaapi.SCOLOR_SEGNAME
SCOLOR_UNKNAME = _idaapi.SCOLOR_UNKNAME
SCOLOR_CNAME = _idaapi.SCOLOR_CNAME
SCOLOR_UNAME = _idaapi.SCOLOR_UNAME
SCOLOR_COLLAPSED = _idaapi.SCOLOR_COLLAPSED
SCOLOR_ADDR = _idaapi.SCOLOR_ADDR

def tag_strlen(*args):
  """tag_strlen(char line) -> ssize_t"""
  return _idaapi.tag_strlen(*args)

def tag_remove(*args):
  """tag_remove(char instr) -> ssize_t"""
  return _idaapi.tag_remove(*args)
COLOR_SELECTED = _idaapi.COLOR_SELECTED
COLOR_LIBFUNC = _idaapi.COLOR_LIBFUNC
COLOR_REGFUNC = _idaapi.COLOR_REGFUNC
COLOR_CODE = _idaapi.COLOR_CODE
COLOR_DATA = _idaapi.COLOR_DATA
COLOR_UNKNOWN = _idaapi.COLOR_UNKNOWN
COLOR_EXTERN = _idaapi.COLOR_EXTERN
COLOR_CURITEM = _idaapi.COLOR_CURITEM
COLOR_CURLINE = _idaapi.COLOR_CURLINE
COLOR_HIDLINE = _idaapi.COLOR_HIDLINE
COLOR_BG_MAX = _idaapi.COLOR_BG_MAX

def calc_prefix_color(*args):
  """calc_prefix_color(ea_t ea) -> color_t"""
  return _idaapi.calc_prefix_color(*args)

def calc_bg_color(*args):
  """calc_bg_color(ea_t ea) -> bgcolor_t"""
  return _idaapi.calc_bg_color(*args)

def add_sourcefile(*args):
  """add_sourcefile(ea_t ea1, ea_t ea2, char filename) -> bool"""
  return _idaapi.add_sourcefile(*args)

def get_sourcefile(*args):
  """get_sourcefile(ea_t ea, area_t bounds = None) -> char"""
  return _idaapi.get_sourcefile(*args)

def del_sourcefile(*args):
  """del_sourcefile(ea_t ea) -> bool"""
  return _idaapi.del_sourcefile(*args)

def MakeLine(*args):
  """MakeLine(char contents, int indent = -1) -> bool"""
  return _idaapi.MakeLine(*args)

def printf_line(*args):
  """printf_line(int indent, char format, v(...) *args) -> bool"""
  return _idaapi.printf_line(*args)

def MakeNull(*args):
  """MakeNull() -> bool"""
  return _idaapi.MakeNull(*args)

def MakeBorder(*args):
  """MakeBorder() -> bool"""
  return _idaapi.MakeBorder(*args)

def MakeSolidBorder(*args):
  """MakeSolidBorder() -> bool"""
  return _idaapi.MakeSolidBorder(*args)

def gen_cmt_line(*args):
  """gen_cmt_line(char format, v(...) *args) -> bool"""
  return _idaapi.gen_cmt_line(*args)

def gen_collapsed_line(*args):
  """gen_collapsed_line(char format, v(...) *args) -> bool"""
  return _idaapi.gen_collapsed_line(*args)

def generate_big_comment(*args):
  """generate_big_comment(char cmt, color_t color) -> bool"""
  return _idaapi.generate_big_comment(*args)

def generate_many_lines(*args):
  """generate_many_lines(char string, color_t color) -> bool"""
  return _idaapi.generate_many_lines(*args)

def describe(*args):
  """describe(ea_t ea, bool isprev, char format, v(...) *args)"""
  return _idaapi.describe(*args)

def add_long_cmt(*args):
  """add_long_cmt(ea_t ea, bool isprev, char format, v(...) *args)"""
  return _idaapi.add_long_cmt(*args)

def add_pgm_cmt(*args):
  """add_pgm_cmt(char format, v(...) *args)"""
  return _idaapi.add_pgm_cmt(*args)

def generate_disasm_line(*args):
  """generate_disasm_line(ea_t ea, int flags = 0) -> bool"""
  return _idaapi.generate_disasm_line(*args)
GENDSM_FORCE_CODE = _idaapi.GENDSM_FORCE_CODE
GENDSM_MULTI_LINE = _idaapi.GENDSM_MULTI_LINE
MAX_FILE_FORMAT_NAME = _idaapi.MAX_FILE_FORMAT_NAME
class loader_t(object):
    """Proxy of C++ loader_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    version = _swig_property(_idaapi.loader_t_version_get, _idaapi.loader_t_version_set)
    flags = _swig_property(_idaapi.loader_t_flags_get, _idaapi.loader_t_flags_set)
    def __init__(self, *args): 
        """__init__(self) -> loader_t"""
        this = _idaapi.new_loader_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_loader_t
    __del__ = lambda self : None;
loader_t_swigregister = _idaapi.loader_t_swigregister
loader_t_swigregister(loader_t)
COLOR_DEFAULT = cvar.COLOR_DEFAULT
COLOR_REGCMT = cvar.COLOR_REGCMT
COLOR_RPTCMT = cvar.COLOR_RPTCMT
COLOR_AUTOCMT = cvar.COLOR_AUTOCMT
COLOR_INSN = cvar.COLOR_INSN
COLOR_DATNAME = cvar.COLOR_DATNAME
COLOR_DNAME = cvar.COLOR_DNAME
COLOR_DEMNAME = cvar.COLOR_DEMNAME
COLOR_SYMBOL = cvar.COLOR_SYMBOL
COLOR_CHAR = cvar.COLOR_CHAR
COLOR_STRING = cvar.COLOR_STRING
COLOR_NUMBER = cvar.COLOR_NUMBER
COLOR_VOIDOP = cvar.COLOR_VOIDOP
COLOR_CREF = cvar.COLOR_CREF
COLOR_DREF = cvar.COLOR_DREF
COLOR_CREFTAIL = cvar.COLOR_CREFTAIL
COLOR_DREFTAIL = cvar.COLOR_DREFTAIL
COLOR_ERROR = cvar.COLOR_ERROR
COLOR_PREFIX = cvar.COLOR_PREFIX
COLOR_BINPREF = cvar.COLOR_BINPREF
COLOR_EXTRA = cvar.COLOR_EXTRA
COLOR_ALTOP = cvar.COLOR_ALTOP
COLOR_HIDNAME = cvar.COLOR_HIDNAME
COLOR_LIBNAME = cvar.COLOR_LIBNAME
COLOR_LOCNAME = cvar.COLOR_LOCNAME
COLOR_CODNAME = cvar.COLOR_CODNAME
COLOR_ASMDIR = cvar.COLOR_ASMDIR
COLOR_MACRO = cvar.COLOR_MACRO
COLOR_DSTR = cvar.COLOR_DSTR
COLOR_DCHAR = cvar.COLOR_DCHAR
COLOR_DNUM = cvar.COLOR_DNUM
COLOR_KEYWORD = cvar.COLOR_KEYWORD
COLOR_REG = cvar.COLOR_REG
COLOR_IMPNAME = cvar.COLOR_IMPNAME
COLOR_SEGNAME = cvar.COLOR_SEGNAME
COLOR_UNKNAME = cvar.COLOR_UNKNAME
COLOR_CNAME = cvar.COLOR_CNAME
COLOR_UNAME = cvar.COLOR_UNAME
COLOR_COLLAPSED = cvar.COLOR_COLLAPSED
COLOR_FG_MAX = cvar.COLOR_FG_MAX
COLOR_ADDR = cvar.COLOR_ADDR
COLOR_OPND1 = cvar.COLOR_OPND1
COLOR_OPND2 = cvar.COLOR_OPND2
COLOR_OPND3 = cvar.COLOR_OPND3
COLOR_OPND4 = cvar.COLOR_OPND4
COLOR_OPND5 = cvar.COLOR_OPND5
COLOR_OPND6 = cvar.COLOR_OPND6
COLOR_UTF8 = cvar.COLOR_UTF8
E_PREV = cvar.E_PREV
E_NEXT = cvar.E_NEXT
LDRF_RELOAD = _idaapi.LDRF_RELOAD
ACCEPT_FIRST = _idaapi.ACCEPT_FIRST
NEF_SEGS = _idaapi.NEF_SEGS
NEF_RSCS = _idaapi.NEF_RSCS
NEF_NAME = _idaapi.NEF_NAME
NEF_MAN = _idaapi.NEF_MAN
NEF_FILL = _idaapi.NEF_FILL
NEF_IMPS = _idaapi.NEF_IMPS
NEF_TIGHT = _idaapi.NEF_TIGHT
NEF_FIRST = _idaapi.NEF_FIRST
NEF_CODE = _idaapi.NEF_CODE
NEF_RELOAD = _idaapi.NEF_RELOAD
NEF_FLAT = _idaapi.NEF_FLAT
NEF_MINI = _idaapi.NEF_MINI
NEF_LOPT = _idaapi.NEF_LOPT
NEF_LALL = _idaapi.NEF_LALL


def load_binary_file(*args):
  """
    load_binary_file(char filename, linput_t li, ushort _neflags, int32 fileoff, 
        ea_t basepara, ea_t binoff, uint32 nbytes) -> bool
    """
  return _idaapi.load_binary_file(*args)

def gen_file(*args):
  """gen_file(ofile_type_t otype, FILE fp, ea_t ea1, ea_t ea2, int flags) -> int"""
  return _idaapi.gen_file(*args)
GENFLG_MAPSEG = _idaapi.GENFLG_MAPSEG
GENFLG_MAPNAME = _idaapi.GENFLG_MAPNAME
GENFLG_MAPDMNG = _idaapi.GENFLG_MAPDMNG
GENFLG_MAPLOC = _idaapi.GENFLG_MAPLOC
GENFLG_IDCTYPE = _idaapi.GENFLG_IDCTYPE
GENFLG_ASMTYPE = _idaapi.GENFLG_ASMTYPE
GENFLG_GENHTML = _idaapi.GENFLG_GENHTML
GENFLG_ASMINC = _idaapi.GENFLG_ASMINC

def file2base(*args):
  """file2base(linput_t li, int32 pos, ea_t ea1, ea_t ea2, int patchable) -> int"""
  return _idaapi.file2base(*args)
FILEREG_PATCHABLE = _idaapi.FILEREG_PATCHABLE
FILEREG_NOTPATCHABLE = _idaapi.FILEREG_NOTPATCHABLE

def base2file(*args):
  """base2file(FILE fp, int32 pos, ea_t ea1, ea_t ea2) -> int"""
  return _idaapi.base2file(*args)

def load_loader_module(*args):
  """load_loader_module(linput_t li, char lname, char fname, bool is_remote) -> int"""
  return _idaapi.load_loader_module(*args)

def get_basic_file_type(*args):
  """get_basic_file_type(linput_t li) -> filetype_t"""
  return _idaapi.get_basic_file_type(*args)

def get_file_type_name(*args):
  """get_file_type_name() -> size_t"""
  return _idaapi.get_file_type_name(*args)

def load_ids_module(*args):
  """load_ids_module(char fname) -> int"""
  return _idaapi.load_ids_module(*args)
class plugin_t(object):
    """Proxy of C++ plugin_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    version = _swig_property(_idaapi.plugin_t_version_get, _idaapi.plugin_t_version_set)
    flags = _swig_property(_idaapi.plugin_t_flags_get, _idaapi.plugin_t_flags_set)
    comment = _swig_property(_idaapi.plugin_t_comment_get, _idaapi.plugin_t_comment_set)
    help = _swig_property(_idaapi.plugin_t_help_get, _idaapi.plugin_t_help_set)
    wanted_name = _swig_property(_idaapi.plugin_t_wanted_name_get, _idaapi.plugin_t_wanted_name_set)
    wanted_hotkey = _swig_property(_idaapi.plugin_t_wanted_hotkey_get, _idaapi.plugin_t_wanted_hotkey_set)
    def __init__(self, *args): 
        """__init__(self) -> plugin_t"""
        this = _idaapi.new_plugin_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_plugin_t
    __del__ = lambda self : None;
plugin_t_swigregister = _idaapi.plugin_t_swigregister
plugin_t_swigregister(plugin_t)
OFILE_MAP = cvar.OFILE_MAP
OFILE_EXE = cvar.OFILE_EXE
OFILE_IDC = cvar.OFILE_IDC
OFILE_LST = cvar.OFILE_LST
OFILE_ASM = cvar.OFILE_ASM
OFILE_DIF = cvar.OFILE_DIF
PLUGIN_MOD = _idaapi.PLUGIN_MOD
PLUGIN_DRAW = _idaapi.PLUGIN_DRAW
PLUGIN_SEG = _idaapi.PLUGIN_SEG
PLUGIN_UNL = _idaapi.PLUGIN_UNL
PLUGIN_HIDE = _idaapi.PLUGIN_HIDE
PLUGIN_DBG = _idaapi.PLUGIN_DBG
PLUGIN_PROC = _idaapi.PLUGIN_PROC
PLUGIN_FIX = _idaapi.PLUGIN_FIX
PLUGIN_SKIP = _idaapi.PLUGIN_SKIP
PLUGIN_OK = _idaapi.PLUGIN_OK
PLUGIN_KEEP = _idaapi.PLUGIN_KEEP


def get_plugin_options(*args):
  """get_plugin_options(char plugin) -> char"""
  return _idaapi.get_plugin_options(*args)

def load_plugin(*args):
  """load_plugin(char name) -> plugin_t"""
  return _idaapi.load_plugin(*args)

def run_plugin(*args):
  """run_plugin(plugin_t ptr, int arg) -> bool"""
  return _idaapi.run_plugin(*args)

def load_and_run_plugin(*args):
  """load_and_run_plugin(char name, int arg) -> bool"""
  return _idaapi.load_and_run_plugin(*args)

def get_fileregion_offset(*args):
  """get_fileregion_offset(ea_t ea) -> int32"""
  return _idaapi.get_fileregion_offset(*args)

def get_fileregion_ea(*args):
  """get_fileregion_ea(int32 offset) -> ea_t"""
  return _idaapi.get_fileregion_ea(*args)

def gen_exe_file(*args):
  """gen_exe_file(FILE fp) -> int"""
  return _idaapi.gen_exe_file(*args)

def reload_file(*args):
  """reload_file(char file, bool is_remote) -> int"""
  return _idaapi.reload_file(*args)

def flush_buffers(*args):
  """flush_buffers() -> int"""
  return _idaapi.flush_buffers(*args)

def save_database(*args):
  """save_database(char outfile, bool delete_unpacked) -> bool"""
  return _idaapi.save_database(*args)

def mem2base(*args):
  """mem2base(char buf, ea_t ea, long fpos) -> int"""
  return _idaapi.mem2base(*args)
class graph_location_info_t(object):
    """Proxy of C++ graph_location_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    zoom = _swig_property(_idaapi.graph_location_info_t_zoom_get, _idaapi.graph_location_info_t_zoom_set)
    orgx = _swig_property(_idaapi.graph_location_info_t_orgx_get, _idaapi.graph_location_info_t_orgx_set)
    orgy = _swig_property(_idaapi.graph_location_info_t_orgy_get, _idaapi.graph_location_info_t_orgy_set)
    def __init__(self, *args): 
        """__init__(self) -> graph_location_info_t"""
        this = _idaapi.new_graph_location_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, graph_location_info_t r) -> bool"""
        return _idaapi.graph_location_info_t___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, graph_location_info_t r) -> bool"""
        return _idaapi.graph_location_info_t___ne__(self, *args)

    __swig_destroy__ = _idaapi.delete_graph_location_info_t
    __del__ = lambda self : None;
graph_location_info_t_swigregister = _idaapi.graph_location_info_t_swigregister
graph_location_info_t_swigregister(graph_location_info_t)

CURLOC_SISTACK_ITEMS = _idaapi.CURLOC_SISTACK_ITEMS
class curloc(object):
    """Proxy of C++ curloc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ea = _swig_property(_idaapi.curloc_ea_get, _idaapi.curloc_ea_set)
    x = _swig_property(_idaapi.curloc_x_get, _idaapi.curloc_x_set)
    y = _swig_property(_idaapi.curloc_y_get, _idaapi.curloc_y_set)
    lnnum = _swig_property(_idaapi.curloc_lnnum_get, _idaapi.curloc_lnnum_set)
    flags = _swig_property(_idaapi.curloc_flags_get, _idaapi.curloc_flags_set)
    target = _swig_property(_idaapi.curloc_target_get, _idaapi.curloc_target_set)
    def __init__(self, *args): 
        """
        __init__(self) -> curloc
        __init__(self, char stackName) -> curloc
        """
        this = _idaapi.new_curloc(*args)
        try: self.this.append(this)
        except: self.this = this
    def linkTo(self, *args):
        """linkTo(self, char stackName)"""
        return _idaapi.curloc_linkTo(self, *args)

    def setx(self, *args):
        """setx(self, int xx)"""
        return _idaapi.curloc_setx(self, *args)

    def jump_push(self, *args):
        """
        jump_push(self, bool try_to_unhide, ea_t ea = ea_t(-1), int lnnum = 0, 
            int x = 0, int y = 0)
        """
        return _idaapi.curloc_jump_push(self, *args)

    def pop(self, *args):
        """pop(self, bool try_tohide) -> bool"""
        return _idaapi.curloc_pop(self, *args)

    def get(self, *args):
        """get(self, size_t depth) -> bool"""
        return _idaapi.curloc_get(self, *args)

    def size(self, *args):
        """size(self) -> size_t"""
        return _idaapi.curloc_size(self, *args)

    def copy_current_location(self, *args):
        """copy_current_location(self, curloc loc)"""
        return _idaapi.curloc_copy_current_location(self, *args)

    def mark(self, *args):
        """mark(self, int marker, char title, char desc) -> int"""
        return _idaapi.curloc_mark(self, *args)

    def markedpos(self, *args):
        """markedpos(self, int marker) -> ea_t"""
        return _idaapi.curloc_markedpos(self, *args)

    def jump(self, *args):
        """jump(self, int marker) -> bool"""
        return _idaapi.curloc_jump(self, *args)

    def markdesc(self, *args):
        """markdesc(self, int marker) -> ssize_t"""
        return _idaapi.curloc_markdesc(self, *args)

    __swig_destroy__ = _idaapi.delete_curloc
    __del__ = lambda self : None;
curloc_swigregister = _idaapi.curloc_swigregister
curloc_swigregister(curloc)
DEFAULT_LNNUM = _idaapi.DEFAULT_LNNUM
UNHID_SEGM = _idaapi.UNHID_SEGM
UNHID_FUNC = _idaapi.UNHID_FUNC
UNHID_AREA = _idaapi.UNHID_AREA

MAX_MARK_SLOT = _idaapi.MAX_MARK_SLOT
class location_t(curloc):
    """Proxy of C++ location_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    gli = _swig_property(_idaapi.location_t_gli_get, _idaapi.location_t_gli_set)
    def __init__(self, *args): 
        """
        __init__(self) -> location_t
        __init__(self, char name) -> location_t
        """
        this = _idaapi.new_location_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def linkTo(self, *args):
        """linkTo(self, char name)"""
        return _idaapi.location_t_linkTo(self, *args)

    def push_and_jump(self, *args):
        """
        push_and_jump(self, bool try_to_unhide, ea_t ea = ea_t(-1), int lnnum = 0, 
            int x = 0, int y = 0, graph_location_info_t gli = None)
        """
        return _idaapi.location_t_push_and_jump(self, *args)

    def pop(self, *args):
        """pop(self, bool try_tohide) -> bool"""
        return _idaapi.location_t_pop(self, *args)

    def get(self, *args):
        """get(self, size_t depth) -> bool"""
        return _idaapi.location_t_get(self, *args)

    def copy_current_location(self, *args):
        """copy_current_location(self, location_t loc)"""
        return _idaapi.location_t_copy_current_location(self, *args)

    def mark(self, *args):
        """mark(self, int marker, char title, char desc) -> int"""
        return _idaapi.location_t_mark(self, *args)

    def jump(self, *args):
        """jump(self, int marker) -> bool"""
        return _idaapi.location_t_jump(self, *args)

    __swig_destroy__ = _idaapi.delete_location_t
    __del__ = lambda self : None;
location_t_swigregister = _idaapi.location_t_swigregister
location_t_swigregister(location_t)

MAXNAMELEN = _idaapi.MAXNAMELEN
FUNC_IMPORT_PREFIX = _idaapi.FUNC_IMPORT_PREFIX
SN_CHECK = _idaapi.SN_CHECK
SN_NOCHECK = _idaapi.SN_NOCHECK
SN_PUBLIC = _idaapi.SN_PUBLIC
SN_NON_PUBLIC = _idaapi.SN_NON_PUBLIC
SN_WEAK = _idaapi.SN_WEAK
SN_NON_WEAK = _idaapi.SN_NON_WEAK
SN_AUTO = _idaapi.SN_AUTO
SN_NON_AUTO = _idaapi.SN_NON_AUTO
SN_NOLIST = _idaapi.SN_NOLIST
SN_NOWARN = _idaapi.SN_NOWARN
SN_LOCAL = _idaapi.SN_LOCAL

def del_global_name(*args):
  """del_global_name(ea_t ea) -> bool"""
  return _idaapi.del_global_name(*args)

def del_local_name(*args):
  """del_local_name(ea_t ea) -> bool"""
  return _idaapi.del_local_name(*args)

def set_dummy_name(*args):
  """set_dummy_name(ea_t frm, ea_t ea) -> bool"""
  return _idaapi.set_dummy_name(*args)

def make_name_auto(*args):
  """make_name_auto(ea_t ea) -> bool"""
  return _idaapi.make_name_auto(*args)

def make_name_user(*args):
  """make_name_user(ea_t ea) -> bool"""
  return _idaapi.make_name_user(*args)

def do_name_anyway(*args):
  """do_name_anyway(ea_t ea, char name, size_t maxlen = 0) -> bool"""
  return _idaapi.do_name_anyway(*args)

def validate_name(*args):
  """validate_name(char name) -> char"""
  return _idaapi.validate_name(*args)

def is_ident_char(*args):
  """is_ident_char(char c) -> bool"""
  return _idaapi.is_ident_char(*args)

def is_visible_char(*args):
  """is_visible_char(char c) -> bool"""
  return _idaapi.is_visible_char(*args)

def make_visible_name(*args):
  """make_visible_name(char srcname, size_t dstsize) -> char"""
  return _idaapi.make_visible_name(*args)

def isident(*args):
  """isident(char name) -> bool"""
  return _idaapi.isident(*args)

def is_uname(*args):
  """is_uname(char name) -> bool"""
  return _idaapi.is_uname(*args)

def is_valid_typename(*args):
  """is_valid_typename(char name) -> bool"""
  return _idaapi.is_valid_typename(*args)

def extract_name(*args):
  """extract_name(char line, int x) -> char"""
  return _idaapi.extract_name(*args)

def hide_name(*args):
  """hide_name(ea_t ea)"""
  return _idaapi.hide_name(*args)

def show_name(*args):
  """show_name(ea_t ea)"""
  return _idaapi.show_name(*args)

def get_name_ea(*args):
  """get_name_ea(ea_t frm, char name) -> ea_t"""
  return _idaapi.get_name_ea(*args)

def get_name_base_ea(*args):
  """get_name_base_ea(ea_t frm, ea_t to) -> ea_t"""
  return _idaapi.get_name_base_ea(*args)
NT_NONE = _idaapi.NT_NONE
NT_BYTE = _idaapi.NT_BYTE
NT_LOCAL = _idaapi.NT_LOCAL
NT_STKVAR = _idaapi.NT_STKVAR
NT_ENUM = _idaapi.NT_ENUM
NT_ABS = _idaapi.NT_ABS
NT_SEG = _idaapi.NT_SEG
NT_STROFF = _idaapi.NT_STROFF
NT_BMASK = _idaapi.NT_BMASK

def get_name_value(*args):
  """get_name_value(ea_t frm, char name) -> int"""
  return _idaapi.get_name_value(*args)

def get_true_name(*args):
  """get_true_name(ea_t frm, ea_t ea) -> char"""
  return _idaapi.get_true_name(*args)

def get_name(*args):
  """get_name(ea_t frm, ea_t ea) -> char"""
  return _idaapi.get_name(*args)

def get_colored_name(*args):
  """get_colored_name(ea_t frm, ea_t ea) -> char"""
  return _idaapi.get_colored_name(*args)

def get_name_color(*args):
  """get_name_color(ea_t frm, ea_t ea) -> color_t"""
  return _idaapi.get_name_color(*args)

def get_demangled_name(*args):
  """get_demangled_name(ea_t frm, ea_t ea, int32 inhibitor, int demform, bool strict) -> char"""
  return _idaapi.get_demangled_name(*args)

def get_colored_demangled_name(*args):
  """get_colored_demangled_name(ea_t frm, ea_t ea, int32 inhibitor, int demform, bool strict) -> char"""
  return _idaapi.get_colored_demangled_name(*args)
GETN_APPZERO = _idaapi.GETN_APPZERO
GETN_NOFIXUP = _idaapi.GETN_NOFIXUP
GETN_NODUMMY = _idaapi.GETN_NODUMMY

def get_name_expr(*args):
  """get_name_expr(ea_t frm, int n, ea_t ea, adiff_t off, int flags = 0x0001) -> ssize_t"""
  return _idaapi.get_name_expr(*args)
GNCN_NOSEG = _idaapi.GNCN_NOSEG
GNCN_NOCOLOR = _idaapi.GNCN_NOCOLOR
GNCN_NOLABEL = _idaapi.GNCN_NOLABEL
GNCN_NOFUNC = _idaapi.GNCN_NOFUNC
GNCN_SEG_FUNC = _idaapi.GNCN_SEG_FUNC
GNCN_SEGNUM = _idaapi.GNCN_SEGNUM
GNCN_REQFUNC = _idaapi.GNCN_REQFUNC
GNCN_REQNAME = _idaapi.GNCN_REQNAME

def get_nice_colored_name(*args):
  """get_nice_colored_name(ea_t ea, int flags = 0) -> ssize_t"""
  return _idaapi.get_nice_colored_name(*args)

def is_public_name(*args):
  """is_public_name(ea_t ea) -> bool"""
  return _idaapi.is_public_name(*args)

def make_name_public(*args):
  """make_name_public(ea_t ea)"""
  return _idaapi.make_name_public(*args)

def make_name_non_public(*args):
  """make_name_non_public(ea_t ea)"""
  return _idaapi.make_name_non_public(*args)

def gen_name_decl(*args):
  """gen_name_decl(ea_t ea, char name) -> int"""
  return _idaapi.gen_name_decl(*args)

def is_weak_name(*args):
  """is_weak_name(ea_t ea) -> bool"""
  return _idaapi.is_weak_name(*args)

def make_name_weak(*args):
  """make_name_weak(ea_t ea)"""
  return _idaapi.make_name_weak(*args)

def make_name_non_weak(*args):
  """make_name_non_weak(ea_t ea)"""
  return _idaapi.make_name_non_weak(*args)

def get_nlist_size(*args):
  """get_nlist_size() -> size_t"""
  return _idaapi.get_nlist_size(*args)

def get_nlist_idx(*args):
  """get_nlist_idx(ea_t ea) -> size_t"""
  return _idaapi.get_nlist_idx(*args)

def is_in_nlist(*args):
  """is_in_nlist(ea_t ea) -> bool"""
  return _idaapi.is_in_nlist(*args)

def get_nlist_ea(*args):
  """get_nlist_ea(size_t idx) -> ea_t"""
  return _idaapi.get_nlist_ea(*args)

def get_nlist_name(*args):
  """get_nlist_name(size_t idx) -> char"""
  return _idaapi.get_nlist_name(*args)

def rebuild_nlist(*args):
  """rebuild_nlist()"""
  return _idaapi.rebuild_nlist(*args)

def reorder_dummy_names(*args):
  """reorder_dummy_names()"""
  return _idaapi.reorder_dummy_names(*args)
DEBNAME_EXACT = _idaapi.DEBNAME_EXACT
DEBNAME_LOWER = _idaapi.DEBNAME_LOWER
DEBNAME_UPPER = _idaapi.DEBNAME_UPPER
class ea_name_t(object):
    """Proxy of C++ ea_name_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ea = _swig_property(_idaapi.ea_name_t_ea_get, _idaapi.ea_name_t_ea_set)
    name = _swig_property(_idaapi.ea_name_t_name_get, _idaapi.ea_name_t_name_set)
    def __init__(self, *args): 
        """__init__(self, ea_t _ea, qstring _name) -> ea_name_t"""
        this = _idaapi.new_ea_name_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_ea_name_t
    __del__ = lambda self : None;
ea_name_t_swigregister = _idaapi.ea_name_t_swigregister
ea_name_t_swigregister(ea_name_t)

def set_name(*args):
  """
    set_name(ea_t ea, char name, int flag) -> bool
    set_name(ea_t ea, char name) -> bool
    """
  return _idaapi.set_name(*args)


def set_debug_name(*args):
  """set_debug_name(ea_t ea, char name) -> bool"""
  return _idaapi.set_debug_name(*args)

def del_debug_names(*args):
  """del_debug_names(ea_t ea1, ea_t ea2)"""
  return _idaapi.del_debug_names(*args)

def get_debug_name_ea(*args):
  """get_debug_name_ea(char name) -> ea_t"""
  return _idaapi.get_debug_name_ea(*args)

def get_debug_names(*args):
  """get_debug_names(ea_t ea1, ea_t ea2, ea_name_vec_t names)"""
  return _idaapi.get_debug_names(*args)

def is_name_defined_locally(*args):
  """
    is_name_defined_locally(func_t pfn, char name, ignore_name_def_t ignore, ea_t ea1 = ea_t(-1), 
        ea_t ea2 = ea_t(-1)) -> bool
    """
  return _idaapi.is_name_defined_locally(*args)

def demangle_name(*args):
  """demangle_name(char name, uint32 disable_mask) -> int32"""
  return _idaapi.demangle_name(*args)

def set_offset(*args):
  """set_offset(ea_t ea, int n, ea_t base) -> bool"""
  return _idaapi.set_offset(*args)

def op_offset_ex(*args):
  """op_offset_ex(ea_t ea, int n, refinfo_t ri) -> int"""
  return _idaapi.op_offset_ex(*args)

def op_offset(*args):
  """
    op_offset(ea_t ea, int n, reftype_t type, ea_t target = ea_t(-1), 
        ea_t base = 0, adiff_t tdelta = 0) -> int
    """
  return _idaapi.op_offset(*args)

def get_offbase(*args):
  """get_offbase(ea_t ea, int n) -> ea_t"""
  return _idaapi.get_offbase(*args)

def get_offset_expression(*args):
  """get_offset_expression(ea_t ea, int n, ea_t frm, adiff_t offset, int getn_flags = 0) -> int"""
  return _idaapi.get_offset_expression(*args)

def get_offset_expr(*args):
  """
    get_offset_expr(ea_t ea, int n, refinfo_t ri, ea_t frm, adiff_t offset, 
        int getn_flags = 0) -> int
    """
  return _idaapi.get_offset_expr(*args)

def can_be_off32(*args):
  """can_be_off32(ea_t ea) -> ea_t"""
  return _idaapi.can_be_off32(*args)

def calc_probable_base_by_value(*args):
  """calc_probable_base_by_value(ea_t ea, uval_t off) -> ea_t"""
  return _idaapi.calc_probable_base_by_value(*args)

def get_default_reftype(*args):
  """get_default_reftype(ea_t ea) -> reftype_t"""
  return _idaapi.get_default_reftype(*args)

def calc_reference_target(*args):
  """calc_reference_target(ea_t frm, refinfo_t ri, adiff_t opval) -> ea_t"""
  return _idaapi.calc_reference_target(*args)

def calc_reference_basevalue(*args):
  """calc_reference_basevalue(ea_t frm, refinfo_t ri, adiff_t opval, ea_t target) -> ea_t"""
  return _idaapi.calc_reference_basevalue(*args)

def calc_target(*args):
  """calc_target(ea_t frm, ea_t ea, int n, adiff_t opval) -> ea_t"""
  return _idaapi.calc_target(*args)

def QueueMark(*args):
  """QueueMark(qtype_t type, ea_t ea)"""
  return _idaapi.QueueMark(*args)

def QueueGetType(*args):
  """QueueGetType(qtype_t type, ea_t lowea) -> ea_t"""
  return _idaapi.QueueGetType(*args)

def get_long_queue_name(*args):
  """get_long_queue_name(qtype_t type) -> char"""
  return _idaapi.get_long_queue_name(*args)

def get_short_queue_name(*args):
  """get_short_queue_name(qtype_t type) -> char"""
  return _idaapi.get_short_queue_name(*args)

def QueueIsPresent(*args):
  """QueueIsPresent(qtype_t t, ea_t ea) -> bool"""
  return _idaapi.QueueIsPresent(*args)

def was_ida_decision(*args):
  """was_ida_decision(ea_t ea) -> bool"""
  return _idaapi.was_ida_decision(*args)
SEARCH_UP = _idaapi.SEARCH_UP
SEARCH_DOWN = _idaapi.SEARCH_DOWN
SEARCH_NEXT = _idaapi.SEARCH_NEXT
SEARCH_CASE = _idaapi.SEARCH_CASE
SEARCH_REGEX = _idaapi.SEARCH_REGEX
SEARCH_NOBRK = _idaapi.SEARCH_NOBRK
SEARCH_NOSHOW = _idaapi.SEARCH_NOSHOW
SEARCH_UNICODE = _idaapi.SEARCH_UNICODE
SEARCH_IDENT = _idaapi.SEARCH_IDENT
SEARCH_BRK = _idaapi.SEARCH_BRK

def search_down(*args):
  """search_down(int sflag) -> bool"""
  return _idaapi.search_down(*args)

def find_error(*args):
  """find_error(ea_t ea, int sflag) -> ea_t"""
  return _idaapi.find_error(*args)

def find_notype(*args):
  """find_notype(ea_t ea, int sflag) -> ea_t"""
  return _idaapi.find_notype(*args)

def find_unknown(*args):
  """find_unknown(ea_t ea, int sflag) -> ea_t"""
  return _idaapi.find_unknown(*args)

def find_defined(*args):
  """find_defined(ea_t ea, int sflag) -> ea_t"""
  return _idaapi.find_defined(*args)

def find_void(*args):
  """find_void(ea_t ea, int sflag) -> ea_t"""
  return _idaapi.find_void(*args)

def find_data(*args):
  """find_data(ea_t ea, int sflag) -> ea_t"""
  return _idaapi.find_data(*args)

def find_code(*args):
  """find_code(ea_t ea, int sflag) -> ea_t"""
  return _idaapi.find_code(*args)

def find_not_func(*args):
  """find_not_func(ea_t ea, int sflag) -> ea_t"""
  return _idaapi.find_not_func(*args)

def find_imm(*args):
  """find_imm(ea_t newEA, int sflag, sval_t srchValue) -> ea_t"""
  return _idaapi.find_imm(*args)

def find_binary(*args):
  """
    find_binary(ea_t startea, ea_t endea, char ubinstr, int radix, 
        int sflag) -> ea_t
    """
  return _idaapi.find_binary(*args)

def find_text(*args):
  """find_text(ea_t startEA, int y, int x, char ustr, int sflag) -> ea_t"""
  return _idaapi.find_text(*args)
SREG_NUM = _idaapi.SREG_NUM
class segment_t(area_t):
    """Proxy of C++ segment_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> segment_t"""
        this = _idaapi.new_segment_t(*args)
        try: self.this.append(this)
        except: self.this = this
    name = _swig_property(_idaapi.segment_t_name_get, _idaapi.segment_t_name_set)
    sclass = _swig_property(_idaapi.segment_t_sclass_get, _idaapi.segment_t_sclass_set)
    orgbase = _swig_property(_idaapi.segment_t_orgbase_get, _idaapi.segment_t_orgbase_set)
    align = _swig_property(_idaapi.segment_t_align_get, _idaapi.segment_t_align_set)
    comb = _swig_property(_idaapi.segment_t_comb_get, _idaapi.segment_t_comb_set)
    perm = _swig_property(_idaapi.segment_t_perm_get, _idaapi.segment_t_perm_set)
    bitness = _swig_property(_idaapi.segment_t_bitness_get, _idaapi.segment_t_bitness_set)
    def use32(self, *args):
        """use32(self) -> bool"""
        return _idaapi.segment_t_use32(self, *args)

    def use64(self, *args):
        """use64(self) -> bool"""
        return _idaapi.segment_t_use64(self, *args)

    def abits(self, *args):
        """abits(self) -> int"""
        return _idaapi.segment_t_abits(self, *args)

    def abytes(self, *args):
        """abytes(self) -> int"""
        return _idaapi.segment_t_abytes(self, *args)

    flags = _swig_property(_idaapi.segment_t_flags_get, _idaapi.segment_t_flags_set)
    def comorg(self, *args):
        """comorg(self) -> bool"""
        return _idaapi.segment_t_comorg(self, *args)

    def set_comorg(self, *args):
        """set_comorg(self)"""
        return _idaapi.segment_t_set_comorg(self, *args)

    def clr_comorg(self, *args):
        """clr_comorg(self)"""
        return _idaapi.segment_t_clr_comorg(self, *args)

    def ob_ok(self, *args):
        """ob_ok(self) -> bool"""
        return _idaapi.segment_t_ob_ok(self, *args)

    def set_ob_ok(self, *args):
        """set_ob_ok(self)"""
        return _idaapi.segment_t_set_ob_ok(self, *args)

    def clr_ob_ok(self, *args):
        """clr_ob_ok(self)"""
        return _idaapi.segment_t_clr_ob_ok(self, *args)

    def is_visible_segm(self, *args):
        """is_visible_segm(self) -> bool"""
        return _idaapi.segment_t_is_visible_segm(self, *args)

    def set_visible_segm(self, *args):
        """set_visible_segm(self, bool visible)"""
        return _idaapi.segment_t_set_visible_segm(self, *args)

    def set_debugger_segm(self, *args):
        """set_debugger_segm(self, bool debseg)"""
        return _idaapi.segment_t_set_debugger_segm(self, *args)

    def is_loader_segm(self, *args):
        """is_loader_segm(self) -> bool"""
        return _idaapi.segment_t_is_loader_segm(self, *args)

    def set_loader_segm(self, *args):
        """set_loader_segm(self, bool ldrseg)"""
        return _idaapi.segment_t_set_loader_segm(self, *args)

    def is_hidden_segtype(self, *args):
        """is_hidden_segtype(self) -> bool"""
        return _idaapi.segment_t_is_hidden_segtype(self, *args)

    def set_hidden_segtype(self, *args):
        """set_hidden_segtype(self, bool hide)"""
        return _idaapi.segment_t_set_hidden_segtype(self, *args)

    sel = _swig_property(_idaapi.segment_t_sel_get, _idaapi.segment_t_sel_set)
    defsr = _swig_property(_idaapi.segment_t_defsr_get, _idaapi.segment_t_defsr_set)
    type = _swig_property(_idaapi.segment_t_type_get, _idaapi.segment_t_type_set)
    color = _swig_property(_idaapi.segment_t_color_get, _idaapi.segment_t_color_set)
    def update(self, *args):
        """update(self) -> int"""
        return _idaapi.segment_t_update(self, *args)

    __swig_destroy__ = _idaapi.delete_segment_t
    __del__ = lambda self : None;
segment_t_swigregister = _idaapi.segment_t_swigregister
segment_t_swigregister(segment_t)
ignore_none = cvar.ignore_none
ignore_regvar = cvar.ignore_regvar
ignore_llabel = cvar.ignore_llabel
ignore_stkvar = cvar.ignore_stkvar
ignore_glabel = cvar.ignore_glabel
Q_noBase = cvar.Q_noBase
Q_noName = cvar.Q_noName
Q_noFop = cvar.Q_noFop
Q_noComm = cvar.Q_noComm
Q_noRef = cvar.Q_noRef
Q_jumps = cvar.Q_jumps
Q_disasm = cvar.Q_disasm
Q_head = cvar.Q_head
Q_noValid = cvar.Q_noValid
Q_lines = cvar.Q_lines
Q_badstack = cvar.Q_badstack
Q_att = cvar.Q_att
Q_final = cvar.Q_final
Q_rolled = cvar.Q_rolled
Q_collsn = cvar.Q_collsn
Q_Qnum = cvar.Q_Qnum
saAbs = _idaapi.saAbs
saRelByte = _idaapi.saRelByte
saRelWord = _idaapi.saRelWord
saRelPara = _idaapi.saRelPara
saRelPage = _idaapi.saRelPage
saRelDble = _idaapi.saRelDble
saRel4K = _idaapi.saRel4K
saGroup = _idaapi.saGroup
saRel32Bytes = _idaapi.saRel32Bytes
saRel64Bytes = _idaapi.saRel64Bytes
saRelQword = _idaapi.saRelQword
saRel128Bytes = _idaapi.saRel128Bytes
saRel512Bytes = _idaapi.saRel512Bytes
saRel1024Bytes = _idaapi.saRel1024Bytes
saRel2048Bytes = _idaapi.saRel2048Bytes
scPriv = _idaapi.scPriv
scGroup = _idaapi.scGroup
scPub = _idaapi.scPub
scPub2 = _idaapi.scPub2
scStack = _idaapi.scStack
scCommon = _idaapi.scCommon
scPub3 = _idaapi.scPub3
SEGPERM_EXEC = _idaapi.SEGPERM_EXEC
SEGPERM_WRITE = _idaapi.SEGPERM_WRITE
SEGPERM_READ = _idaapi.SEGPERM_READ
SFL_COMORG = _idaapi.SFL_COMORG
SFL_OBOK = _idaapi.SFL_OBOK
SFL_HIDDEN = _idaapi.SFL_HIDDEN
SFL_DEBUG = _idaapi.SFL_DEBUG
SFL_LOADER = _idaapi.SFL_LOADER
SFL_HIDETYPE = _idaapi.SFL_HIDETYPE
SEG_NORM = _idaapi.SEG_NORM
SEG_XTRN = _idaapi.SEG_XTRN
SEG_CODE = _idaapi.SEG_CODE
SEG_DATA = _idaapi.SEG_DATA
SEG_IMP = _idaapi.SEG_IMP
SEG_GRP = _idaapi.SEG_GRP
SEG_NULL = _idaapi.SEG_NULL
SEG_UNDF = _idaapi.SEG_UNDF
SEG_BSS = _idaapi.SEG_BSS
SEG_ABSSYM = _idaapi.SEG_ABSSYM
SEG_COMM = _idaapi.SEG_COMM
SEG_IMEM = _idaapi.SEG_IMEM


def is_visible_segm(*args):
  """is_visible_segm(segment_t s) -> bool"""
  return _idaapi.is_visible_segm(*args)

def is_finally_visible_segm(*args):
  """is_finally_visible_segm(segment_t s) -> bool"""
  return _idaapi.is_finally_visible_segm(*args)

def set_visible_segm(*args):
  """set_visible_segm(segment_t s, bool visible)"""
  return _idaapi.set_visible_segm(*args)

def is_spec_segm(*args):
  """is_spec_segm(uchar seg_type) -> bool"""
  return _idaapi.is_spec_segm(*args)

def is_spec_ea(*args):
  """is_spec_ea(ea_t ea) -> bool"""
  return _idaapi.is_spec_ea(*args)

def getn_selector(*args):
  """getn_selector(int n, sel_t sel, ea_t base) -> bool"""
  return _idaapi.getn_selector(*args)

def get_selector_qty(*args):
  """get_selector_qty() -> int"""
  return _idaapi.get_selector_qty(*args)

def setup_selector(*args):
  """setup_selector(ea_t segbase) -> sel_t"""
  return _idaapi.setup_selector(*args)

def allocate_selector(*args):
  """allocate_selector(ea_t segbase) -> sel_t"""
  return _idaapi.allocate_selector(*args)

def find_free_selector(*args):
  """find_free_selector() -> sel_t"""
  return _idaapi.find_free_selector(*args)

def set_selector(*args):
  """set_selector(sel_t selector, ea_t paragraph) -> int"""
  return _idaapi.set_selector(*args)

def del_selector(*args):
  """del_selector(sel_t selector)"""
  return _idaapi.del_selector(*args)

def ask_selector(*args):
  """ask_selector(sel_t selector) -> ea_t"""
  return _idaapi.ask_selector(*args)

def sel2ea(*args):
  """sel2ea(sel_t selector) -> ea_t"""
  return _idaapi.sel2ea(*args)

def find_selector(*args):
  """find_selector(ea_t base) -> sel_t"""
  return _idaapi.find_selector(*args)

def get_segm_by_sel(*args):
  """get_segm_by_sel(sel_t selector) -> segment_t"""
  return _idaapi.get_segm_by_sel(*args)

def add_segm_ex(*args):
  """add_segm_ex(segment_t s, char name, char sclass, int flags) -> int"""
  return _idaapi.add_segm_ex(*args)
ADDSEG_NOSREG = _idaapi.ADDSEG_NOSREG
ADDSEG_OR_DIE = _idaapi.ADDSEG_OR_DIE
ADDSEG_NOTRUNC = _idaapi.ADDSEG_NOTRUNC
ADDSEG_QUIET = _idaapi.ADDSEG_QUIET
ADDSEG_FILLGAP = _idaapi.ADDSEG_FILLGAP
ADDSEG_SPARSE = _idaapi.ADDSEG_SPARSE

def add_segm(*args):
  """add_segm(ea_t para, ea_t start, ea_t end, char name, char sclass) -> int"""
  return _idaapi.add_segm(*args)

def del_segm(*args):
  """del_segm(ea_t ea, int flags) -> int"""
  return _idaapi.del_segm(*args)
SEGMOD_KILL = _idaapi.SEGMOD_KILL
SEGMOD_KEEP = _idaapi.SEGMOD_KEEP
SEGMOD_SILENT = _idaapi.SEGMOD_SILENT
SEGMOD_KEEP0 = _idaapi.SEGMOD_KEEP0

def get_segm_qty(*args):
  """get_segm_qty() -> int"""
  return _idaapi.get_segm_qty(*args)

def getseg(*args):
  """getseg(ea_t ea) -> segment_t"""
  return _idaapi.getseg(*args)

def getnseg(*args):
  """getnseg(int n) -> segment_t"""
  return _idaapi.getnseg(*args)

def get_next_seg(*args):
  """get_next_seg(ea_t ea) -> segment_t"""
  return _idaapi.get_next_seg(*args)

def get_prev_seg(*args):
  """get_prev_seg(ea_t ea) -> segment_t"""
  return _idaapi.get_prev_seg(*args)

def get_first_seg(*args):
  """get_first_seg() -> segment_t"""
  return _idaapi.get_first_seg(*args)

def get_last_seg(*args):
  """get_last_seg() -> segment_t"""
  return _idaapi.get_last_seg(*args)

def get_segm_by_name(*args):
  """get_segm_by_name(char name) -> segment_t"""
  return _idaapi.get_segm_by_name(*args)

def set_segm_end(*args):
  """set_segm_end(ea_t ea, ea_t newend, int flags) -> int"""
  return _idaapi.set_segm_end(*args)

def set_segm_start(*args):
  """set_segm_start(ea_t ea, ea_t newstart, int flags) -> int"""
  return _idaapi.set_segm_start(*args)

def move_segm_start(*args):
  """move_segm_start(ea_t ea, ea_t newstart, int mode) -> int"""
  return _idaapi.move_segm_start(*args)
MSF_SILENT = _idaapi.MSF_SILENT
MSF_NOFIX = _idaapi.MSF_NOFIX
MSF_LDKEEP = _idaapi.MSF_LDKEEP
MSF_FIXONCE = _idaapi.MSF_FIXONCE

def move_segm(*args):
  """move_segm(segment_t s, ea_t to, int flags = 0) -> int"""
  return _idaapi.move_segm(*args)
MOVE_SEGM_OK = _idaapi.MOVE_SEGM_OK
MOVE_SEGM_PARAM = _idaapi.MOVE_SEGM_PARAM
MOVE_SEGM_ROOM = _idaapi.MOVE_SEGM_ROOM
MOVE_SEGM_IDP = _idaapi.MOVE_SEGM_IDP
MOVE_SEGM_CHUNK = _idaapi.MOVE_SEGM_CHUNK
MOVE_SEGM_LOADER = _idaapi.MOVE_SEGM_LOADER
MOVE_SEGM_ODD = _idaapi.MOVE_SEGM_ODD

def rebase_program(*args):
  """rebase_program(adiff_t delta, int flags) -> int"""
  return _idaapi.rebase_program(*args)
CSS_OK = _idaapi.CSS_OK
CSS_NODBG = _idaapi.CSS_NODBG
CSS_NOAREA = _idaapi.CSS_NOAREA
CSS_NOMEM = _idaapi.CSS_NOMEM

def change_segment_status(*args):
  """change_segment_status(segment_t s, bool is_deb_segm) -> int"""
  return _idaapi.change_segment_status(*args)

def take_memory_snapshot(*args):
  """take_memory_snapshot(bool only_loader_segs) -> bool"""
  return _idaapi.take_memory_snapshot(*args)

def is_miniidb(*args):
  """is_miniidb() -> bool"""
  return _idaapi.is_miniidb(*args)

def set_segm_base(*args):
  """set_segm_base(segment_t s, ea_t newbase) -> bool"""
  return _idaapi.set_segm_base(*args)

def set_group_selector(*args):
  """set_group_selector(sel_t grp, sel_t sel) -> int"""
  return _idaapi.set_group_selector(*args)
MAX_GROUPS = _idaapi.MAX_GROUPS

def get_group_selector(*args):
  """get_group_selector(sel_t grpsel) -> sel_t"""
  return _idaapi.get_group_selector(*args)

def add_segment_translation(*args):
  """add_segment_translation(ea_t segstart, ea_t mappedseg) -> bool"""
  return _idaapi.add_segment_translation(*args)
MAX_SEGM_TRANSLATIONS = _idaapi.MAX_SEGM_TRANSLATIONS

def set_segment_translations(*args):
  """set_segment_translations(ea_t segstart, ea_t transmap) -> bool"""
  return _idaapi.set_segment_translations(*args)

def del_segment_translations(*args):
  """del_segment_translations(ea_t ea) -> bool"""
  return _idaapi.del_segment_translations(*args)

def get_segment_translations(*args):
  """get_segment_translations(ea_t segstart, ea_t buf, int bufsize) -> ea_t"""
  return _idaapi.get_segment_translations(*args)

def get_segment_cmt(*args):
  """get_segment_cmt(segment_t s, bool repeatable) -> char"""
  return _idaapi.get_segment_cmt(*args)

def set_segment_cmt(*args):
  """set_segment_cmt(segment_t s, char cmt, bool repeatable)"""
  return _idaapi.set_segment_cmt(*args)

def del_segment_cmt(*args):
  """del_segment_cmt(segment_t s, bool repeatable)"""
  return _idaapi.del_segment_cmt(*args)

def std_gen_segm_footer(*args):
  """std_gen_segm_footer(ea_t ea)"""
  return _idaapi.std_gen_segm_footer(*args)

def set_segm_name(*args):
  """set_segm_name(segment_t s, char name, v(...) *args) -> int"""
  return _idaapi.set_segm_name(*args)

def get_true_segm_name(*args):
  """get_true_segm_name(segment_t s) -> ssize_t"""
  return _idaapi.get_true_segm_name(*args)

def get_segm_class(*args):
  """get_segm_class(segment_t s) -> ssize_t"""
  return _idaapi.get_segm_class(*args)

def set_segm_class(*args):
  """set_segm_class(segment_t s, char sclass) -> int"""
  return _idaapi.set_segm_class(*args)

def segtype(*args):
  """segtype(ea_t ea) -> uchar"""
  return _idaapi.segtype(*args)

def get_segment_alignment(*args):
  """get_segment_alignment(uchar align) -> char"""
  return _idaapi.get_segment_alignment(*args)

def get_segment_combination(*args):
  """get_segment_combination(uchar comb) -> char"""
  return _idaapi.get_segment_combination(*args)

def get_segm_para(*args):
  """get_segm_para(segment_t s) -> ea_t"""
  return _idaapi.get_segm_para(*args)

def get_segm_base(*args):
  """get_segm_base(segment_t s) -> ea_t"""
  return _idaapi.get_segm_base(*args)

def set_segm_addressing(*args):
  """set_segm_addressing(segment_t s, size_t bitness) -> bool"""
  return _idaapi.set_segm_addressing(*args)

def segm_adjust_diff(*args):
  """segm_adjust_diff(segment_t s, adiff_t delta) -> adiff_t"""
  return _idaapi.segm_adjust_diff(*args)

def segm_adjust_ea(*args):
  """segm_adjust_ea(segment_t s, ea_t ea) -> ea_t"""
  return _idaapi.segm_adjust_ea(*args)
SEGDEL_PERM = _idaapi.SEGDEL_PERM
SEGDEL_KEEP = _idaapi.SEGDEL_KEEP
SEGDEL_SILENT = _idaapi.SEGDEL_SILENT
SEGDEL_KEEP0 = _idaapi.SEGDEL_KEEP0

def get_defsr(*args):
  """get_defsr(segment_t s, int reg) -> sel_t"""
  return _idaapi.get_defsr(*args)

def set_defsr(*args):
  """set_defsr(segment_t s, int reg, sel_t value)"""
  return _idaapi.set_defsr(*args)
R_es = _idaapi.R_es
R_cs = _idaapi.R_cs
R_ss = _idaapi.R_ss
R_ds = _idaapi.R_ds
R_fs = _idaapi.R_fs
R_gs = _idaapi.R_gs
class segreg_t(area_t):
    """Proxy of C++ segreg_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def reg(self, *args):
        """
        reg(self, int n) -> sel_t
        reg(self, int n) -> sel_t
        """
        return _idaapi.segreg_t_reg(self, *args)

    def tag(self, *args):
        """
        tag(self, int n) -> uchar
        tag(self, int n) -> uchar
        """
        return _idaapi.segreg_t_tag(self, *args)

    def undefregs(self, *args):
        """undefregs(self)"""
        return _idaapi.segreg_t_undefregs(self, *args)

    def setregs(self, *args):
        """setregs(self, sel_t Regs)"""
        return _idaapi.segreg_t_setregs(self, *args)

    def settags(self, *args):
        """settags(self, uchar v)"""
        return _idaapi.segreg_t_settags(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> segreg_t"""
        this = _idaapi.new_segreg_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_segreg_t
    __del__ = lambda self : None;
segreg_t_swigregister = _idaapi.segreg_t_swigregister
segreg_t_swigregister(segreg_t)

def get_segm_name(*args):
  """
    get_segm_name(segment_t s) -> ssize_t
    get_segm_name(ea_t ea) -> ssize_t
    """
  return _idaapi.get_segm_name(*args)


def getSR(*args):
  """getSR(ea_t ea, int rg) -> sel_t"""
  return _idaapi.getSR(*args)

def SetDefaultRegisterValue(*args):
  """SetDefaultRegisterValue(segment_t sg, int rg, sel_t value) -> bool"""
  return _idaapi.SetDefaultRegisterValue(*args)

def splitSRarea1(*args):
  """splitSRarea1(ea_t ea, int rg, sel_t v, uchar tag, bool silent = False) -> bool"""
  return _idaapi.splitSRarea1(*args)

def set_sreg_at_next_code(*args):
  """set_sreg_at_next_code(ea_t ea1, ea_t ea2, int reg, sel_t value)"""
  return _idaapi.set_sreg_at_next_code(*args)

def getSRarea(*args):
  """getSRarea(ea_t ea) -> segreg_t"""
  return _idaapi.getSRarea(*args)

def getnSRarea(*args):
  """getnSRarea(int n) -> segreg_t"""
  return _idaapi.getnSRarea(*args)

def set_default_dataseg(*args):
  """set_default_dataseg(sel_t ds_sel)"""
  return _idaapi.set_default_dataseg(*args)
class strwinsetup_t(object):
    """Proxy of C++ strwinsetup_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    strtypes = _swig_property(_idaapi.strwinsetup_t_strtypes_get, _idaapi.strwinsetup_t_strtypes_set)
    minlen = _swig_property(_idaapi.strwinsetup_t_minlen_get, _idaapi.strwinsetup_t_minlen_set)
    display_only_existing_strings = _swig_property(_idaapi.strwinsetup_t_display_only_existing_strings_get, _idaapi.strwinsetup_t_display_only_existing_strings_set)
    only_7bit = _swig_property(_idaapi.strwinsetup_t_only_7bit_get, _idaapi.strwinsetup_t_only_7bit_set)
    ignore_heads = _swig_property(_idaapi.strwinsetup_t_ignore_heads_get, _idaapi.strwinsetup_t_ignore_heads_set)
    ea1 = _swig_property(_idaapi.strwinsetup_t_ea1_get, _idaapi.strwinsetup_t_ea1_set)
    ea2 = _swig_property(_idaapi.strwinsetup_t_ea2_get, _idaapi.strwinsetup_t_ea2_set)
    def __init__(self, *args): 
        """__init__(self) -> strwinsetup_t"""
        this = _idaapi.new_strwinsetup_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_strwinsetup_t
    __del__ = lambda self : None;
strwinsetup_t_swigregister = _idaapi.strwinsetup_t_swigregister
strwinsetup_t_swigregister(strwinsetup_t)

class string_info_t(object):
    """Proxy of C++ string_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ea = _swig_property(_idaapi.string_info_t_ea_get, _idaapi.string_info_t_ea_set)
    length = _swig_property(_idaapi.string_info_t_length_get, _idaapi.string_info_t_length_set)
    type = _swig_property(_idaapi.string_info_t_type_get, _idaapi.string_info_t_type_set)
    def __init__(self, *args): 
        """
        __init__(self) -> string_info_t
        __init__(self, ea_t _ea) -> string_info_t
        """
        this = _idaapi.new_string_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(self, *args):
        """__lt__(self, string_info_t string_info) -> bool"""
        return _idaapi.string_info_t___lt__(self, *args)

    __swig_destroy__ = _idaapi.delete_string_info_t
    __del__ = lambda self : None;
string_info_t_swigregister = _idaapi.string_info_t_swigregister
string_info_t_swigregister(string_info_t)


def set_strlist_options(*args):
  """set_strlist_options(strwinsetup_t options) -> bool"""
  return _idaapi.set_strlist_options(*args)

def refresh_strlist(*args):
  """refresh_strlist(ea_t ea1, ea_t ea2)"""
  return _idaapi.refresh_strlist(*args)

def get_strlist_qty(*args):
  """get_strlist_qty() -> size_t"""
  return _idaapi.get_strlist_qty(*args)

def get_strlist_item(*args):
  """get_strlist_item(int n, string_info_t si) -> bool"""
  return _idaapi.get_strlist_item(*args)
STRUC_SEPARATOR = _idaapi.STRUC_SEPARATOR
class member_t(object):
    """Proxy of C++ member_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_idaapi.member_t_id_get, _idaapi.member_t_id_set)
    soff = _swig_property(_idaapi.member_t_soff_get, _idaapi.member_t_soff_set)
    eoff = _swig_property(_idaapi.member_t_eoff_get, _idaapi.member_t_eoff_set)
    flag = _swig_property(_idaapi.member_t_flag_get, _idaapi.member_t_flag_set)
    props = _swig_property(_idaapi.member_t_props_get, _idaapi.member_t_props_set)
    def unimem(self, *args):
        """unimem(self) -> bool"""
        return _idaapi.member_t_unimem(self, *args)

    def has_union(self, *args):
        """has_union(self) -> bool"""
        return _idaapi.member_t_has_union(self, *args)

    def by_til(self, *args):
        """by_til(self) -> bool"""
        return _idaapi.member_t_by_til(self, *args)

    def has_ti(self, *args):
        """has_ti(self) -> bool"""
        return _idaapi.member_t_has_ti(self, *args)

    def get_soff(self, *args):
        """get_soff(self) -> ea_t"""
        return _idaapi.member_t_get_soff(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> member_t"""
        this = _idaapi.new_member_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_member_t
    __del__ = lambda self : None;
member_t_swigregister = _idaapi.member_t_swigregister
member_t_swigregister(member_t)
MF_OK = _idaapi.MF_OK
MF_UNIMEM = _idaapi.MF_UNIMEM
MF_HASUNI = _idaapi.MF_HASUNI
MF_BYTIL = _idaapi.MF_BYTIL
MF_HASTI = _idaapi.MF_HASTI

class struc_t(object):
    """Proxy of C++ struc_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_idaapi.struc_t_id_get, _idaapi.struc_t_id_set)
    memqty = _swig_property(_idaapi.struc_t_memqty_get, _idaapi.struc_t_memqty_set)
    members = _swig_property(_idaapi.struc_t_members_get, _idaapi.struc_t_members_set)
    age = _swig_property(_idaapi.struc_t_age_get, _idaapi.struc_t_age_set)
    props = _swig_property(_idaapi.struc_t_props_get, _idaapi.struc_t_props_set)
    def is_varstr(self, *args):
        """is_varstr(self) -> bool"""
        return _idaapi.struc_t_is_varstr(self, *args)

    def is_union(self, *args):
        """is_union(self) -> bool"""
        return _idaapi.struc_t_is_union(self, *args)

    def has_union(self, *args):
        """has_union(self) -> bool"""
        return _idaapi.struc_t_has_union(self, *args)

    def is_choosable(self, *args):
        """is_choosable(self) -> bool"""
        return _idaapi.struc_t_is_choosable(self, *args)

    def from_til(self, *args):
        """from_til(self) -> bool"""
        return _idaapi.struc_t_from_til(self, *args)

    def is_hidden(self, *args):
        """is_hidden(self) -> bool"""
        return _idaapi.struc_t_is_hidden(self, *args)

    ordinal = _swig_property(_idaapi.struc_t_ordinal_get, _idaapi.struc_t_ordinal_set)
    def get_member(self, *args):
        """get_member(self, int index) -> member_t"""
        return _idaapi.struc_t_get_member(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> struc_t"""
        this = _idaapi.new_struc_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_struc_t
    __del__ = lambda self : None;
struc_t_swigregister = _idaapi.struc_t_swigregister
struc_t_swigregister(struc_t)
SF_VAR = _idaapi.SF_VAR
SF_UNION = _idaapi.SF_UNION
SF_HASUNI = _idaapi.SF_HASUNI
SF_NOLIST = _idaapi.SF_NOLIST
SF_TYPLIB = _idaapi.SF_TYPLIB
SF_HIDDEN = _idaapi.SF_HIDDEN
SF_FRAME = _idaapi.SF_FRAME


def get_struc_qty(*args):
  """get_struc_qty() -> size_t"""
  return _idaapi.get_struc_qty(*args)

def get_first_struc_idx(*args):
  """get_first_struc_idx() -> uval_t"""
  return _idaapi.get_first_struc_idx(*args)

def get_last_struc_idx(*args):
  """get_last_struc_idx() -> uval_t"""
  return _idaapi.get_last_struc_idx(*args)

def get_prev_struc_idx(*args):
  """get_prev_struc_idx(uval_t idx) -> uval_t"""
  return _idaapi.get_prev_struc_idx(*args)

def get_next_struc_idx(*args):
  """get_next_struc_idx(uval_t idx) -> uval_t"""
  return _idaapi.get_next_struc_idx(*args)

def get_struc_idx(*args):
  """get_struc_idx(tid_t id) -> uval_t"""
  return _idaapi.get_struc_idx(*args)

def get_struc_by_idx(*args):
  """get_struc_by_idx(uval_t idx) -> tid_t"""
  return _idaapi.get_struc_by_idx(*args)

def get_struc(*args):
  """get_struc(tid_t id) -> struc_t"""
  return _idaapi.get_struc(*args)

def get_struc_id(*args):
  """get_struc_id(char name) -> tid_t"""
  return _idaapi.get_struc_id(*args)

def get_struc_name(*args):
  """get_struc_name(tid_t id) -> ssize_t"""
  return _idaapi.get_struc_name(*args)

def get_struc_cmt(*args):
  """get_struc_cmt(tid_t id, bool repeatable) -> ssize_t"""
  return _idaapi.get_struc_cmt(*args)

def get_struc_prev_offset(*args):
  """get_struc_prev_offset(struc_t sptr, ea_t offset) -> ea_t"""
  return _idaapi.get_struc_prev_offset(*args)

def get_struc_next_offset(*args):
  """get_struc_next_offset(struc_t sptr, ea_t offset) -> ea_t"""
  return _idaapi.get_struc_next_offset(*args)

def get_struc_last_offset(*args):
  """get_struc_last_offset(struc_t sptr) -> ea_t"""
  return _idaapi.get_struc_last_offset(*args)

def get_struc_first_offset(*args):
  """get_struc_first_offset(struc_t sptr) -> ea_t"""
  return _idaapi.get_struc_first_offset(*args)

def get_max_offset(*args):
  """get_max_offset(struc_t sptr) -> ea_t"""
  return _idaapi.get_max_offset(*args)

def is_varstr(*args):
  """is_varstr(tid_t id) -> bool"""
  return _idaapi.is_varstr(*args)

def is_union(*args):
  """is_union(tid_t id) -> bool"""
  return _idaapi.is_union(*args)

def get_member_struc(*args):
  """get_member_struc(char fullname) -> struc_t"""
  return _idaapi.get_member_struc(*args)

def get_sptr(*args):
  """get_sptr(member_t mptr) -> struc_t"""
  return _idaapi.get_sptr(*args)

def get_member(*args):
  """get_member(struc_t sptr, asize_t offset) -> member_t"""
  return _idaapi.get_member(*args)

def get_member_by_name(*args):
  """get_member_by_name(struc_t sptr, char membername) -> member_t"""
  return _idaapi.get_member_by_name(*args)

def get_member_by_fullname(*args):
  """get_member_by_fullname(char fullname, struc_t sptr_place) -> member_t"""
  return _idaapi.get_member_by_fullname(*args)

def get_member_fullname(*args):
  """get_member_fullname(tid_t mid) -> ssize_t"""
  return _idaapi.get_member_fullname(*args)

def get_member_name(*args):
  """get_member_name(tid_t mid) -> ssize_t"""
  return _idaapi.get_member_name(*args)

def get_member_cmt(*args):
  """get_member_cmt(tid_t mid, bool repeatable) -> ssize_t"""
  return _idaapi.get_member_cmt(*args)

def get_member_size(*args):
  """get_member_size(member_t mptr) -> asize_t"""
  return _idaapi.get_member_size(*args)

def is_varmember(*args):
  """is_varmember(member_t mptr) -> bool"""
  return _idaapi.is_varmember(*args)

def get_best_fit_member(*args):
  """get_best_fit_member(struc_t sptr, asize_t offset) -> member_t"""
  return _idaapi.get_best_fit_member(*args)

def get_next_member_idx(*args):
  """get_next_member_idx(struc_t sptr, asize_t off) -> ssize_t"""
  return _idaapi.get_next_member_idx(*args)

def get_prev_member_idx(*args):
  """get_prev_member_idx(struc_t sptr, asize_t off) -> ssize_t"""
  return _idaapi.get_prev_member_idx(*args)

def add_struc(*args):
  """add_struc(uval_t idx, char name, bool is_union = False) -> tid_t"""
  return _idaapi.add_struc(*args)

def del_struc(*args):
  """del_struc(struc_t sptr)"""
  return _idaapi.del_struc(*args)

def set_struc_idx(*args):
  """set_struc_idx(struc_t sptr, uval_t idx) -> bool"""
  return _idaapi.set_struc_idx(*args)

def set_struc_name(*args):
  """set_struc_name(tid_t id, char name) -> bool"""
  return _idaapi.set_struc_name(*args)

def set_struc_cmt(*args):
  """set_struc_cmt(tid_t id, char cmt, bool repeatable) -> bool"""
  return _idaapi.set_struc_cmt(*args)

def add_struc_member(*args):
  """
    add_struc_member(struc_t sptr, char fieldname, ea_t offset, flags_t flag, 
        typeinfo_t mt, asize_t nbytes) -> int
    """
  return _idaapi.add_struc_member(*args)
STRUC_ERROR_MEMBER_OK = _idaapi.STRUC_ERROR_MEMBER_OK
STRUC_ERROR_MEMBER_NAME = _idaapi.STRUC_ERROR_MEMBER_NAME
STRUC_ERROR_MEMBER_OFFSET = _idaapi.STRUC_ERROR_MEMBER_OFFSET
STRUC_ERROR_MEMBER_SIZE = _idaapi.STRUC_ERROR_MEMBER_SIZE
STRUC_ERROR_MEMBER_TINFO = _idaapi.STRUC_ERROR_MEMBER_TINFO
STRUC_ERROR_MEMBER_STRUCT = _idaapi.STRUC_ERROR_MEMBER_STRUCT
STRUC_ERROR_MEMBER_UNIVAR = _idaapi.STRUC_ERROR_MEMBER_UNIVAR
STRUC_ERROR_MEMBER_VARLAST = _idaapi.STRUC_ERROR_MEMBER_VARLAST
STRUC_ERROR_MEMBER_NESTED = _idaapi.STRUC_ERROR_MEMBER_NESTED

def del_struc_member(*args):
  """del_struc_member(struc_t sptr, ea_t offset) -> bool"""
  return _idaapi.del_struc_member(*args)

def del_struc_members(*args):
  """del_struc_members(struc_t sptr, ea_t off1, ea_t off2) -> int"""
  return _idaapi.del_struc_members(*args)

def set_member_name(*args):
  """set_member_name(struc_t sptr, ea_t offset, char name) -> bool"""
  return _idaapi.set_member_name(*args)

def set_member_type(*args):
  """
    set_member_type(struc_t sptr, ea_t offset, flags_t flag, typeinfo_t mt, 
        asize_t nbytes) -> bool
    """
  return _idaapi.set_member_type(*args)

def set_member_cmt(*args):
  """set_member_cmt(member_t mptr, char cmt, bool repeatable) -> bool"""
  return _idaapi.set_member_cmt(*args)

def expand_struc(*args):
  """expand_struc(struc_t sptr, ea_t offset, adiff_t delta, bool recalc = True) -> bool"""
  return _idaapi.expand_struc(*args)

def save_struc2(*args):
  """save_struc2(struc_t sptr, bool may_update_ltypes = True)"""
  return _idaapi.save_struc2(*args)

def get_member_tinfo(*args):
  """get_member_tinfo(member_t mptr, qtype buf, qtype fields) -> bool"""
  return _idaapi.get_member_tinfo(*args)

def del_member_tinfo(*args):
  """del_member_tinfo(struc_t sptr, member_t mptr) -> bool"""
  return _idaapi.del_member_tinfo(*args)

def set_member_tinfo(*args):
  """
    set_member_tinfo(til_t til, struc_t sptr, member_t mptr, uval_t memoff, 
        type_t type, p_list fields, int flags) -> bool
    """
  return _idaapi.set_member_tinfo(*args)
SET_MEMTI_MAY_DESTROY = _idaapi.SET_MEMTI_MAY_DESTROY
SET_MEMTI_COMPATIBLE = _idaapi.SET_MEMTI_COMPATIBLE
SET_MEMTI_FUNCARG = _idaapi.SET_MEMTI_FUNCARG

def get_or_guess_member_tinfo(*args):
  """get_or_guess_member_tinfo(member_t mptr, qtype type, qtype fields) -> bool"""
  return _idaapi.get_or_guess_member_tinfo(*args)

def retrieve_member_info(*args):
  """retrieve_member_info(member_t mptr, typeinfo_t buf) -> typeinfo_t"""
  return _idaapi.retrieve_member_info(*args)

def is_anonymous_member_name(*args):
  """is_anonymous_member_name(char name) -> bool"""
  return _idaapi.is_anonymous_member_name(*args)

def is_dummy_member_name(*args):
  """is_dummy_member_name(char name) -> bool"""
  return _idaapi.is_dummy_member_name(*args)

def is_special_member(*args):
  """is_special_member(tid_t id) -> bool"""
  return _idaapi.is_special_member(*args)

def stroff_as_size(*args):
  """stroff_as_size(int plen, struc_t sptr, asize_t value) -> bool"""
  return _idaapi.stroff_as_size(*args)

def save_struc(*args):
  """save_struc(struc_t sptr)"""
  return _idaapi.save_struc(*args)

def get_or_guess_member_type(*args):
  """get_or_guess_member_type(member_t mptr, type_t type, size_t tsize) -> bool"""
  return _idaapi.get_or_guess_member_type(*args)

def get_member_ti(*args):
  """get_member_ti(member_t mptr, type_t buf, size_t bufsize) -> bool"""
  return _idaapi.get_member_ti(*args)

def set_member_ti(*args):
  """set_member_ti(struc_t sptr, member_t mptr, type_t type, int flags) -> bool"""
  return _idaapi.set_member_ti(*args)

def del_ti(*args):
  """del_ti(struc_t sptr, member_t mptr) -> bool"""
  return _idaapi.del_ti(*args)
RESERVED_BYTE = _idaapi.RESERVED_BYTE

def is_type_const(*args):
  """is_type_const(type_t t) -> bool"""
  return _idaapi.is_type_const(*args)

def is_type_volatile(*args):
  """is_type_volatile(type_t t) -> bool"""
  return _idaapi.is_type_volatile(*args)

def get_base_type(*args):
  """get_base_type(type_t t) -> type_t"""
  return _idaapi.get_base_type(*args)

def get_type_flags(*args):
  """get_type_flags(type_t t) -> type_t"""
  return _idaapi.get_type_flags(*args)

def get_full_type(*args):
  """get_full_type(type_t t) -> type_t"""
  return _idaapi.get_full_type(*args)

def is_typeid_last(*args):
  """is_typeid_last(type_t t) -> bool"""
  return _idaapi.is_typeid_last(*args)

def is_type_partial(*args):
  """is_type_partial(type_t t) -> bool"""
  return _idaapi.is_type_partial(*args)

def is_type_void(*args):
  """is_type_void(type_t t) -> bool"""
  return _idaapi.is_type_void(*args)

def is_type_unknown(*args):
  """is_type_unknown(type_t t) -> bool"""
  return _idaapi.is_type_unknown(*args)

def is_type_ptr(*args):
  """is_type_ptr(type_t t) -> bool"""
  return _idaapi.is_type_ptr(*args)

def is_type_complex(*args):
  """is_type_complex(type_t t) -> bool"""
  return _idaapi.is_type_complex(*args)

def is_type_func(*args):
  """is_type_func(type_t t) -> bool"""
  return _idaapi.is_type_func(*args)

def is_type_array(*args):
  """is_type_array(type_t t) -> bool"""
  return _idaapi.is_type_array(*args)

def is_type_typedef(*args):
  """is_type_typedef(type_t t) -> bool"""
  return _idaapi.is_type_typedef(*args)

def is_type_sue(*args):
  """is_type_sue(type_t t) -> bool"""
  return _idaapi.is_type_sue(*args)

def is_type_struct(*args):
  """is_type_struct(type_t t) -> bool"""
  return _idaapi.is_type_struct(*args)

def is_type_union(*args):
  """is_type_union(type_t t) -> bool"""
  return _idaapi.is_type_union(*args)

def is_type_struni(*args):
  """is_type_struni(type_t t) -> bool"""
  return _idaapi.is_type_struni(*args)

def is_type_enum(*args):
  """is_type_enum(type_t t) -> bool"""
  return _idaapi.is_type_enum(*args)

def is_type_bitfld(*args):
  """is_type_bitfld(type_t t) -> bool"""
  return _idaapi.is_type_bitfld(*args)

def is_type_int64(*args):
  """is_type_int64(type_t t) -> bool"""
  return _idaapi.is_type_int64(*args)

def is_type_long(*args):
  """is_type_long(type_t t) -> bool"""
  return _idaapi.is_type_long(*args)

def is_type_short(*args):
  """is_type_short(type_t t) -> bool"""
  return _idaapi.is_type_short(*args)

def is_type_char(*args):
  """is_type_char(type_t t) -> bool"""
  return _idaapi.is_type_char(*args)

def is_type_uint(*args):
  """is_type_uint(type_t t) -> bool"""
  return _idaapi.is_type_uint(*args)

def is_type_uchar(*args):
  """is_type_uchar(type_t t) -> bool"""
  return _idaapi.is_type_uchar(*args)

def is_type_ushort(*args):
  """is_type_ushort(type_t t) -> bool"""
  return _idaapi.is_type_ushort(*args)

def is_type_ulong(*args):
  """is_type_ulong(type_t t) -> bool"""
  return _idaapi.is_type_ulong(*args)

def is_type_uint64(*args):
  """is_type_uint64(type_t t) -> bool"""
  return _idaapi.is_type_uint64(*args)

def is_type_ldouble(*args):
  """is_type_ldouble(type_t t) -> bool"""
  return _idaapi.is_type_ldouble(*args)

def is_type_double(*args):
  """is_type_double(type_t t) -> bool"""
  return _idaapi.is_type_double(*args)

def is_type_float(*args):
  """is_type_float(type_t t) -> bool"""
  return _idaapi.is_type_float(*args)

def is_type_floating(*args):
  """is_type_floating(type_t t) -> bool"""
  return _idaapi.is_type_floating(*args)

def is_type_bool(*args):
  """is_type_bool(type_t t) -> bool"""
  return _idaapi.is_type_bool(*args)

def is_type_sdacl(*args):
  """is_type_sdacl(type_t t) -> bool"""
  return _idaapi.is_type_sdacl(*args)

def sdacl_unpack(*args):
  """sdacl_unpack(type_t t) -> int"""
  return _idaapi.sdacl_unpack(*args)

def sdacl_pack(*args):
  """sdacl_pack(int algn) -> int"""
  return _idaapi.sdacl_pack(*args)
MAX_DECL_ALIGN = _idaapi.MAX_DECL_ALIGN

def set_spoils(*args):
  """set_spoils(type_t pt, uint reg, uint size) -> type_t"""
  return _idaapi.set_spoils(*args)

def get_spoil_cnt(*args):
  """get_spoil_cnt(type_t t) -> unsigned int"""
  return _idaapi.get_spoil_cnt(*args)
MAX_DT = _idaapi.MAX_DT

def append_dt(*args):
  """append_dt(qtype type, int n) -> bool"""
  return _idaapi.append_dt(*args)

def append_de(*args):
  """append_de(qtype type, uint32 n) -> bool"""
  return _idaapi.append_de(*args)

def append_da(*args):
  """append_da(qtype type, uint32 n1, uint32 n2) -> bool"""
  return _idaapi.append_da(*args)

def append_name(*args):
  """append_name(qtype fields, char name) -> bool"""
  return _idaapi.append_name(*args)

def typncmp(*args):
  """typncmp(type_t dst, type_t src, size_t size) -> int"""
  return _idaapi.typncmp(*args)

def resolve_typedef2(*args):
  """resolve_typedef2(til_t ti, type_t p, p_list fields = None, char namebuf = None) -> type_t"""
  return _idaapi.resolve_typedef2(*args)

def is_type_resolvable(*args):
  """is_type_resolvable(type_t p, char namebuf = None) -> bool"""
  return _idaapi.is_type_resolvable(*args)

def is_restype_const(*args):
  """is_restype_const(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_const(*args)

def is_restype_void(*args):
  """is_restype_void(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_void(*args)

def is_restype_ptr(*args):
  """is_restype_ptr(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_ptr(*args)

def is_restype_func(*args):
  """is_restype_func(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_func(*args)

def is_restype_array(*args):
  """is_restype_array(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_array(*args)

def is_restype_complex(*args):
  """is_restype_complex(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_complex(*args)

def is_restype_struct(*args):
  """is_restype_struct(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_struct(*args)

def is_restype_union(*args):
  """is_restype_union(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_union(*args)

def is_restype_struni(*args):
  """is_restype_struni(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_struni(*args)

def is_restype_enum(*args):
  """is_restype_enum(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_enum(*args)

def is_restype_bitfld(*args):
  """is_restype_bitfld(til_t til, type_t type) -> bool"""
  return _idaapi.is_restype_bitfld(*args)

def is_castable2(*args):
  """is_castable2(til_t til, type_t frm, type_t to) -> bool"""
  return _idaapi.is_castable2(*args)

def remove_type_pointer(*args):
  """remove_type_pointer(til_t til, type_t ptype, char pname) -> bool"""
  return _idaapi.remove_type_pointer(*args)

def build_array_type(*args):
  """build_array_type(qtype outtype, type_t type, int size) -> bool"""
  return _idaapi.build_array_type(*args)
class type_names_t(object):
    """Proxy of C++ type_names_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type_void = _swig_property(_idaapi.type_names_t_type_void_get, _idaapi.type_names_t_type_void_set)
    type_int8 = _swig_property(_idaapi.type_names_t_type_int8_get, _idaapi.type_names_t_type_int8_set)
    type_int16 = _swig_property(_idaapi.type_names_t_type_int16_get, _idaapi.type_names_t_type_int16_set)
    type_int32 = _swig_property(_idaapi.type_names_t_type_int32_get, _idaapi.type_names_t_type_int32_set)
    type_int64 = _swig_property(_idaapi.type_names_t_type_int64_get, _idaapi.type_names_t_type_int64_set)
    type_int128 = _swig_property(_idaapi.type_names_t_type_int128_get, _idaapi.type_names_t_type_int128_set)
    type_char = _swig_property(_idaapi.type_names_t_type_char_get, _idaapi.type_names_t_type_char_set)
    type_int = _swig_property(_idaapi.type_names_t_type_int_get, _idaapi.type_names_t_type_int_set)
    type_bool = _swig_property(_idaapi.type_names_t_type_bool_get, _idaapi.type_names_t_type_bool_set)
    type_float = _swig_property(_idaapi.type_names_t_type_float_get, _idaapi.type_names_t_type_float_set)
    type_double = _swig_property(_idaapi.type_names_t_type_double_get, _idaapi.type_names_t_type_double_set)
    type_longdouble = _swig_property(_idaapi.type_names_t_type_longdouble_get, _idaapi.type_names_t_type_longdouble_set)
    type_shortfloat = _swig_property(_idaapi.type_names_t_type_shortfloat_get, _idaapi.type_names_t_type_shortfloat_set)
    type_seg = _swig_property(_idaapi.type_names_t_type_seg_get, _idaapi.type_names_t_type_seg_set)
    type_unknown = _swig_property(_idaapi.type_names_t_type_unknown_get, _idaapi.type_names_t_type_unknown_set)
    type_byte = _swig_property(_idaapi.type_names_t_type_byte_get, _idaapi.type_names_t_type_byte_set)
    type_word = _swig_property(_idaapi.type_names_t_type_word_get, _idaapi.type_names_t_type_word_set)
    type_dword = _swig_property(_idaapi.type_names_t_type_dword_get, _idaapi.type_names_t_type_dword_set)
    type_qword = _swig_property(_idaapi.type_names_t_type_qword_get, _idaapi.type_names_t_type_qword_set)
    type_oword = _swig_property(_idaapi.type_names_t_type_oword_get, _idaapi.type_names_t_type_oword_set)
    type_tbyte = _swig_property(_idaapi.type_names_t_type_tbyte_get, _idaapi.type_names_t_type_tbyte_set)
    type_signed = _swig_property(_idaapi.type_names_t_type_signed_get, _idaapi.type_names_t_type_signed_set)
    type_unsigned = _swig_property(_idaapi.type_names_t_type_unsigned_get, _idaapi.type_names_t_type_unsigned_set)
    cc_cdecl = _swig_property(_idaapi.type_names_t_cc_cdecl_get, _idaapi.type_names_t_cc_cdecl_set)
    cc_stdcall = _swig_property(_idaapi.type_names_t_cc_stdcall_get, _idaapi.type_names_t_cc_stdcall_set)
    cc_pascal = _swig_property(_idaapi.type_names_t_cc_pascal_get, _idaapi.type_names_t_cc_pascal_set)
    cc_fastcall = _swig_property(_idaapi.type_names_t_cc_fastcall_get, _idaapi.type_names_t_cc_fastcall_set)
    cc_thiscall = _swig_property(_idaapi.type_names_t_cc_thiscall_get, _idaapi.type_names_t_cc_thiscall_set)
    cc_manual = _swig_property(_idaapi.type_names_t_cc_manual_get, _idaapi.type_names_t_cc_manual_set)
    cc_specialp = _swig_property(_idaapi.type_names_t_cc_specialp_get, _idaapi.type_names_t_cc_specialp_set)
    cc_special = _swig_property(_idaapi.type_names_t_cc_special_get, _idaapi.type_names_t_cc_special_set)
    def __init__(self, *args): 
        """__init__(self) -> type_names_t"""
        this = _idaapi.new_type_names_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_type_names_t
    __del__ = lambda self : None;
type_names_t_swigregister = _idaapi.type_names_t_swigregister
type_names_t_swigregister(type_names_t)

def get_struc_size(*args):
  """
    get_struc_size(struc_t sptr) -> asize_t
    get_struc_size(tid_t id) -> asize_t
    """
  return _idaapi.get_struc_size(*args)
TYPE_BASE_MASK = cvar.TYPE_BASE_MASK
TYPE_FLAGS_MASK = cvar.TYPE_FLAGS_MASK
TYPE_MODIF_MASK = cvar.TYPE_MODIF_MASK
TYPE_FULL_MASK = cvar.TYPE_FULL_MASK
BT_UNK = cvar.BT_UNK
BT_VOID = cvar.BT_VOID
BTMT_SIZE0 = cvar.BTMT_SIZE0
BTMT_SIZE12 = cvar.BTMT_SIZE12
BTMT_SIZE48 = cvar.BTMT_SIZE48
BTMT_SIZE128 = cvar.BTMT_SIZE128
BT_UNK_BYTE = cvar.BT_UNK_BYTE
BT_UNK_WORD = cvar.BT_UNK_WORD
BT_UNK_DWORD = cvar.BT_UNK_DWORD
BT_UNK_QWORD = cvar.BT_UNK_QWORD
BT_UNK_OWORD = cvar.BT_UNK_OWORD
BT_UNKNOWN = cvar.BT_UNKNOWN
BTF_VOID = cvar.BTF_VOID
BT_INT8 = cvar.BT_INT8
BT_INT16 = cvar.BT_INT16
BT_INT32 = cvar.BT_INT32
BT_INT64 = cvar.BT_INT64
BT_INT128 = cvar.BT_INT128
BT_INT = cvar.BT_INT
BTMT_UNKSIGN = cvar.BTMT_UNKSIGN
BTMT_SIGNED = cvar.BTMT_SIGNED
BTMT_USIGNED = cvar.BTMT_USIGNED
BTMT_CHAR = cvar.BTMT_CHAR
BT_SEGREG = cvar.BT_SEGREG
BT_BOOL = cvar.BT_BOOL
BTMT_DEFBOOL = cvar.BTMT_DEFBOOL
BTMT_BOOL1 = cvar.BTMT_BOOL1
BTMT_BOOL2 = cvar.BTMT_BOOL2
BTMT_BOOL4 = cvar.BTMT_BOOL4
BT_FLOAT = cvar.BT_FLOAT
BTMT_FLOAT = cvar.BTMT_FLOAT
BTMT_DOUBLE = cvar.BTMT_DOUBLE
BTMT_LNGDBL = cvar.BTMT_LNGDBL
BTMT_SPECFLT = cvar.BTMT_SPECFLT
_BT_LAST_BASIC = cvar._BT_LAST_BASIC
BT_PTR = cvar.BT_PTR
BTMT_DEFPTR = cvar.BTMT_DEFPTR
BTMT_NEAR = cvar.BTMT_NEAR
BTMT_FAR = cvar.BTMT_FAR
BTMT_CLOSURE = cvar.BTMT_CLOSURE
BT_ARRAY = cvar.BT_ARRAY
BTMT_NONBASED = cvar.BTMT_NONBASED
BTMT_ARRESERV = cvar.BTMT_ARRESERV
BT_FUNC = cvar.BT_FUNC
BTMT_DEFCALL = cvar.BTMT_DEFCALL
BTMT_NEARCALL = cvar.BTMT_NEARCALL
BTMT_FARCALL = cvar.BTMT_FARCALL
BTMT_INTCALL = cvar.BTMT_INTCALL
BT_COMPLEX = cvar.BT_COMPLEX
BTMT_STRUCT = cvar.BTMT_STRUCT
BTMT_UNION = cvar.BTMT_UNION
BTMT_ENUM = cvar.BTMT_ENUM
BTMT_TYPEDEF = cvar.BTMT_TYPEDEF
BT_BITFIELD = cvar.BT_BITFIELD
BTMT_BFLDI8 = cvar.BTMT_BFLDI8
BTMT_BFLDI16 = cvar.BTMT_BFLDI16
BTMT_BFLDI32 = cvar.BTMT_BFLDI32
BTMT_BFLDI64 = cvar.BTMT_BFLDI64
BT_RESERVED = cvar.BT_RESERVED
BTF_STRUCT = cvar.BTF_STRUCT
BTF_UNION = cvar.BTF_UNION
BTF_ENUM = cvar.BTF_ENUM
BTF_TYPEDEF = cvar.BTF_TYPEDEF
BTM_CONST = cvar.BTM_CONST
BTM_VOLATILE = cvar.BTM_VOLATILE
BTE_SIZE_MASK = cvar.BTE_SIZE_MASK
BTE_RESERVED = cvar.BTE_RESERVED
BTE_BITFIELD = cvar.BTE_BITFIELD
BTE_OUT_MASK = cvar.BTE_OUT_MASK
BTE_HEX = cvar.BTE_HEX
BTE_CHAR = cvar.BTE_CHAR
BTE_SDEC = cvar.BTE_SDEC
BTE_UDEC = cvar.BTE_UDEC
BTE_ALWAYS = cvar.BTE_ALWAYS

class til_t(object):
    """Proxy of C++ til_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_idaapi.til_t_name_get, _idaapi.til_t_name_set)
    desc = _swig_property(_idaapi.til_t_desc_get, _idaapi.til_t_desc_set)
    nbases = _swig_property(_idaapi.til_t_nbases_get, _idaapi.til_t_nbases_set)
    flags = _swig_property(_idaapi.til_t_flags_get, _idaapi.til_t_flags_set)
    def is_dirty(self, *args):
        """is_dirty(self) -> bool"""
        return _idaapi.til_t_is_dirty(self, *args)

    def set_dirty(self, *args):
        """set_dirty(self)"""
        return _idaapi.til_t_set_dirty(self, *args)

    cc = _swig_property(_idaapi.til_t_cc_get, _idaapi.til_t_cc_set)
    nrefs = _swig_property(_idaapi.til_t_nrefs_get, _idaapi.til_t_nrefs_set)
    def __init__(self, *args): 
        """__init__(self) -> til_t"""
        this = _idaapi.new_til_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_til_t
    __del__ = lambda self : None;
til_t_swigregister = _idaapi.til_t_swigregister
til_t_swigregister(til_t)
TIL_ZIP = _idaapi.TIL_ZIP
TIL_MAC = _idaapi.TIL_MAC
TIL_ESI = _idaapi.TIL_ESI
TIL_UNI = _idaapi.TIL_UNI
TIL_ORD = _idaapi.TIL_ORD
TIL_ALI = _idaapi.TIL_ALI
TIL_MOD = _idaapi.TIL_MOD

class til_symbol_t(object):
    """Proxy of C++ til_symbol_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_idaapi.til_symbol_t_name_get, _idaapi.til_symbol_t_name_set)
    til = _swig_property(_idaapi.til_symbol_t_til_get, _idaapi.til_symbol_t_til_set)
    def __init__(self, *args): 
        """__init__(self, char n = None, til_t t = None) -> til_symbol_t"""
        this = _idaapi.new_til_symbol_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_til_symbol_t
    __del__ = lambda self : None;
til_symbol_t_swigregister = _idaapi.til_symbol_t_swigregister
til_symbol_t_swigregister(til_symbol_t)


def new_til(*args):
  """new_til(char name, char desc) -> til_t"""
  return _idaapi.new_til(*args)
TIL_ADD_FAILED = _idaapi.TIL_ADD_FAILED
TIL_ADD_OK = _idaapi.TIL_ADD_OK
TIL_ADD_ALREADY = _idaapi.TIL_ADD_ALREADY

def compact_til(*args):
  """compact_til(til_t ti) -> bool"""
  return _idaapi.compact_til(*args)

def store_til(*args):
  """store_til(til_t ti, char tildir, char name) -> bool"""
  return _idaapi.store_til(*args)

def free_til(*args):
  """free_til(til_t ti)"""
  return _idaapi.free_til(*args)

def load_til_header(*args):
  """load_til_header(char tildir, char name, char errbuf, size_t bufsize) -> til_t"""
  return _idaapi.load_til_header(*args)

def check_skip_type(*args):
  """check_skip_type(til_t ti, type_t ptr) -> bool"""
  return _idaapi.check_skip_type(*args)

def is_valid_full_type(*args):
  """is_valid_full_type(til_t ti, type_t ptr) -> bool"""
  return _idaapi.is_valid_full_type(*args)

def get_ptr_object_size(*args):
  """get_ptr_object_size(til_t til, type_t type) -> ssize_t"""
  return _idaapi.get_ptr_object_size(*args)

def get_funcarg_size(*args):
  """get_funcarg_size(til_t til, type_t type, size_t lp = None) -> size_t"""
  return _idaapi.get_funcarg_size(*args)
T_CBBRKDEF = _idaapi.T_CBBRKDEF
T_NONALL = _idaapi.T_NONALL
T_CBBRK = _idaapi.T_CBBRK
T_NORMAL = _idaapi.T_NORMAL
T_BADDESCR = _idaapi.T_BADDESCR
T_SHORTSTR = _idaapi.T_SHORTSTR
T_BADNAMES = _idaapi.T_BADNAMES
T_BADCMTS = _idaapi.T_BADCMTS
T_PARAMERR = _idaapi.T_PARAMERR
T_ALREADY = _idaapi.T_ALREADY
T_NOTYPE = _idaapi.T_NOTYPE
T_UNIMPL = _idaapi.T_UNIMPL
T_INTERNAL = _idaapi.T_INTERNAL
UNPFL_REDEFINE = _idaapi.UNPFL_REDEFINE
UNPFL_NOPRALGN = _idaapi.UNPFL_NOPRALGN
UNPFL_PARSPACE = _idaapi.UNPFL_PARSPACE
UNPFL_TYPENAME = _idaapi.UNPFL_TYPENAME
UNPFL_SEMI = _idaapi.UNPFL_SEMI

def print_type_to_qstring(*args):
  """
    print_type_to_qstring(qstring result, char prefix, int indent, int cmtindent, 
        int flags, til_t ti, type_t pt, char name = None, 
        char cmt = None, p_list field_names = None, 
        p_list field_cmts = None) -> ssize_t
    """
  return _idaapi.print_type_to_qstring(*args)
PRTYPE_1LINE = _idaapi.PRTYPE_1LINE
PRTYPE_MULTI = _idaapi.PRTYPE_MULTI
PRTYPE_TYPE = _idaapi.PRTYPE_TYPE
PRTYPE_PRAGMA = _idaapi.PRTYPE_PRAGMA
PRTYPE_SEMI = _idaapi.PRTYPE_SEMI

def is_code_far(*args):
  """is_code_far(cm_t cm) -> bool"""
  return _idaapi.is_code_far(*args)

def is_data_far(*args):
  """is_data_far(cm_t cm) -> bool"""
  return _idaapi.is_data_far(*args)
ARGLOC_REG = _idaapi.ARGLOC_REG
ARGLOC_REG2 = _idaapi.ARGLOC_REG2

def is_reg_argloc(*args):
  """is_reg_argloc(uint32 argloc) -> bool"""
  return _idaapi.is_reg_argloc(*args)

def is_stack_argloc(*args):
  """is_stack_argloc(uint32 argloc) -> bool"""
  return _idaapi.is_stack_argloc(*args)

def is_reg2_argloc(*args):
  """is_reg2_argloc(uint32 reg_argloc) -> bool"""
  return _idaapi.is_reg2_argloc(*args)

def get_argloc_r1(*args):
  """get_argloc_r1(uint32 reg_argloc) -> int"""
  return _idaapi.get_argloc_r1(*args)

def get_argloc_r2(*args):
  """get_argloc_r2(uint32 reg_argloc) -> int"""
  return _idaapi.get_argloc_r2(*args)

def make_argloc(*args):
  """make_argloc(int r1, int r2) -> argloc_t"""
  return _idaapi.make_argloc(*args)

def split_argloc(*args):
  """split_argloc(argloc_t al, int r1, int r2)"""
  return _idaapi.split_argloc(*args)

def extract_spoiledreg(*args):
  """extract_spoiledreg(type_t ptr, uchar reg, uchar len)"""
  return _idaapi.extract_spoiledreg(*args)

def skip_spoiled_info(*args):
  """skip_spoiled_info(type_t ptr) -> type_t"""
  return _idaapi.skip_spoiled_info(*args)

def is_user_cc(*args):
  """is_user_cc(cm_t cm) -> bool"""
  return _idaapi.is_user_cc(*args)

def is_vararg_cc(*args):
  """is_vararg_cc(cm_t cm) -> bool"""
  return _idaapi.is_vararg_cc(*args)

def is_purging_cc(*args):
  """is_purging_cc(cm_t cm) -> bool"""
  return _idaapi.is_purging_cc(*args)

def get_comp(*args):
  """get_comp(comp_t comp) -> comp_t"""
  return _idaapi.get_comp(*args)

def get_compiler_name(*args):
  """get_compiler_name(comp_t id) -> char"""
  return _idaapi.get_compiler_name(*args)

def is_comp_unsure(*args):
  """is_comp_unsure(comp_t comp) -> comp_t"""
  return _idaapi.is_comp_unsure(*args)

def default_compiler(*args):
  """default_compiler() -> comp_t"""
  return _idaapi.default_compiler(*args)

def set_compiler(*args):
  """set_compiler(compiler_info_t cc, int flags) -> bool"""
  return _idaapi.set_compiler(*args)
SETCOMP_OVERRIDE = _idaapi.SETCOMP_OVERRIDE
SETCOMP_ONLY_ID = _idaapi.SETCOMP_ONLY_ID

def set_compiler_id(*args):
  """set_compiler_id(comp_t id) -> bool"""
  return _idaapi.set_compiler_id(*args)
MAXFUNCARGCMT = _idaapi.MAXFUNCARGCMT
abs_unk = _idaapi.abs_unk
abs_no = _idaapi.abs_no
abs_yes = _idaapi.abs_yes
sc_unk = _idaapi.sc_unk
sc_type = _idaapi.sc_type
sc_ext = _idaapi.sc_ext
sc_stat = _idaapi.sc_stat
sc_reg = _idaapi.sc_reg
sc_auto = _idaapi.sc_auto
sc_friend = _idaapi.sc_friend
sc_virt = _idaapi.sc_virt
HTI_CPP = _idaapi.HTI_CPP
HTI_INT = _idaapi.HTI_INT
HTI_EXT = _idaapi.HTI_EXT
HTI_LEX = _idaapi.HTI_LEX
HTI_UNP = _idaapi.HTI_UNP
HTI_TST = _idaapi.HTI_TST
HTI_FIL = _idaapi.HTI_FIL
HTI_MAC = _idaapi.HTI_MAC
HTI_NWR = _idaapi.HTI_NWR
HTI_NER = _idaapi.HTI_NER
HTI_DCL = _idaapi.HTI_DCL
HTI_NDC = _idaapi.HTI_NDC
HTI_PAK = _idaapi.HTI_PAK
HTI_PAK_SHIFT = _idaapi.HTI_PAK_SHIFT
HTI_PAKDEF = _idaapi.HTI_PAKDEF
HTI_PAK1 = _idaapi.HTI_PAK1
HTI_PAK2 = _idaapi.HTI_PAK2
HTI_PAK4 = _idaapi.HTI_PAK4
HTI_PAK8 = _idaapi.HTI_PAK8
HTI_PAK16 = _idaapi.HTI_PAK16
HTI_ANON = _idaapi.HTI_ANON

def parse_decl(*args):
  """
    parse_decl(til_t til, char decl, qstring name, qtype type, qtype fields, 
        int flags) -> bool
    """
  return _idaapi.parse_decl(*args)
PT_SIL = _idaapi.PT_SIL
PT_NDC = _idaapi.PT_NDC
PT_TYP = _idaapi.PT_TYP
PT_VAR = _idaapi.PT_VAR

def parse_decls(*args):
  """parse_decls(til_t til, char input, printer_t printer, int hti_flags) -> int"""
  return _idaapi.parse_decls(*args)
NTF_TYPE = _idaapi.NTF_TYPE
NTF_SYMU = _idaapi.NTF_SYMU
NTF_SYMM = _idaapi.NTF_SYMM
NTF_NOBASE = _idaapi.NTF_NOBASE
NTF_REPLACE = _idaapi.NTF_REPLACE
NTF_UMANGLED = _idaapi.NTF_UMANGLED
NTF_NOCUR = _idaapi.NTF_NOCUR

def del_named_type(*args):
  """del_named_type(til_t ti, char name, int ntf_flags) -> bool"""
  return _idaapi.del_named_type(*args)

def rename_named_type(*args):
  """rename_named_type(til_t ti, char frm, char to, int ntf_flags) -> int"""
  return _idaapi.rename_named_type(*args)

def first_named_type(*args):
  """first_named_type(til_t ti, int ntf_flags) -> char"""
  return _idaapi.first_named_type(*args)

def next_named_type(*args):
  """next_named_type(til_t ti, char name, int ntf_flags) -> char"""
  return _idaapi.next_named_type(*args)

def choose_named_type2(*args):
  """choose_named_type2(til_t root_til, char title, int ntf_flags,  func, til_symbol_t sym) -> bool"""
  return _idaapi.choose_named_type2(*args)

def choose_local_type(*args):
  """choose_local_type(til_t ti, char title, local_predicate_t func, void ud) -> uint32"""
  return _idaapi.choose_local_type(*args)

def get_numbered_type(*args):
  """
    get_numbered_type(til_t ti, uint32 ordinal, type_t type = None, p_list fields = None, 
        char cmt = None, p_list fieldcmts = None, 
        sclass_t sclass = None) -> bool
    """
  return _idaapi.get_numbered_type(*args)

def alloc_type_ordinals(*args):
  """alloc_type_ordinals(til_t ti, int qty) -> uint32"""
  return _idaapi.alloc_type_ordinals(*args)

def alloc_type_ordinal(*args):
  """alloc_type_ordinal(til_t ti) -> uint32"""
  return _idaapi.alloc_type_ordinal(*args)

def get_ordinal_qty(*args):
  """get_ordinal_qty(til_t ti) -> uint32"""
  return _idaapi.get_ordinal_qty(*args)

def set_numbered_type(*args):
  """
    set_numbered_type(til_t ti, uint32 ordinal, int ntf_flags, char name, 
        type_t type, p_list fields = None, char cmt = None, 
        p_list fldcmts = None, sclass_t sclass = None) -> bool
    """
  return _idaapi.set_numbered_type(*args)

def del_numbered_type(*args):
  """del_numbered_type(til_t ti, uint32 ordinal) -> bool"""
  return _idaapi.del_numbered_type(*args)

def set_type_alias(*args):
  """set_type_alias(til_t ti, uint32 src_ordinal, uint32 dst_ordinal) -> bool"""
  return _idaapi.set_type_alias(*args)

def get_alias_target(*args):
  """get_alias_target(til_t ti, uint32 ordinal) -> uint32"""
  return _idaapi.get_alias_target(*args)

def get_type_ordinal(*args):
  """get_type_ordinal(til_t ti, char name) -> int32"""
  return _idaapi.get_type_ordinal(*args)

def get_numbered_type_name(*args):
  """get_numbered_type_name(til_t ti, uint32 ordinal) -> char"""
  return _idaapi.get_numbered_type_name(*args)

def create_numbered_type_name(*args):
  """create_numbered_type_name(int32 ord) -> size_t"""
  return _idaapi.create_numbered_type_name(*args)

def get_ordinal_from_idb_type(*args):
  """get_ordinal_from_idb_type(char name, type_t type) -> int"""
  return _idaapi.get_ordinal_from_idb_type(*args)

def is_autosync(*args):
  """is_autosync(char name, type_t type) -> bool"""
  return _idaapi.is_autosync(*args)

def calc_argloc_info(*args):
  """calc_argloc_info(til_t til, type_t type, uint32 arglocs, size_t maxn) -> int"""
  return _idaapi.calc_argloc_info(*args)
MAX_FUNC_ARGS = _idaapi.MAX_FUNC_ARGS

def get_stkarg_offset(*args):
  """get_stkarg_offset() -> int"""
  return _idaapi.get_stkarg_offset(*args)
class type_visitor_t(object):
    """Proxy of C++ type_visitor_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def visit_type(self, *args):
        """visit_type(self, type_t type) -> int"""
        return _idaapi.type_visitor_t_visit_type(self, *args)

    __swig_destroy__ = _idaapi.delete_type_visitor_t
    __del__ = lambda self : None;
type_visitor_t_swigregister = _idaapi.type_visitor_t_swigregister
type_visitor_t_swigregister(type_visitor_t)
BADSIZE = cvar.BADSIZE
CM_MASK = cvar.CM_MASK
CM_UNKNOWN = cvar.CM_UNKNOWN
CM_N8_F16 = cvar.CM_N8_F16
CM_N64 = cvar.CM_N64
CM_N16_F32 = cvar.CM_N16_F32
CM_N32_F48 = cvar.CM_N32_F48
CM_M_MASK = cvar.CM_M_MASK
CM_M_NN = cvar.CM_M_NN
CM_M_FF = cvar.CM_M_FF
CM_M_NF = cvar.CM_M_NF
CM_M_FN = cvar.CM_M_FN
CM_CC_MASK = cvar.CM_CC_MASK
CM_CC_INVALID = cvar.CM_CC_INVALID
CM_CC_UNKNOWN = cvar.CM_CC_UNKNOWN
CM_CC_VOIDARG = cvar.CM_CC_VOIDARG
CM_CC_CDECL = cvar.CM_CC_CDECL
CM_CC_ELLIPSIS = cvar.CM_CC_ELLIPSIS
CM_CC_STDCALL = cvar.CM_CC_STDCALL
CM_CC_PASCAL = cvar.CM_CC_PASCAL
CM_CC_FASTCALL = cvar.CM_CC_FASTCALL
CM_CC_THISCALL = cvar.CM_CC_THISCALL
CM_CC_MANUAL = cvar.CM_CC_MANUAL
CM_CC_SPOILED = cvar.CM_CC_SPOILED
CM_CC_RESERVE4 = cvar.CM_CC_RESERVE4
CM_CC_RESERVE3 = cvar.CM_CC_RESERVE3
CM_CC_SPECIALE = cvar.CM_CC_SPECIALE
CM_CC_SPECIALP = cvar.CM_CC_SPECIALP
CM_CC_SPECIAL = cvar.CM_CC_SPECIAL
C_PC_TINY = cvar.C_PC_TINY
C_PC_SMALL = cvar.C_PC_SMALL
C_PC_COMPACT = cvar.C_PC_COMPACT
C_PC_MEDIUM = cvar.C_PC_MEDIUM
C_PC_LARGE = cvar.C_PC_LARGE
C_PC_HUGE = cvar.C_PC_HUGE
C_PC_FLAT = cvar.C_PC_FLAT
COMP_MASK = cvar.COMP_MASK
COMP_UNK = cvar.COMP_UNK
COMP_MS = cvar.COMP_MS
COMP_BC = cvar.COMP_BC
COMP_WATCOM = cvar.COMP_WATCOM
COMP_GNU = cvar.COMP_GNU
COMP_VISAGE = cvar.COMP_VISAGE
COMP_BP = cvar.COMP_BP
COMP_UNSURE = cvar.COMP_UNSURE


def for_all_types(*args):
  """for_all_types(type_t ptype, type_visitor_t tv) -> int"""
  return _idaapi.for_all_types(*args)
class type_pair_t(object):
    """Proxy of C++ type_pair_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type1 = _swig_property(_idaapi.type_pair_t_type1_get, _idaapi.type_pair_t_type1_set)
    type2 = _swig_property(_idaapi.type_pair_t_type2_get, _idaapi.type_pair_t_type2_set)
    def __init__(self, *args): 
        """
        __init__(self) -> type_pair_t
        __init__(self, qtype l) -> type_pair_t
        __init__(self, qtype l, qtype g) -> type_pair_t
        """
        this = _idaapi.new_type_pair_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_type_pair_t
    __del__ = lambda self : None;
type_pair_t_swigregister = _idaapi.type_pair_t_swigregister
type_pair_t_swigregister(type_pair_t)

class type_pair_vec_t(object):
    """Proxy of C++ type_pair_vec_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> type_pair_vec_t"""
        this = _idaapi.new_type_pair_vec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_type_pair_vec_t
    __del__ = lambda self : None;
type_pair_vec_t_swigregister = _idaapi.type_pair_vec_t_swigregister
type_pair_vec_t_swigregister(type_pair_vec_t)


def replace_subtypes(*args):
  """replace_subtypes(qtype type, type_pair_vec_t type_pairs) -> int"""
  return _idaapi.replace_subtypes(*args)
IMPTYPE_VERBOSE = _idaapi.IMPTYPE_VERBOSE
IMPTYPE_OVERRIDE = _idaapi.IMPTYPE_OVERRIDE
IMPTYPE_LOCAL = _idaapi.IMPTYPE_LOCAL

def import_type(*args):
  """import_type(til_t til, int idx, char name, int flags = 0) -> tid_t"""
  return _idaapi.import_type(*args)

def add_til2(*args):
  """add_til2(char name, int flags) -> int"""
  return _idaapi.add_til2(*args)
ADDTIL_DEFAULT = _idaapi.ADDTIL_DEFAULT
ADDTIL_INCOMP = _idaapi.ADDTIL_INCOMP
ADDTIL_SILENT = _idaapi.ADDTIL_SILENT
ADDTIL_FAILED = _idaapi.ADDTIL_FAILED
ADDTIL_OK = _idaapi.ADDTIL_OK
ADDTIL_COMP = _idaapi.ADDTIL_COMP

def del_til(*args):
  """del_til(char name) -> bool"""
  return _idaapi.del_til(*args)

def apply_named_type(*args):
  """apply_named_type(ea_t ea, char name) -> bool"""
  return _idaapi.apply_named_type(*args)

def apply_tinfo(*args):
  """apply_tinfo(til_t til, ea_t ea, type_t type, p_list fields, int userti) -> bool"""
  return _idaapi.apply_tinfo(*args)

def apply_cdecl2(*args):
  """apply_cdecl2(til_t til, ea_t ea, char decl, int flags = 0) -> bool"""
  return _idaapi.apply_cdecl2(*args)

def apply_once_type_and_name(*args):
  """apply_once_type_and_name(ea_t ea, type_t type, char name) -> bool"""
  return _idaapi.apply_once_type_and_name(*args)

def guess_func_tinfo(*args):
  """guess_func_tinfo(func_t pfn, qtype type, qtype fields) -> int"""
  return _idaapi.guess_func_tinfo(*args)
GUESS_FUNC_FAILED = _idaapi.GUESS_FUNC_FAILED
GUESS_FUNC_TRIVIAL = _idaapi.GUESS_FUNC_TRIVIAL
GUESS_FUNC_OK = _idaapi.GUESS_FUNC_OK

def guess_tinfo(*args):
  """guess_tinfo(tid_t id, qtype type, qtype fields) -> int"""
  return _idaapi.guess_tinfo(*args)

def set_c_header_path(*args):
  """set_c_header_path(char incdir)"""
  return _idaapi.set_c_header_path(*args)

def get_c_header_path(*args):
  """get_c_header_path() -> ssize_t"""
  return _idaapi.get_c_header_path(*args)

def set_c_macros(*args):
  """set_c_macros(char macros)"""
  return _idaapi.set_c_macros(*args)

def get_c_macros(*args):
  """get_c_macros() -> ssize_t"""
  return _idaapi.get_c_macros(*args)

def get_idainfo_by_type2(*args):
  """
    get_idainfo_by_type2(til_t til, type_t rtype, p_list fields, size_t psize, 
        flags_t pflags, typeinfo_t mt, size_t alsize = None) -> bool
    """
  return _idaapi.get_idainfo_by_type2(*args)
class funcarg_info_t(object):
    """Proxy of C++ funcarg_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    argloc = _swig_property(_idaapi.funcarg_info_t_argloc_get, _idaapi.funcarg_info_t_argloc_set)
    name = _swig_property(_idaapi.funcarg_info_t_name_get, _idaapi.funcarg_info_t_name_set)
    type = _swig_property(_idaapi.funcarg_info_t_type_get, _idaapi.funcarg_info_t_type_set)
    fields = _swig_property(_idaapi.funcarg_info_t_fields_get, _idaapi.funcarg_info_t_fields_set)
    def __init__(self, *args): 
        """__init__(self) -> funcarg_info_t"""
        this = _idaapi.new_funcarg_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_funcarg_info_t
    __del__ = lambda self : None;
funcarg_info_t_swigregister = _idaapi.funcarg_info_t_swigregister
funcarg_info_t_swigregister(funcarg_info_t)

class func_type_info_t(object):
    """Proxy of C++ func_type_info_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    flags = _swig_property(_idaapi.func_type_info_t_flags_get, _idaapi.func_type_info_t_flags_set)
    rettype = _swig_property(_idaapi.func_type_info_t_rettype_get, _idaapi.func_type_info_t_rettype_set)
    retfields = _swig_property(_idaapi.func_type_info_t_retfields_get, _idaapi.func_type_info_t_retfields_set)
    retloc = _swig_property(_idaapi.func_type_info_t_retloc_get, _idaapi.func_type_info_t_retloc_set)
    stkargs = _swig_property(_idaapi.func_type_info_t_stkargs_get, _idaapi.func_type_info_t_stkargs_set)
    spoiled = _swig_property(_idaapi.func_type_info_t_spoiled_get, _idaapi.func_type_info_t_spoiled_set)
    cc = _swig_property(_idaapi.func_type_info_t_cc_get, _idaapi.func_type_info_t_cc_set)
    basetype = _swig_property(_idaapi.func_type_info_t_basetype_get, _idaapi.func_type_info_t_basetype_set)
    def __init__(self, *args): 
        """__init__(self) -> func_type_info_t"""
        this = _idaapi.new_func_type_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_func_type_info_t
    __del__ = lambda self : None;
func_type_info_t_swigregister = _idaapi.func_type_info_t_swigregister
func_type_info_t_swigregister(func_type_info_t)
FTI_SPOILED = _idaapi.FTI_SPOILED


def build_funcarg_info(*args):
  """
    build_funcarg_info(til_t til, type_t type, p_list fields, func_type_info_t info, 
        int bfi_flags) -> int
    """
  return _idaapi.build_funcarg_info(*args)
BFI_NOCONST = _idaapi.BFI_NOCONST

def get_func_rettype(*args):
  """
    get_func_rettype(til_t til, type_t type, p_list fields, qtype rettype, 
        qtype retfields = None, argloc_t p_retloc = None, 
        cm_t p_cc = None) -> int
    """
  return _idaapi.get_func_rettype(*args)

def get_func_cc(*args):
  """get_func_cc(til_t til, type_t p_type, p_list p_fields = None) -> cm_t"""
  return _idaapi.get_func_cc(*args)

def calc_func_nargs(*args):
  """calc_func_nargs(til_t til, type_t type) -> int"""
  return _idaapi.calc_func_nargs(*args)

def calc_purged_bytes(*args):
  """calc_purged_bytes(type_t type) -> int"""
  return _idaapi.calc_purged_bytes(*args)

def resolve_complex_type2(*args):
  """
    resolve_complex_type2(til_t til, type_t ptype, p_list fields, qstring type_name, 
        type_t bt, int N) -> bool
    """
  return _idaapi.resolve_complex_type2(*args)

def is_type_scalar2(*args):
  """is_type_scalar2(til_t til, type_t type) -> bool"""
  return _idaapi.is_type_scalar2(*args)

def get_type_sign(*args):
  """get_type_sign(til_t til, type_t type) -> type_sign_t"""
  return _idaapi.get_type_sign(*args)

def get_strmem(*args):
  """
    get_strmem(til_t til, type_t type, p_list fields, asize_t offset, 
        asize_t delta, qstring name, qtype ftype, 
        qtype fnames, qstring sname) -> bool
    """
  return _idaapi.get_strmem(*args)

def add_til(*args):
  """add_til(char name) -> int"""
  return _idaapi.add_til(*args)

def is_type_voiddef(*args):
  """is_type_voiddef(type_t t) -> bool"""
  return _idaapi.is_type_voiddef(*args)

def is_type_void_obsolete(*args):
  """is_type_void_obsolete(type_t t) -> bool"""
  return _idaapi.is_type_void_obsolete(*args)

def is_type_unk(*args):
  """is_type_unk(type_t t) -> bool"""
  return _idaapi.is_type_unk(*args)

def is_type_only_size(*args):
  """is_type_only_size(type_t t) -> bool"""
  return _idaapi.is_type_only_size(*args)

def apply_type2(*args):
  """apply_type2(ea_t ea, type_t rtype, p_list fields, int userti) -> bool"""
  return _idaapi.apply_type2(*args)

def parse_types2(*args):
  """parse_types2(char input, printer_t printer, int hti_flags) -> int"""
  return _idaapi.parse_types2(*args)

def apply_cdecl(*args):
  """apply_cdecl(ea_t ea, char decl) -> bool"""
  return _idaapi.apply_cdecl(*args)

def til2idb(*args):
  """til2idb(int idx, char name) -> tid_t"""
  return _idaapi.til2idb(*args)

def is_resolved_type_struni(*args):
  """is_resolved_type_struni(type_t type) -> bool"""
  return _idaapi.is_resolved_type_struni(*args)

def make_array_type(*args):
  """make_array_type(type_t buf, size_t bufsize, type_t type, int size) -> bool"""
  return _idaapi.make_array_type(*args)

def get_func_nargs(*args):
  """get_func_nargs(type_t type) -> int"""
  return _idaapi.get_func_nargs(*args)
NTF_NOIDB = _idaapi.NTF_NOIDB

def load_til_header_wrap(*args):
  """load_til_header_wrap(char tildir, char name) -> til_t"""
  return _idaapi.load_til_header_wrap(*args)

def idc_parse_types(*args):
  """idc_parse_types(char input, int flags) -> int"""
  return _idaapi.idc_parse_types(*args)

def idc_get_type(*args):
  """idc_get_type(ea_t ea) -> char"""
  return _idaapi.idc_get_type(*args)

def idc_guess_type(*args):
  """idc_guess_type(ea_t ea) -> char"""
  return _idaapi.idc_guess_type(*args)

def idc_set_local_type(*args):
  """idc_set_local_type(int ordinal, char dcl, int flags) -> int"""
  return _idaapi.idc_set_local_type(*args)

def idc_get_local_type(*args):
  """idc_get_local_type(int ordinal, int flags, char buf) -> int"""
  return _idaapi.idc_get_local_type(*args)

def idc_get_local_type_name(*args):
  """idc_get_local_type_name(int ordinal) -> char"""
  return _idaapi.idc_get_local_type_name(*args)
class op_t(object):
    """Proxy of C++ op_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    n = _swig_property(_idaapi.op_t_n_get, _idaapi.op_t_n_set)
    type = _swig_property(_idaapi.op_t_type_get, _idaapi.op_t_type_set)
    offb = _swig_property(_idaapi.op_t_offb_get, _idaapi.op_t_offb_set)
    offo = _swig_property(_idaapi.op_t_offo_get, _idaapi.op_t_offo_set)
    flags = _swig_property(_idaapi.op_t_flags_get, _idaapi.op_t_flags_set)
    def set_showed(self, *args):
        """set_showed(self)"""
        return _idaapi.op_t_set_showed(self, *args)

    def clr_showed(self, *args):
        """clr_showed(self)"""
        return _idaapi.op_t_clr_showed(self, *args)

    def showed(self, *args):
        """showed(self) -> bool"""
        return _idaapi.op_t_showed(self, *args)

    dtyp = _swig_property(_idaapi.op_t_dtyp_get, _idaapi.op_t_dtyp_set)
    reg = _swig_property(_idaapi.op_t_reg_get, _idaapi.op_t_reg_set)
    phrase = _swig_property(_idaapi.op_t_phrase_get, _idaapi.op_t_phrase_set)
    def is_reg(self, *args):
        """is_reg(self, int r) -> bool"""
        return _idaapi.op_t_is_reg(self, *args)

    value = _swig_property(_idaapi.op_t_value_get, _idaapi.op_t_value_set)
    def is_imm(self, *args):
        """is_imm(self, uval_t v) -> bool"""
        return _idaapi.op_t_is_imm(self, *args)

    addr = _swig_property(_idaapi.op_t_addr_get, _idaapi.op_t_addr_set)
    specval = _swig_property(_idaapi.op_t_specval_get, _idaapi.op_t_specval_set)
    specflag1 = _swig_property(_idaapi.op_t_specflag1_get, _idaapi.op_t_specflag1_set)
    specflag2 = _swig_property(_idaapi.op_t_specflag2_get, _idaapi.op_t_specflag2_set)
    specflag3 = _swig_property(_idaapi.op_t_specflag3_get, _idaapi.op_t_specflag3_set)
    specflag4 = _swig_property(_idaapi.op_t_specflag4_get, _idaapi.op_t_specflag4_set)
    specval_shorts = _swig_property(_idaapi.op_t_specval_shorts_get)
    addr_shorts = _swig_property(_idaapi.op_t_addr_shorts_get)
    value_shorts = _swig_property(_idaapi.op_t_value_shorts_get)
    def __init__(self, *args): 
        """__init__(self) -> op_t"""
        this = _idaapi.new_op_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_op_t
    __del__ = lambda self : None;
op_t_swigregister = _idaapi.op_t_swigregister
op_t_swigregister(op_t)
no_sign = cvar.no_sign
type_signed = cvar.type_signed
type_unsigned = cvar.type_unsigned

def load_til(*args):
  """
    load_til(char tildir, char name, char errbuf, size_t bufsize) -> til_t
    load_til(char tildir, char name) -> til_t
    """
  return _idaapi.load_til(*args)
o_void = cvar.o_void
o_reg = cvar.o_reg
o_mem = cvar.o_mem
o_phrase = cvar.o_phrase
o_displ = cvar.o_displ
o_imm = cvar.o_imm
o_far = cvar.o_far
o_near = cvar.o_near
o_idpspec0 = cvar.o_idpspec0
o_idpspec1 = cvar.o_idpspec1
o_idpspec2 = cvar.o_idpspec2
o_idpspec3 = cvar.o_idpspec3
o_idpspec4 = cvar.o_idpspec4
o_idpspec5 = cvar.o_idpspec5
o_last = cvar.o_last
OF_NO_BASE_DISP = _idaapi.OF_NO_BASE_DISP
OF_OUTER_DISP = _idaapi.OF_OUTER_DISP
PACK_FORM_DEF = _idaapi.PACK_FORM_DEF
OF_NUMBER = _idaapi.OF_NUMBER
OF_SHOW = _idaapi.OF_SHOW
dt_byte = _idaapi.dt_byte
dt_word = _idaapi.dt_word
dt_dword = _idaapi.dt_dword
dt_float = _idaapi.dt_float
dt_double = _idaapi.dt_double
dt_tbyte = _idaapi.dt_tbyte
dt_packreal = _idaapi.dt_packreal
dt_qword = _idaapi.dt_qword
dt_byte16 = _idaapi.dt_byte16
dt_code = _idaapi.dt_code
dt_void = _idaapi.dt_void
dt_fword = _idaapi.dt_fword
dt_bitfild = _idaapi.dt_bitfild
dt_string = _idaapi.dt_string
dt_unicode = _idaapi.dt_unicode
dt_3byte = _idaapi.dt_3byte
dt_ldbl = _idaapi.dt_ldbl

class op_t_specval_shorts(object):
    """Proxy of C++ op_t_specval_shorts class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    low = _swig_property(_idaapi.op_t_specval_shorts_low_get, _idaapi.op_t_specval_shorts_low_set)
    high = _swig_property(_idaapi.op_t_specval_shorts_high_get, _idaapi.op_t_specval_shorts_high_set)
    def __init__(self, *args): 
        """__init__(self) -> op_t_specval_shorts"""
        this = _idaapi.new_op_t_specval_shorts(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_op_t_specval_shorts
    __del__ = lambda self : None;
op_t_specval_shorts_swigregister = _idaapi.op_t_specval_shorts_swigregister
op_t_specval_shorts_swigregister(op_t_specval_shorts)

class op_t_addr_shorts(object):
    """Proxy of C++ op_t_addr_shorts class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    low = _swig_property(_idaapi.op_t_addr_shorts_low_get, _idaapi.op_t_addr_shorts_low_set)
    high = _swig_property(_idaapi.op_t_addr_shorts_high_get, _idaapi.op_t_addr_shorts_high_set)
    def __init__(self, *args): 
        """__init__(self) -> op_t_addr_shorts"""
        this = _idaapi.new_op_t_addr_shorts(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_op_t_addr_shorts
    __del__ = lambda self : None;
op_t_addr_shorts_swigregister = _idaapi.op_t_addr_shorts_swigregister
op_t_addr_shorts_swigregister(op_t_addr_shorts)

class op_t_value_shorts(object):
    """Proxy of C++ op_t_value_shorts class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    low = _swig_property(_idaapi.op_t_value_shorts_low_get, _idaapi.op_t_value_shorts_low_set)
    high = _swig_property(_idaapi.op_t_value_shorts_high_get, _idaapi.op_t_value_shorts_high_set)
    def __init__(self, *args): 
        """__init__(self) -> op_t_value_shorts"""
        this = _idaapi.new_op_t_value_shorts(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_op_t_value_shorts
    __del__ = lambda self : None;
op_t_value_shorts_swigregister = _idaapi.op_t_value_shorts_swigregister
op_t_value_shorts_swigregister(op_t_value_shorts)

class insn_t(object):
    """Proxy of C++ insn_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    cs = _swig_property(_idaapi.insn_t_cs_get, _idaapi.insn_t_cs_set)
    ip = _swig_property(_idaapi.insn_t_ip_get, _idaapi.insn_t_ip_set)
    ea = _swig_property(_idaapi.insn_t_ea_get, _idaapi.insn_t_ea_set)
    itype = _swig_property(_idaapi.insn_t_itype_get, _idaapi.insn_t_itype_set)
    def is_canon_insn(self, *args):
        """is_canon_insn(self) -> bool"""
        return _idaapi.insn_t_is_canon_insn(self, *args)

    def get_canon_feature(self, *args):
        """get_canon_feature(self) -> uint32"""
        return _idaapi.insn_t_get_canon_feature(self, *args)

    def get_canon_mnem(self, *args):
        """get_canon_mnem(self) -> char"""
        return _idaapi.insn_t_get_canon_mnem(self, *args)

    size = _swig_property(_idaapi.insn_t_size_get, _idaapi.insn_t_size_set)
    auxpref = _swig_property(_idaapi.insn_t_auxpref_get, _idaapi.insn_t_auxpref_set)
    segpref = _swig_property(_idaapi.insn_t_segpref_get, _idaapi.insn_t_segpref_set)
    insnpref = _swig_property(_idaapi.insn_t_insnpref_get, _idaapi.insn_t_insnpref_set)
    Operands = _swig_property(_idaapi.insn_t_Operands_get, _idaapi.insn_t_Operands_set)
    flags = _swig_property(_idaapi.insn_t_flags_get, _idaapi.insn_t_flags_set)
    def is_macro(self, *args):
        """is_macro(self) -> bool"""
        return _idaapi.insn_t_is_macro(self, *args)

    auxpref_chars = _swig_property(_idaapi.insn_t_auxpref_chars_get)
    def __init__(self, *args): 
        """__init__(self) -> insn_t"""
        this = _idaapi.new_insn_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_insn_t
    __del__ = lambda self : None;
insn_t_swigregister = _idaapi.insn_t_swigregister
insn_t_swigregister(insn_t)
UA_MAXOP = _idaapi.UA_MAXOP
INSN_MACRO = _idaapi.INSN_MACRO
INSN_MODMAC = _idaapi.INSN_MODMAC

class insn_t_auxpref_chars(object):
    """Proxy of C++ insn_t_auxpref_chars class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    low = _swig_property(_idaapi.insn_t_auxpref_chars_low_get, _idaapi.insn_t_auxpref_chars_low_set)
    high = _swig_property(_idaapi.insn_t_auxpref_chars_high_get, _idaapi.insn_t_auxpref_chars_high_set)
    def __init__(self, *args): 
        """__init__(self) -> insn_t_auxpref_chars"""
        this = _idaapi.new_insn_t_auxpref_chars(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_insn_t_auxpref_chars
    __del__ = lambda self : None;
insn_t_auxpref_chars_swigregister = _idaapi.insn_t_auxpref_chars_swigregister
insn_t_auxpref_chars_swigregister(insn_t_auxpref_chars)

class value_u(object):
    """Proxy of C++ value_u class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    v_char = _swig_property(_idaapi.value_u_v_char_get, _idaapi.value_u_v_char_set)
    v_short = _swig_property(_idaapi.value_u_v_short_get, _idaapi.value_u_v_short_set)
    v_long = _swig_property(_idaapi.value_u_v_long_get, _idaapi.value_u_v_long_set)
    byte16 = _swig_property(_idaapi.value_u_byte16_get, _idaapi.value_u_byte16_set)
    dword3 = _swig_property(_idaapi.value_u_dword3_get, _idaapi.value_u_dword3_set)
    dt = _swig_property(_idaapi.value_u_dt_get)
    _dq = _swig_property(_idaapi.value_u__dq_get)
    def __init__(self, *args): 
        """__init__(self) -> value_u"""
        this = _idaapi.new_value_u(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_value_u
    __del__ = lambda self : None;
value_u_swigregister = _idaapi.value_u_swigregister
value_u_swigregister(value_u)

class value_u_dt(object):
    """Proxy of C++ value_u_dt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    low = _swig_property(_idaapi.value_u_dt_low_get, _idaapi.value_u_dt_low_set)
    high = _swig_property(_idaapi.value_u_dt_high_get, _idaapi.value_u_dt_high_set)
    upper = _swig_property(_idaapi.value_u_dt_upper_get, _idaapi.value_u_dt_upper_set)
    def __init__(self, *args): 
        """__init__(self) -> value_u_dt"""
        this = _idaapi.new_value_u_dt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_value_u_dt
    __del__ = lambda self : None;
value_u_dt_swigregister = _idaapi.value_u_dt_swigregister
value_u_dt_swigregister(value_u_dt)

class value_u__dq(object):
    """Proxy of C++ value_u__dq class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    low = _swig_property(_idaapi.value_u__dq_low_get, _idaapi.value_u__dq_low_set)
    high = _swig_property(_idaapi.value_u__dq_high_get, _idaapi.value_u__dq_high_set)
    def __init__(self, *args): 
        """__init__(self) -> value_u__dq"""
        this = _idaapi.new_value_u__dq(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_value_u__dq
    __del__ = lambda self : None;
value_u__dq_swigregister = _idaapi.value_u__dq_swigregister
value_u__dq_swigregister(value_u__dq)


def get_operand_immvals(*args):
  """get_operand_immvals(ea_t ea, int n, uval_t v) -> size_t"""
  return _idaapi.get_operand_immvals(*args)

def dataSeg_opreg(*args):
  """dataSeg_opreg(int opnum, int rgnum) -> ea_t"""
  return _idaapi.dataSeg_opreg(*args)

def dataSeg_op(*args):
  """dataSeg_op(int opnum) -> ea_t"""
  return _idaapi.dataSeg_op(*args)

def dataSeg(*args):
  """dataSeg() -> ea_t"""
  return _idaapi.dataSeg(*args)

def codeSeg(*args):
  """codeSeg(ea_t addr, int opnum) -> ea_t"""
  return _idaapi.codeSeg(*args)
tbo_123 = _idaapi.tbo_123
tbo_132 = _idaapi.tbo_132
tbo_213 = _idaapi.tbo_213
tbo_231 = _idaapi.tbo_231
tbo_312 = _idaapi.tbo_312
tbo_321 = _idaapi.tbo_321

def ua_next_byte(*args):
  """ua_next_byte() -> uint8"""
  return _idaapi.ua_next_byte(*args)

def ua_next_word(*args):
  """ua_next_word() -> uint16"""
  return _idaapi.ua_next_word(*args)

def ua_next_long(*args):
  """ua_next_long() -> uint32"""
  return _idaapi.ua_next_long(*args)

def ua_next_qword(*args):
  """ua_next_qword() -> uint64"""
  return _idaapi.ua_next_qword(*args)

def get_dtyp_flag(*args):
  """get_dtyp_flag(char dtype) -> flags_t"""
  return _idaapi.get_dtyp_flag(*args)

def get_dtyp_size(*args):
  """get_dtyp_size(char dtype) -> size_t"""
  return _idaapi.get_dtyp_size(*args)

def get_dtyp_by_size(*args):
  """get_dtyp_by_size(asize_t size) -> char"""
  return _idaapi.get_dtyp_by_size(*args)

def create_insn(*args):
  """create_insn(ea_t ea) -> int"""
  return _idaapi.create_insn(*args)

def decode_insn(*args):
  """decode_insn(ea_t ea) -> int"""
  return _idaapi.decode_insn(*args)

def ua_outop2(*args):
  """ua_outop2(ea_t ea, int n, int flags = 0) -> bool"""
  return _idaapi.ua_outop2(*args)

def ua_mnem(*args):
  """ua_mnem(ea_t ea) -> char"""
  return _idaapi.ua_mnem(*args)

def ua_dodata(*args):
  """ua_dodata(ea_t ea, int dtype)"""
  return _idaapi.ua_dodata(*args)

def ua_outop(*args):
  """ua_outop(ea_t ea, int n) -> bool"""
  return _idaapi.ua_outop(*args)

def ua_stkvar(*args):
  """ua_stkvar(op_t x, adiff_t v) -> bool"""
  return _idaapi.ua_stkvar(*args)

def ua_ana0(*args):
  """ua_ana0(ea_t ea) -> int"""
  return _idaapi.ua_ana0(*args)

def ua_code(*args):
  """ua_code(ea_t ea) -> int"""
  return _idaapi.ua_code(*args)

def get_current_instruction(*args):
  """get_current_instruction() -> insn_t"""
  return _idaapi.get_current_instruction(*args)

def get_instruction_operand(*args):
  """get_instruction_operand(insn_t ins, int n) -> op_t"""
  return _idaapi.get_instruction_operand(*args)
fl_U = _idaapi.fl_U
fl_CF = _idaapi.fl_CF
fl_CN = _idaapi.fl_CN
fl_JF = _idaapi.fl_JF
fl_JN = _idaapi.fl_JN
fl_USobsolete = _idaapi.fl_USobsolete
fl_F = _idaapi.fl_F
dr_U = _idaapi.dr_U
dr_O = _idaapi.dr_O
dr_W = _idaapi.dr_W
dr_R = _idaapi.dr_R
dr_T = _idaapi.dr_T
dr_I = _idaapi.dr_I
XREF_USER = _idaapi.XREF_USER
XREF_TAIL = _idaapi.XREF_TAIL
XREF_BASE = _idaapi.XREF_BASE
XREF_MASK = _idaapi.XREF_MASK
XREF_PASTEND = _idaapi.XREF_PASTEND

def xrefchar(*args):
  """xrefchar(char xrtype) -> char"""
  return _idaapi.xrefchar(*args)

def add_cref(*args):
  """add_cref(ea_t frm, ea_t to, cref_t type) -> bool"""
  return _idaapi.add_cref(*args)

def del_cref(*args):
  """del_cref(ea_t frm, ea_t to, bool expand) -> int"""
  return _idaapi.del_cref(*args)

def add_dref(*args):
  """add_dref(ea_t frm, ea_t to, dref_t type) -> bool"""
  return _idaapi.add_dref(*args)

def del_dref(*args):
  """del_dref(ea_t frm, ea_t to)"""
  return _idaapi.del_dref(*args)
class xrefblk_t(object):
    """Proxy of C++ xrefblk_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    frm = _swig_property(_idaapi.xrefblk_t_frm_get, _idaapi.xrefblk_t_frm_set)
    to = _swig_property(_idaapi.xrefblk_t_to_get, _idaapi.xrefblk_t_to_set)
    iscode = _swig_property(_idaapi.xrefblk_t_iscode_get, _idaapi.xrefblk_t_iscode_set)
    type = _swig_property(_idaapi.xrefblk_t_type_get, _idaapi.xrefblk_t_type_set)
    user = _swig_property(_idaapi.xrefblk_t_user_get, _idaapi.xrefblk_t_user_set)
    def first_from(self, *args):
        """first_from(self, ea_t frm, int flags) -> bool"""
        return _idaapi.xrefblk_t_first_from(self, *args)

    def first_to(self, *args):
        """first_to(self, ea_t to, int flags) -> bool"""
        return _idaapi.xrefblk_t_first_to(self, *args)

    def next_from(self, *args):
        """
        next_from(self) -> bool
        next_from(self, ea_t frm, ea_t _to, int flags) -> bool
        """
        return _idaapi.xrefblk_t_next_from(self, *args)

    def next_to(self, *args):
        """
        next_to(self) -> bool
        next_to(self, ea_t _from, ea_t to, int flags) -> bool
        """
        return _idaapi.xrefblk_t_next_to(self, *args)

    def __init__(self, *args): 
        """__init__(self) -> xrefblk_t"""
        this = _idaapi.new_xrefblk_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _idaapi.delete_xrefblk_t
    __del__ = lambda self : None;
xrefblk_t_swigregister = _idaapi.xrefblk_t_swigregister
xrefblk_t_swigregister(xrefblk_t)
XREF_ALL = _idaapi.XREF_ALL
XREF_FAR = _idaapi.XREF_FAR
XREF_DATA = _idaapi.XREF_DATA


def get_first_dref_from(*args):
  """get_first_dref_from(ea_t frm) -> ea_t"""
  return _idaapi.get_first_dref_from(*args)

def get_next_dref_from(*args):
  """get_next_dref_from(ea_t frm, ea_t current) -> ea_t"""
  return _idaapi.get_next_dref_from(*args)

def get_first_dref_to(*args):
  """get_first_dref_to(ea_t to) -> ea_t"""
  return _idaapi.get_first_dref_to(*args)

def get_next_dref_to(*args):
  """get_next_dref_to(ea_t to, ea_t current) -> ea_t"""
  return _idaapi.get_next_dref_to(*args)

def get_first_cref_from(*args):
  """get_first_cref_from(ea_t frm) -> ea_t"""
  return _idaapi.get_first_cref_from(*args)

def get_next_cref_from(*args):
  """get_next_cref_from(ea_t frm, ea_t current) -> ea_t"""
  return _idaapi.get_next_cref_from(*args)

def get_first_cref_to(*args):
  """get_first_cref_to(ea_t to) -> ea_t"""
  return _idaapi.get_first_cref_to(*args)

def get_next_cref_to(*args):
  """get_next_cref_to(ea_t frm, ea_t current) -> ea_t"""
  return _idaapi.get_next_cref_to(*args)

def get_first_fcref_from(*args):
  """get_first_fcref_from(ea_t frm) -> ea_t"""
  return _idaapi.get_first_fcref_from(*args)

def get_next_fcref_from(*args):
  """get_next_fcref_from(ea_t frm, ea_t current) -> ea_t"""
  return _idaapi.get_next_fcref_from(*args)

def get_first_fcref_to(*args):
  """get_first_fcref_to(ea_t to) -> ea_t"""
  return _idaapi.get_first_fcref_to(*args)

def get_next_fcref_to(*args):
  """get_next_fcref_to(ea_t to, ea_t current) -> ea_t"""
  return _idaapi.get_next_fcref_to(*args)

def has_external_refs(*args):
  """has_external_refs(func_t pfn, ea_t ea) -> bool"""
  return _idaapi.has_external_refs(*args)

def create_switch_table(*args):
  """create_switch_table(ea_t insn_ea, switch_info_ex_t si)"""
  return _idaapi.create_switch_table(*args)

def create_switch_xrefs(*args):
  """create_switch_xrefs(ea_t insn_ea, switch_info_ex_t si)"""
  return _idaapi.create_switch_xrefs(*args)

def calc_switch_cases(*args):
  """
    calc_switch_cases(ea_t insn_ea, switch_info_ex_t si, casevec_t casevec, 
        eavec_t targets) -> bool
    """
  return _idaapi.calc_switch_cases(*args)

def set_script_timeout(*args):
  """set_script_timeout(int timeout)"""
  return _idaapi.set_script_timeout(*args)

def enable_extlang_python(*args):
  """enable_extlang_python(bool enable)"""
  return _idaapi.enable_extlang_python(*args)

def enable_python_cli(*args):
  """enable_python_cli(bool enable)"""
  return _idaapi.enable_python_cli(*args)


