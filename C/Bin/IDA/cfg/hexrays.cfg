/*

  Hex-Rays Decompiler configuration file.

  The syntax of this file is very simple.
  Feel free to edit it to your taste.

  IMPORTANT: the installer overwrites this file. Please make a backup copy
  if you modify this file in any way. Otherwise you may lose your
  modifications!

*/

// Background colors (rgb values: 0xBBGGRR)
#define DEFCOLOR 0xFFFFFFFF // default background color

LOCTYPE_BGCOLOR         = DEFCOLOR  // local type defs (not used yet)
VARDECL_BGCOLOR         = DEFCOLOR  // local variable declarations
FUNCBODY_BGCOLOR        = DEFCOLOR  // function body

MARK_BGCOLOR            = 0xEEFFF0  // marked function color (in ida)

// Indentations

BLOCK_INDENT            = 2         // 2 spaces for each curly brace
COMMENT_INDENT          = 48
RIGHT_MARGIN            = 120       // as soon as the line length approaches
                                    // the right margin, the decompiler
                                    // will try to split it

// Analysis options

#define HO_JUMPOUT_HELPERS 0x0001   // If enabled, the decompiler will
                                    // generate JUMPOUT() function instead of
                                    // failing the decompilation because of
                                    // out-of-function control flow
#define HO_DISPLAY_CASTS   0x0002   // Print casts in the output text.
                                    // For example: (int*)x
#define HO_HIDE_UNORDERED  0x0004   // Hide unordered fpval comparisons

HEXOPTIONS              = 0x0007    // Combination of HO_... bits

// Warning messages

#define NOTE_VARARG_REGS    0 // can not handle register arguments in vararg function, discarded them
#define NOTE_ILL_PURGED     1 // odd caller purged bytes %d, correcting
#define NOTE_ILL_FUNCTYPE   2 // invalid function type has been ignored
#define NOTE_VARARG_TCAL    3 // can not handle tail call to vararg
#define NOTE_VARARG_NOSTK   4 // call vararg without local stack
#define NOTE_VARARG_MANY    5 // too many varargs, some ignored
#define NOTE_ADDR_OUTARGS   6 // can not handle address arithmetics in outgoing argument area of stack frame
#define NOTE_DEP_UNK_CALLS  7 // found interdependent unknown calls
#define NOTE_ILL_ELLIPSIS   8 // erroneously detected ellipsis type has been ignored
#define NOTE_GUESSED_TYPE   9 // using guessed type %s;
#define NOTE_EXP_LINVAR    10 // failed to expand a linear variable
#define NOTE_WIDEN_CHAINS  11 // failed to widen chains
#define WARN_BAD_PURGED    12 // inconsistent function type and number of purged bytes
#define NOTE_CBUILD_LOOPS  13 // too many cbuild loops
#define NOTE_NO_SAVE_REST  14 // could not find valid save-restore pair for %s
#define NOTE_ODD_INPUT_REG 15 // odd input register %s
#define NOTE_ODD_ADDR_USE  16 // odd use of a variable address
#define NOTE_MUST_RET_FP   17 // function return type is incorrect (must be floating point)
#define NOTE_ILL_FPU_STACK 18 // inconsistent fpu stack
#define NOTE_SELFREF_PROP  19 // self-referencing variable has been detected

WARNS1 = 0xFFFFFFFF           // Bitmask of enabled warnings

// End of the file